'/*
'** Copyright (c) 2007 The Khronos Group Inc.
'**
'** Permission is hereby granted, free of charge, to any person obtaining a
'** copy of this software and/or associated documentation files (the
'** "Materials"), to deal in the Materials without restriction, including
'** without limitation the rights to use, copy, modify, merge, publish,
'** distribute, sublicense, and/or sell copies of the Materials, and to
'** permit persons to whom the Materials are furnished to do so, subject to
'** the following conditions:
'**
'** The above copyright notice and this permission notice shall be included
'** in all copies or substantial portions of the Materials.
'**
'** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
'** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
'** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
'** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
'** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
'** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
'** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
'*/

'/*************************************************************/

'/* Header file version number, required by OpenGL ABI for Linux */
'/* glext.h last updated 2008/10/09 */
'/* Current version at http://www.opengl.org/registry/ */

#IF NOT %DEF(%GLEXT_INC)
   %GLEXT_INC = 1

#INCLUDE ONCE "WINDOWS.INC"
#INCLUDE ONCE "GL.INC"
#INCLUDE ONCE "GLU.INC"

%GL_GLEXT_VERSION                                    = 43

#IF NOT %DEF(%GL_VERSION_1_2)
%GL_UNSIGNED_BYTE_3_3_2                              = &H8032???
%GL_UNSIGNED_SHORT_4_4_4_4                           = &H8033???
%GL_UNSIGNED_SHORT_5_5_5_1                           = &H8034???
%GL_UNSIGNED_INT_8_8_8_8                             = &H8035???
%GL_UNSIGNED_INT_10_10_10_2                          = &H8036???
%GL_RESCALE_NORMAL                                   = &H803A???
%GL_TEXTURE_BINDING_3D                               = &H806A???
%GL_PACK_SKIP_IMAGES                                 = &H806B???
%GL_PACK_IMAGE_HEIGHT                                = &H806C???
%GL_UNPACK_SKIP_IMAGES                               = &H806D???
%GL_UNPACK_IMAGE_HEIGHT                              = &H806E???
%GL_TEXTURE_3D                                       = &H806F???
%GL_PROXY_TEXTURE_3D                                 = &H8070???
%GL_TEXTURE_DEPTH                                    = &H8071???
%GL_TEXTURE_WRAP_R                                   = &H8072???
%GL_MAX_3D_TEXTURE_SIZE                              = &H8073???
%GL_UNSIGNED_BYTE_2_3_3_REV                          = &H8362???
%GL_UNSIGNED_SHORT_5_6_5                             = &H8363???
%GL_UNSIGNED_SHORT_5_6_5_REV                         = &H8364???
%GL_UNSIGNED_SHORT_4_4_4_4_REV                       = &H8365???
%GL_UNSIGNED_SHORT_1_5_5_5_REV                       = &H8366???
%GL_UNSIGNED_INT_8_8_8_8_REV                         = &H8367???
%GL_UNSIGNED_INT_2_10_10_10_REV                      = &H8368???
%GL_BGR                                              = &H80E0???
%GL_BGRA                                             = &H80E1???
%GL_MAX_ELEMENTS_VERTICES                            = &H80E8???
%GL_MAX_ELEMENTS_INDICES                             = &H80E9???
%GL_CLAMP_TO_EDGE                                    = &H812F???
%GL_TEXTURE_MIN_LOD                                  = &H813A???
%GL_TEXTURE_MAX_LOD                                  = &H813B???
%GL_TEXTURE_BASE_LEVEL                               = &H813C???
%GL_TEXTURE_MAX_LEVEL                                = &H813D???
%GL_LIGHT_MODEL_COLOR_CONTROL                        = &H81F8???
%GL_SINGLE_COLOR                                     = &H81F9???
%GL_SEPARATE_SPECULAR_COLOR                          = &H81FA???
%GL_SMOOTH_POINT_SIZE_RANGE                          = &H0B12???
%GL_SMOOTH_POINT_SIZE_GRANULARITY                    = &H0B13???
%GL_SMOOTH_LINE_WIDTH_RANGE                          = &H0B22???
%GL_SMOOTH_LINE_WIDTH_GRANULARITY                    = &H0B23???
%GL_ALIASED_POINT_SIZE_RANGE                         = &H846D???
%GL_ALIASED_LINE_WIDTH_RANGE                         = &H846E???
#ENDIF

#IF NOT %DEF(%GL_ARB_imaging)
%GL_CONSTANT_COLOR                                   = &H8001???
%GL_ONE_MINUS_CONSTANT_COLOR                         = &H8002???
%GL_CONSTANT_ALPHA                                   = &H8003???
%GL_ONE_MINUS_CONSTANT_ALPHA                         = &H8004???
%GL_BLEND_COLOR                                      = &H8005???
%GL_FUNC_ADD                                         = &H8006???
%GL_MIN                                              = &H8007???
%GL_MAX                                              = &H8008???
%GL_BLEND_EQUATION                                   = &H8009???
%GL_FUNC_SUBTRACT                                    = &H800A???
%GL_FUNC_REVERSE_SUBTRACT                            = &H800B???
%GL_CONVOLUTION_1D                                   = &H8010???
%GL_CONVOLUTION_2D                                   = &H8011???
%GL_SEPARABLE_2D                                     = &H8012???
%GL_CONVOLUTION_BORDER_MODE                          = &H8013???
%GL_CONVOLUTION_FILTER_SCALE                         = &H8014???
%GL_CONVOLUTION_FILTER_BIAS                          = &H8015???
%GL_REDUCE                                           = &H8016???
%GL_CONVOLUTION_FORMAT                               = &H8017???
%GL_CONVOLUTION_WIDTH                                = &H8018???
%GL_CONVOLUTION_HEIGHT                               = &H8019???
%GL_MAX_CONVOLUTION_WIDTH                            = &H801A???
%GL_MAX_CONVOLUTION_HEIGHT                           = &H801B???
%GL_POST_CONVOLUTION_RED_SCALE                       = &H801C???
%GL_POST_CONVOLUTION_GREEN_SCALE                     = &H801D???
%GL_POST_CONVOLUTION_BLUE_SCALE                      = &H801E???
%GL_POST_CONVOLUTION_ALPHA_SCALE                     = &H801F???
%GL_POST_CONVOLUTION_RED_BIAS                        = &H8020???
%GL_POST_CONVOLUTION_GREEN_BIAS                      = &H8021???
%GL_POST_CONVOLUTION_BLUE_BIAS                       = &H8022???
%GL_POST_CONVOLUTION_ALPHA_BIAS                      = &H8023???
%GL_HISTOGRAM                                        = &H8024???
%GL_PROXY_HISTOGRAM                                  = &H8025???
%GL_HISTOGRAM_WIDTH                                  = &H8026???
%GL_HISTOGRAM_FORMAT                                 = &H8027???
%GL_HISTOGRAM_RED_SIZE                               = &H8028???
%GL_HISTOGRAM_GREEN_SIZE                             = &H8029???
%GL_HISTOGRAM_BLUE_SIZE                              = &H802A???
%GL_HISTOGRAM_ALPHA_SIZE                             = &H802B???
%GL_HISTOGRAM_LUMINANCE_SIZE                         = &H802C???
%GL_HISTOGRAM_SINK                                   = &H802D???
%GL_MINMAX                                           = &H802E???
%GL_MINMAX_FORMAT                                    = &H802F???
%GL_MINMAX_SINK                                      = &H8030???
%GL_TABLE_TOO_LARGE                                  = &H8031???
%GL_COLOR_MATRIX                                     = &H80B1???
%GL_COLOR_MATRIX_STACK_DEPTH                         = &H80B2???
%GL_MAX_COLOR_MATRIX_STACK_DEPTH                     = &H80B3???
%GL_POST_COLOR_MATRIX_RED_SCALE                      = &H80B4???
%GL_POST_COLOR_MATRIX_GREEN_SCALE                    = &H80B5???
%GL_POST_COLOR_MATRIX_BLUE_SCALE                     = &H80B6???
%GL_POST_COLOR_MATRIX_ALPHA_SCALE                    = &H80B7???
%GL_POST_COLOR_MATRIX_RED_BIAS                       = &H80B8???
%GL_POST_COLOR_MATRIX_GREEN_BIAS                     = &H80B9???
%GL_POST_COLOR_MATRIX_BLUE_BIAS                      = &H80BA???
%GL_POST_COLOR_MATRIX_ALPHA_BIAS                     = &H80BB???
%GL_COLOR_TABLE                                      = &H80D0???
%GL_POST_CONVOLUTION_COLOR_TABLE                     = &H80D1???
%GL_POST_COLOR_MATRIX_COLOR_TABLE                    = &H80D2???
%GL_PROXY_COLOR_TABLE                                = &H80D3???
%GL_PROXY_POST_CONVOLUTION_COLOR_TABLE               = &H80D4???
%GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE              = &H80D5???
%GL_COLOR_TABLE_SCALE                                = &H80D6???
%GL_COLOR_TABLE_BIAS                                 = &H80D7???
%GL_COLOR_TABLE_FORMAT                               = &H80D8???
%GL_COLOR_TABLE_WIDTH                                = &H80D9???
%GL_COLOR_TABLE_RED_SIZE                             = &H80DA???
%GL_COLOR_TABLE_GREEN_SIZE                           = &H80DB???
%GL_COLOR_TABLE_BLUE_SIZE                            = &H80DC???
%GL_COLOR_TABLE_ALPHA_SIZE                           = &H80DD???
%GL_COLOR_TABLE_LUMINANCE_SIZE                       = &H80DE???
%GL_COLOR_TABLE_INTENSITY_SIZE                       = &H80DF???
%GL_CONSTANT_BORDER                                  = &H8151???
%GL_REPLICATE_BORDER                                 = &H8153???
%GL_CONVOLUTION_BORDER_COLOR                         = &H8154???
#ENDIF

#IF NOT %DEF(%GL_VERSION_1_3)
%GL_TEXTURE0                                         = &H84C0???
%GL_TEXTURE1                                         = &H84C1???
%GL_TEXTURE2                                         = &H84C2???
%GL_TEXTURE3                                         = &H84C3???
%GL_TEXTURE4                                         = &H84C4???
%GL_TEXTURE5                                         = &H84C5???
%GL_TEXTURE6                                         = &H84C6???
%GL_TEXTURE7                                         = &H84C7???
%GL_TEXTURE8                                         = &H84C8???
%GL_TEXTURE9                                         = &H84C9???
%GL_TEXTURE10                                        = &H84CA???
%GL_TEXTURE11                                        = &H84CB???
%GL_TEXTURE12                                        = &H84CC???
%GL_TEXTURE13                                        = &H84CD???
%GL_TEXTURE14                                        = &H84CE???
%GL_TEXTURE15                                        = &H84CF???
%GL_TEXTURE16                                        = &H84D0???
%GL_TEXTURE17                                        = &H84D1???
%GL_TEXTURE18                                        = &H84D2???
%GL_TEXTURE19                                        = &H84D3???
%GL_TEXTURE20                                        = &H84D4???
%GL_TEXTURE21                                        = &H84D5???
%GL_TEXTURE22                                        = &H84D6???
%GL_TEXTURE23                                        = &H84D7???
%GL_TEXTURE24                                        = &H84D8???
%GL_TEXTURE25                                        = &H84D9???
%GL_TEXTURE26                                        = &H84DA???
%GL_TEXTURE27                                        = &H84DB???
%GL_TEXTURE28                                        = &H84DC???
%GL_TEXTURE29                                        = &H84DD???
%GL_TEXTURE30                                        = &H84DE???
%GL_TEXTURE31                                        = &H84DF???
%GL_ACTIVE_TEXTURE                                   = &H84E0???
%GL_CLIENT_ACTIVE_TEXTURE                            = &H84E1???
%GL_MAX_TEXTURE_UNITS                                = &H84E2???
%GL_TRANSPOSE_MODELVIEW_MATRIX                       = &H84E3???
%GL_TRANSPOSE_PROJECTION_MATRIX                      = &H84E4???
%GL_TRANSPOSE_TEXTURE_MATRIX                         = &H84E5???
%GL_TRANSPOSE_COLOR_MATRIX                           = &H84E6???
%GL_MULTISAMPLE                                      = &H809D???
%GL_SAMPLE_ALPHA_TO_COVERAGE                         = &H809E???
%GL_SAMPLE_ALPHA_TO_ONE                              = &H809F???
%GL_SAMPLE_COVERAGE                                  = &H80A0???
%GL_SAMPLE_BUFFERS                                   = &H80A8???
%GL_SAMPLES                                          = &H80A9???
%GL_SAMPLE_COVERAGE_VALUE                            = &H80AA???
%GL_SAMPLE_COVERAGE_INVERT                           = &H80AB???
%GL_MULTISAMPLE_BIT                                  = &H20000000???
%GL_NORMAL_MAP                                       = &H8511???
%GL_REFLECTION_MAP                                   = &H8512???
%GL_TEXTURE_CUBE_MAP                                 = &H8513???
%GL_TEXTURE_BINDING_CUBE_MAP                         = &H8514???
%GL_TEXTURE_CUBE_MAP_POSITIVE_X                      = &H8515???
%GL_TEXTURE_CUBE_MAP_NEGATIVE_X                      = &H8516???
%GL_TEXTURE_CUBE_MAP_POSITIVE_Y                      = &H8517???
%GL_TEXTURE_CUBE_MAP_NEGATIVE_Y                      = &H8518???
%GL_TEXTURE_CUBE_MAP_POSITIVE_Z                      = &H8519???
%GL_TEXTURE_CUBE_MAP_NEGATIVE_Z                      = &H851A???
%GL_PROXY_TEXTURE_CUBE_MAP                           = &H851B???
%GL_MAX_CUBE_MAP_TEXTURE_SIZE                        = &H851C???
%GL_COMPRESSED_ALPHA                                 = &H84E9???
%GL_COMPRESSED_LUMINANCE                             = &H84EA???
%GL_COMPRESSED_LUMINANCE_ALPHA                       = &H84EB???
%GL_COMPRESSED_INTENSITY                             = &H84EC???
%GL_COMPRESSED_RGB                                   = &H84ED???
%GL_COMPRESSED_RGBA                                  = &H84EE???
%GL_TEXTURE_COMPRESSION_HINT                         = &H84EF???
%GL_TEXTURE_COMPRESSED_IMAGE_SIZE                    = &H86A0???
%GL_TEXTURE_COMPRESSED                               = &H86A1???
%GL_NUM_COMPRESSED_TEXTURE_FORMATS                   = &H86A2???
%GL_COMPRESSED_TEXTURE_FORMATS                       = &H86A3???
%GL_CLAMP_TO_BORDER                                  = &H812D???
%GL_COMBINE                                          = &H8570???
%GL_COMBINE_RGB                                      = &H8571???
%GL_COMBINE_ALPHA                                    = &H8572???
%GL_SOURCE0_RGB                                      = &H8580???
%GL_SOURCE1_RGB                                      = &H8581???
%GL_SOURCE2_RGB                                      = &H8582???
%GL_SOURCE0_ALPHA                                    = &H8588???
%GL_SOURCE1_ALPHA                                    = &H8589???
%GL_SOURCE2_ALPHA                                    = &H858A???
%GL_OPERAND0_RGB                                     = &H8590???
%GL_OPERAND1_RGB                                     = &H8591???
%GL_OPERAND2_RGB                                     = &H8592???
%GL_OPERAND0_ALPHA                                   = &H8598???
%GL_OPERAND1_ALPHA                                   = &H8599???
%GL_OPERAND2_ALPHA                                   = &H859A???
%GL_RGB_SCALE                                        = &H8573???
%GL_ADD_SIGNED                                       = &H8574???
%GL_INTERPOLATE                                      = &H8575???
%GL_SUBTRACT                                         = &H84E7???
%GL_CONSTANT                                         = &H8576???
%GL_PRIMARY_COLOR                                    = &H8577???
%GL_PREVIOUS                                         = &H8578???
%GL_DOT3_RGB                                         = &H86AE???
%GL_DOT3_RGBA                                        = &H86AF???
#ENDIF

#IF NOT %DEF(%GL_VERSION_1_4)
%GL_BLEND_DST_RGB                                    = &H80C8???
%GL_BLEND_SRC_RGB                                    = &H80C9???
%GL_BLEND_DST_ALPHA                                  = &H80CA???
%GL_BLEND_SRC_ALPHA                                  = &H80CB???
%GL_POINT_SIZE_MIN                                   = &H8126???
%GL_POINT_SIZE_MAX                                   = &H8127???
%GL_POINT_FADE_THRESHOLD_SIZE                        = &H8128???
%GL_POINT_DISTANCE_ATTENUATION                       = &H8129???
%GL_GENERATE_MIPMAP                                  = &H8191???
%GL_GENERATE_MIPMAP_HINT                             = &H8192???
%GL_DEPTH_COMPONENT16                                = &H81A5???
%GL_DEPTH_COMPONENT24                                = &H81A6???
%GL_DEPTH_COMPONENT32                                = &H81A7???
%GL_MIRRORED_REPEAT                                  = &H8370???
%GL_FOG_COORDINATE_SOURCE                            = &H8450???
%GL_FOG_COORDINATE                                   = &H8451???
%GL_FRAGMENT_DEPTH                                   = &H8452???
%GL_CURRENT_FOG_COORDINATE                           = &H8453???
%GL_FOG_COORDINATE_ARRAY_TYPE                        = &H8454???
%GL_FOG_COORDINATE_ARRAY_STRIDE                      = &H8455???
%GL_FOG_COORDINATE_ARRAY_POINTER                     = &H8456???
%GL_FOG_COORDINATE_ARRAY                             = &H8457???
%GL_COLOR_SUM                                        = &H8458???
%GL_CURRENT_SECONDARY_COLOR                          = &H8459???
%GL_SECONDARY_COLOR_ARRAY_SIZE                       = &H845A???
%GL_SECONDARY_COLOR_ARRAY_TYPE                       = &H845B???
%GL_SECONDARY_COLOR_ARRAY_STRIDE                     = &H845C???
%GL_SECONDARY_COLOR_ARRAY_POINTER                    = &H845D???
%GL_SECONDARY_COLOR_ARRAY                            = &H845E???
%GL_MAX_TEXTURE_LOD_BIAS                             = &H84FD???
%GL_TEXTURE_FILTER_CONTROL                           = &H8500???
%GL_TEXTURE_LOD_BIAS                                 = &H8501???
%GL_INCR_WRAP                                        = &H8507???
%GL_DECR_WRAP                                        = &H8508???
%GL_TEXTURE_DEPTH_SIZE                               = &H884A???
%GL_DEPTH_TEXTURE_MODE                               = &H884B???
%GL_TEXTURE_COMPARE_MODE                             = &H884C???
%GL_TEXTURE_COMPARE_FUNC                             = &H884D???
%GL_COMPARE_R_TO_TEXTURE                             = &H884E???
#ENDIF

#IF NOT %DEF(%GL_VERSION_1_5)
%GL_BUFFER_SIZE                                      = &H8764???
%GL_BUFFER_USAGE                                     = &H8765???
%GL_QUERY_COUNTER_BITS                               = &H8864???
%GL_CURRENT_QUERY                                    = &H8865???
%GL_QUERY_RESULT                                     = &H8866???
%GL_QUERY_RESULT_AVAILABLE                           = &H8867???
%GL_ARRAY_BUFFER                                     = &H8892???
%GL_ELEMENT_ARRAY_BUFFER                             = &H8893???
%GL_ARRAY_BUFFER_BINDING                             = &H8894???
%GL_ELEMENT_ARRAY_BUFFER_BINDING                     = &H8895???
%GL_VERTEX_ARRAY_BUFFER_BINDING                      = &H8896???
%GL_NORMAL_ARRAY_BUFFER_BINDING                      = &H8897???
%GL_COLOR_ARRAY_BUFFER_BINDING                       = &H8898???
%GL_INDEX_ARRAY_BUFFER_BINDING                       = &H8899???
%GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING               = &H889A???
%GL_EDGE_FLAG_ARRAY_BUFFER_BINDING                   = &H889B???
%GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING             = &H889C???
%GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING              = &H889D???
%GL_WEIGHT_ARRAY_BUFFER_BINDING                      = &H889E???
%GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING               = &H889F???
%GL_READ_ONLY                                        = &H88B8???
%GL_WRITE_ONLY                                       = &H88B9???
%GL_READ_WRITE                                       = &H88BA???
%GL_BUFFER_ACCESS                                    = &H88BB???
%GL_BUFFER_MAPPED                                    = &H88BC???
%GL_BUFFER_MAP_POINTER                               = &H88BD???
%GL_STREAM_DRAW                                      = &H88E0???
%GL_STREAM_READ                                      = &H88E1???
%GL_STREAM_COPY                                      = &H88E2???
%GL_STATIC_DRAW                                      = &H88E4???
%GL_STATIC_READ                                      = &H88E5???
%GL_STATIC_COPY                                      = &H88E6???
%GL_DYNAMIC_DRAW                                     = &H88E8???
%GL_DYNAMIC_READ                                     = &H88E9???
%GL_DYNAMIC_COPY                                     = &H88EA???
%GL_SAMPLES_PASSED                                   = &H8914???
%GL_FOG_COORD_SRC                                    = %GL_FOG_COORDINATE_SOURCE
%GL_FOG_COORD                                        = %GL_FOG_COORDINATE
%GL_CURRENT_FOG_COORD                                = %GL_CURRENT_FOG_COORDINATE
%GL_FOG_COORD_ARRAY_TYPE                             = %GL_FOG_COORDINATE_ARRAY_TYPE
%GL_FOG_COORD_ARRAY_STRIDE                           = %GL_FOG_COORDINATE_ARRAY_STRIDE
%GL_FOG_COORD_ARRAY_POINTER                          = %GL_FOG_COORDINATE_ARRAY_POINTER
%GL_FOG_COORD_ARRAY                                  = %GL_FOG_COORDINATE_ARRAY
%GL_FOG_COORD_ARRAY_BUFFER_BINDING                   = %GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
%GL_SRC0_RGB                                         = %GL_SOURCE0_RGB
%GL_SRC1_RGB                                         = %GL_SOURCE1_RGB
%GL_SRC2_RGB                                         = %GL_SOURCE2_RGB
%GL_SRC0_ALPHA                                       = %GL_SOURCE0_ALPHA
%GL_SRC1_ALPHA                                       = %GL_SOURCE1_ALPHA
%GL_SRC2_ALPHA                                       = %GL_SOURCE2_ALPHA
#ENDIF

#IF NOT %DEF(%GL_VERSION_2_0)
%GL_BLEND_EQUATION_RGB                               = %GL_BLEND_EQUATION
%GL_VERTEX_ATTRIB_ARRAY_ENABLED                      = &H8622???
%GL_VERTEX_ATTRIB_ARRAY_SIZE                         = &H8623???
%GL_VERTEX_ATTRIB_ARRAY_STRIDE                       = &H8624???
%GL_VERTEX_ATTRIB_ARRAY_TYPE                         = &H8625???
%GL_CURRENT_VERTEX_ATTRIB                            = &H8626???
%GL_VERTEX_PROGRAM_POINT_SIZE                        = &H8642???
%GL_VERTEX_PROGRAM_TWO_SIDE                          = &H8643???
%GL_VERTEX_ATTRIB_ARRAY_POINTER                      = &H8645???
%GL_STENCIL_BACK_FUNC                                = &H8800???
%GL_STENCIL_BACK_FAIL                                = &H8801???
%GL_STENCIL_BACK_PASS_DEPTH_FAIL                     = &H8802???
%GL_STENCIL_BACK_PASS_DEPTH_PASS                     = &H8803???
%GL_MAX_DRAW_BUFFERS                                 = &H8824???
%GL_DRAW_BUFFER0                                     = &H8825???
%GL_DRAW_BUFFER1                                     = &H8826???
%GL_DRAW_BUFFER2                                     = &H8827???
%GL_DRAW_BUFFER3                                     = &H8828???
%GL_DRAW_BUFFER4                                     = &H8829???
%GL_DRAW_BUFFER5                                     = &H882A???
%GL_DRAW_BUFFER6                                     = &H882B???
%GL_DRAW_BUFFER7                                     = &H882C???
%GL_DRAW_BUFFER8                                     = &H882D???
%GL_DRAW_BUFFER9                                     = &H882E???
%GL_DRAW_BUFFER10                                    = &H882F???
%GL_DRAW_BUFFER11                                    = &H8830???
%GL_DRAW_BUFFER12                                    = &H8831???
%GL_DRAW_BUFFER13                                    = &H8832???
%GL_DRAW_BUFFER14                                    = &H8833???
%GL_DRAW_BUFFER15                                    = &H8834???
%GL_BLEND_EQUATION_ALPHA                             = &H883D???
%GL_POINT_SPRITE                                     = &H8861???
%GL_COORD_REPLACE                                    = &H8862???
%GL_MAX_VERTEX_ATTRIBS                               = &H8869???
%GL_VERTEX_ATTRIB_ARRAY_NORMALIZED                   = &H886A???
%GL_MAX_TEXTURE_COORDS                               = &H8871???
%GL_MAX_TEXTURE_IMAGE_UNITS                          = &H8872???
%GL_FRAGMENT_SHADER                                  = &H8B30???
%GL_VERTEX_SHADER                                    = &H8B31???
%GL_MAX_FRAGMENT_UNIFORM_COMPONENTS                  = &H8B49???
%GL_MAX_VERTEX_UNIFORM_COMPONENTS                    = &H8B4A???
%GL_MAX_VARYING_FLOATS                               = &H8B4B???
%GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS                   = &H8B4C???
%GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS                 = &H8B4D???
%GL_SHADER_TYPE                                      = &H8B4F???
%GL_FLOAT_VEC2                                       = &H8B50???
%GL_FLOAT_VEC3                                       = &H8B51???
%GL_FLOAT_VEC4                                       = &H8B52???
%GL_INT_VEC2                                         = &H8B53???
%GL_INT_VEC3                                         = &H8B54???
%GL_INT_VEC4                                         = &H8B55???
%GL_BOOL                                             = &H8B56???
%GL_BOOL_VEC2                                        = &H8B57???
%GL_BOOL_VEC3                                        = &H8B58???
%GL_BOOL_VEC4                                        = &H8B59???
%GL_FLOAT_MAT2                                       = &H8B5A???
%GL_FLOAT_MAT3                                       = &H8B5B???
%GL_FLOAT_MAT4                                       = &H8B5C???
%GL_SAMPLER_1D                                       = &H8B5D???
%GL_SAMPLER_2D                                       = &H8B5E???
%GL_SAMPLER_3D                                       = &H8B5F???
%GL_SAMPLER_CUBE                                     = &H8B60???
%GL_SAMPLER_1D_SHADOW                                = &H8B61???
%GL_SAMPLER_2D_SHADOW                                = &H8B62???
%GL_DELETE_STATUS                                    = &H8B80???
%GL_COMPILE_STATUS                                   = &H8B81???
%GL_LINK_STATUS                                      = &H8B82???
%GL_VALIDATE_STATUS                                  = &H8B83???
%GL_INFO_LOG_LENGTH                                  = &H8B84???
%GL_ATTACHED_SHADERS                                 = &H8B85???
%GL_ACTIVE_UNIFORMS                                  = &H8B86???
%GL_ACTIVE_UNIFORM_MAX_LENGTH                        = &H8B87???
%GL_SHADER_SOURCE_LENGTH                             = &H8B88???
%GL_ACTIVE_ATTRIBUTES                                = &H8B89???
%GL_ACTIVE_ATTRIBUTE_MAX_LENGTH                      = &H8B8A???
%GL_FRAGMENT_SHADER_DERIVATIVE_HINT                  = &H8B8B???
%GL_SHADING_LANGUAGE_VERSION                         = &H8B8C???
%GL_CURRENT_PROGRAM                                  = &H8B8D???
%GL_POINT_SPRITE_COORD_ORIGIN                        = &H8CA0???
%GL_LOWER_LEFT                                       = &H8CA1???
%GL_UPPER_LEFT                                       = &H8CA2???
%GL_STENCIL_BACK_REF                                 = &H8CA3???
%GL_STENCIL_BACK_VALUE_MASK                          = &H8CA4???
%GL_STENCIL_BACK_WRITEMASK                           = &H8CA5???
#ENDIF

#IF NOT %DEF(%GL_VERSION_2_1)
%GL_CURRENT_RASTER_SECONDARY_COLOR                   = &H845F???
%GL_PIXEL_PACK_BUFFER                                = &H88EB???
%GL_PIXEL_UNPACK_BUFFER                              = &H88EC???
%GL_PIXEL_PACK_BUFFER_BINDING                        = &H88ED???
%GL_PIXEL_UNPACK_BUFFER_BINDING                      = &H88EF???
%GL_FLOAT_MAT2x3                                     = &H8B65???
%GL_FLOAT_MAT2x4                                     = &H8B66???
%GL_FLOAT_MAT3x2                                     = &H8B67???
%GL_FLOAT_MAT3x4                                     = &H8B68???
%GL_FLOAT_MAT4x2                                     = &H8B69???
%GL_FLOAT_MAT4x3                                     = &H8B6A???
%GL_SRGB                                             = &H8C40???
%GL_SRGB8                                            = &H8C41???
%GL_SRGB_ALPHA                                       = &H8C42???
%GL_SRGB8_ALPHA8                                     = &H8C43???
%GL_SLUMINANCE_ALPHA                                 = &H8C44???
%GL_SLUMINANCE8_ALPHA8                               = &H8C45???
%GL_SLUMINANCE                                       = &H8C46???
%GL_SLUMINANCE8                                      = &H8C47???
%GL_COMPRESSED_SRGB                                  = &H8C48???
%GL_COMPRESSED_SRGB_ALPHA                            = &H8C49???
%GL_COMPRESSED_SLUMINANCE                            = &H8C4A???
%GL_COMPRESSED_SLUMINANCE_ALPHA                      = &H8C4B???
#ENDIF

#IF NOT %DEF(%GL_VERSION_3_0)
%GL_COMPARE_REF_TO_TEXTURE                           = &H884E???   ' %GL_COMPARE_R_TO_TEXTURE_ARB
%GL_CLIP_DISTANCE0                                   = %GL_CLIP_PLANE0
%GL_CLIP_DISTANCE1                                   = %GL_CLIP_PLANE1
%GL_CLIP_DISTANCE2                                   = %GL_CLIP_PLANE2
%GL_CLIP_DISTANCE3                                   = %GL_CLIP_PLANE3
%GL_CLIP_DISTANCE4                                   = %GL_CLIP_PLANE4
%GL_CLIP_DISTANCE5                                   = %GL_CLIP_PLANE5
%GL_MAX_CLIP_DISTANCES                               = %GL_MAX_CLIP_PLANES
%GL_MAJOR_VERSION                                    = &H821B???
%GL_MINOR_VERSION                                    = &H821C???
%GL_NUM_EXTENSIONS                                   = &H821D???
%GL_CONTEXT_FLAGS                                    = &H821E???
%GL_DEPTH_BUFFER                                     = &H8223???
%GL_STENCIL_BUFFER                                   = &H8224???
%GL_COMPRESSED_RED                                   = &H8225???
%GL_COMPRESSED_RG                                    = &H8226???
%GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT              = &H0001???
%GL_RGBA32F                                          = &H8814???
%GL_RGB32F                                           = &H8815???
%GL_RGBA16F                                          = &H881A???
%GL_RGB16F                                           = &H881B???
%GL_VERTEX_ATTRIB_ARRAY_INTEGER                      = &H88FD???
%GL_MAX_ARRAY_TEXTURE_LAYERS                         = &H88FF???
%GL_MIN_PROGRAM_TEXEL_OFFSET                         = &H8904???
%GL_MAX_PROGRAM_TEXEL_OFFSET                         = &H8905???
%GL_CLAMP_VERTEX_COLOR                               = &H891A???
%GL_CLAMP_FRAGMENT_COLOR                             = &H891B???
%GL_CLAMP_READ_COLOR                                 = &H891C???
%GL_FIXED_ONLY                                       = &H891D???
%GL_MAX_VARYING_COMPONENTS                           = %GL_MAX_VARYING_FLOATS
%GL_TEXTURE_RED_TYPE                                 = &H8C10???
%GL_TEXTURE_GREEN_TYPE                               = &H8C11???
%GL_TEXTURE_BLUE_TYPE                                = &H8C12???
%GL_TEXTURE_ALPHA_TYPE                               = &H8C13???
%GL_TEXTURE_LUMINANCE_TYPE                           = &H8C14???
%GL_TEXTURE_INTENSITY_TYPE                           = &H8C15???
%GL_TEXTURE_DEPTH_TYPE                               = &H8C16???
%GL_UNSIGNED_NORMALIZED                              = &H8C17???
%GL_TEXTURE_1D_ARRAY                                 = &H8C18???
%GL_PROXY_TEXTURE_1D_ARRAY                           = &H8C19???
%GL_TEXTURE_2D_ARRAY                                 = &H8C1A???
%GL_PROXY_TEXTURE_2D_ARRAY                           = &H8C1B???
%GL_TEXTURE_BINDING_1D_ARRAY                         = &H8C1C???
%GL_TEXTURE_BINDING_2D_ARRAY                         = &H8C1D???
%GL_R11F_G11F_B10F                                   = &H8C3A???
%GL_UNSIGNED_INT_10F_11F_11F_REV                     = &H8C3B???
%GL_RGB9_E5                                          = &H8C3D???
%GL_UNSIGNED_INT_5_9_9_9_REV                         = &H8C3E???
%GL_TEXTURE_SHARED_SIZE                              = &H8C3F???
%GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH            = &H8C76???
%GL_TRANSFORM_FEEDBACK_BUFFER_MODE                   = &H8C7F???
%GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS       = &H8C80???
%GL_TRANSFORM_FEEDBACK_VARYINGS                      = &H8C83???
%GL_TRANSFORM_FEEDBACK_BUFFER_START                  = &H8C84???
%GL_TRANSFORM_FEEDBACK_BUFFER_SIZE                   = &H8C85???
%GL_PRIMITIVES_GENERATED                             = &H8C87???
%GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN            = &H8C88???
%GL_RASTERIZER_DISCARD                               = &H8C89???
%GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS    = &H8C8A???
%GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS          = &H8C8B???
%GL_INTERLEAVED_ATTRIBS                              = &H8C8C???
%GL_SEPARATE_ATTRIBS                                 = &H8C8D???
%GL_TRANSFORM_FEEDBACK_BUFFER                        = &H8C8E???
%GL_TRANSFORM_FEEDBACK_BUFFER_BINDING                = &H8C8F???
%GL_RGBA32UI                                         = &H8D70???
%GL_RGB32UI                                          = &H8D71???
%GL_RGBA16UI                                         = &H8D76???
%GL_RGB16UI                                          = &H8D77???
%GL_RGBA8UI                                          = &H8D7C???
%GL_RGB8UI                                           = &H8D7D???
%GL_RGBA32I                                          = &H8D82???
%GL_RGB32I                                           = &H8D83???
%GL_RGBA16I                                          = &H8D88???
%GL_RGB16I                                           = &H8D89???
%GL_RGBA8I                                           = &H8D8E???
%GL_RGB8I                                            = &H8D8F???
%GL_RED_INTEGER                                      = &H8D94???
%GL_GREEN_INTEGER                                    = &H8D95???
%GL_BLUE_INTEGER                                     = &H8D96???
%GL_ALPHA_INTEGER                                    = &H8D97???
%GL_RGB_INTEGER                                      = &H8D98???
%GL_RGBA_INTEGER                                     = &H8D99???
%GL_BGR_INTEGER                                      = &H8D9A???
%GL_BGRA_INTEGER                                     = &H8D9B???
%GL_SAMPLER_1D_ARRAY                                 = &H8DC0???
%GL_SAMPLER_2D_ARRAY                                 = &H8DC1???
%GL_SAMPLER_1D_ARRAY_SHADOW                          = &H8DC3???
%GL_SAMPLER_2D_ARRAY_SHADOW                          = &H8DC4???
%GL_SAMPLER_CUBE_SHADOW                              = &H8DC5???
%GL_UNSIGNED_INT_VEC2                                = &H8DC6???
%GL_UNSIGNED_INT_VEC3                                = &H8DC7???
%GL_UNSIGNED_INT_VEC4                                = &H8DC8???
%GL_INT_SAMPLER_1D                                   = &H8DC9???
%GL_INT_SAMPLER_2D                                   = &H8DCA???
%GL_INT_SAMPLER_3D                                   = &H8DCB???
%GL_INT_SAMPLER_CUBE                                 = &H8DCC???
%GL_INT_SAMPLER_1D_ARRAY                             = &H8DCE???
%GL_INT_SAMPLER_2D_ARRAY                             = &H8DCF???
%GL_UNSIGNED_INT_SAMPLER_1D                          = &H8DD1???
%GL_UNSIGNED_INT_SAMPLER_2D                          = &H8DD2???
%GL_UNSIGNED_INT_SAMPLER_3D                          = &H8DD3???
%GL_UNSIGNED_INT_SAMPLER_CUBE                        = &H8DD4???
%GL_UNSIGNED_INT_SAMPLER_1D_ARRAY                    = &H8DD6???
%GL_UNSIGNED_INT_SAMPLER_2D_ARRAY                    = &H8DD7???
%GL_QUERY_WAIT                                       = &H8E13???
%GL_QUERY_NO_WAIT                                    = &H8E14???
%GL_QUERY_BY_REGION_WAIT                             = &H8E15???
%GL_QUERY_BY_REGION_NO_WAIT                          = &H8E16???
'/* Reuse tokens from ARB_depth_buffer_float */
'/* reuse GL_DEPTH_COMPONENT32F */
'/* reuse GL_DEPTH32F_STENCIL8 */
'/* reuse GL_FLOAT_32_UNSIGNED_INT_24_8_REV */
'/* Reuse tokens from ARB_framebuffer_object */
'/* reuse GL_INVALID_FRAMEBUFFER_OPERATION */
'/* reuse GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING */
'/* reuse GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE */
'/* reuse GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE */
'/* reuse GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE */
'/* reuse GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE */
'/* reuse GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE */
'/* reuse GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE */
'/* reuse GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE */
'/* reuse GL_FRAMEBUFFER_DEFAULT */
'/* reuse GL_FRAMEBUFFER_UNDEFINED */
'/* reuse GL_DEPTH_STENCIL_ATTACHMENT */
'/* reuse GL_INDEX */
'/* reuse GL_MAX_RENDERBUFFER_SIZE */
'/* reuse GL_DEPTH_STENCIL */
'/* reuse GL_UNSIGNED_INT_24_8 */
'/* reuse GL_DEPTH24_STENCIL8 */
'/* reuse GL_TEXTURE_STENCIL_SIZE */
'/* reuse GL_TEXTURE_RED_TYPE */
'/* reuse GL_TEXTURE_GREEN_TYPE */
'/* reuse GL_TEXTURE_BLUE_TYPE */
'/* reuse GL_TEXTURE_ALPHA_TYPE */
'/* reuse GL_TEXTURE_LUMINANCE_TYPE */
'/* reuse GL_TEXTURE_INTENSITY_TYPE */
'/* reuse GL_TEXTURE_DEPTH_TYPE */
'/* reuse GL_UNSIGNED_NORMALIZED */
'/* reuse GL_FRAMEBUFFER_BINDING */
'/* reuse GL_DRAW_FRAMEBUFFER_BINDING */
'/* reuse GL_RENDERBUFFER_BINDING */
'/* reuse GL_READ_FRAMEBUFFER */
'/* reuse GL_DRAW_FRAMEBUFFER */
'/* reuse GL_READ_FRAMEBUFFER_BINDING */
'/* reuse GL_RENDERBUFFER_SAMPLES */
'/* reuse GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE */
'/* reuse GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME */
'/* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL */
'/* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE */
'/* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER */
'/* reuse GL_FRAMEBUFFER_COMPLETE */
'/* reuse GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT */
'/* reuse GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT */
'/* reuse GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER */
'/* reuse GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER */
'/* reuse GL_FRAMEBUFFER_UNSUPPORTED */
'/* reuse GL_MAX_COLOR_ATTACHMENTS */
'/* reuse GL_COLOR_ATTACHMENT0 */
'/* reuse GL_COLOR_ATTACHMENT1 */
'/* reuse GL_COLOR_ATTACHMENT2 */
'/* reuse GL_COLOR_ATTACHMENT3 */
'/* reuse GL_COLOR_ATTACHMENT4 */
'/* reuse GL_COLOR_ATTACHMENT5 */
'/* reuse GL_COLOR_ATTACHMENT6 */
'/* reuse GL_COLOR_ATTACHMENT7 */
'/* reuse GL_COLOR_ATTACHMENT8 */
'/* reuse GL_COLOR_ATTACHMENT9 */
'/* reuse GL_COLOR_ATTACHMENT10 */
'/* reuse GL_COLOR_ATTACHMENT11 */
'/* reuse GL_COLOR_ATTACHMENT12 */
'/* reuse GL_COLOR_ATTACHMENT13 */
'/* reuse GL_COLOR_ATTACHMENT14 */
'/* reuse GL_COLOR_ATTACHMENT15 */
'/* reuse GL_DEPTH_ATTACHMENT */
'/* reuse GL_STENCIL_ATTACHMENT */
'/* reuse GL_FRAMEBUFFER */
'/* reuse GL_RENDERBUFFER */
'/* reuse GL_RENDERBUFFER_WIDTH */
'/* reuse GL_RENDERBUFFER_HEIGHT */
'/* reuse GL_RENDERBUFFER_INTERNAL_FORMAT */
'/* reuse GL_STENCIL_INDEX1 */
'/* reuse GL_STENCIL_INDEX4 */
'/* reuse GL_STENCIL_INDEX8 */
'/* reuse GL_STENCIL_INDEX16 */
'/* reuse GL_RENDERBUFFER_RED_SIZE */
'/* reuse GL_RENDERBUFFER_GREEN_SIZE */
'/* reuse GL_RENDERBUFFER_BLUE_SIZE */
'/* reuse GL_RENDERBUFFER_ALPHA_SIZE */
'/* reuse GL_RENDERBUFFER_DEPTH_SIZE */
'/* reuse GL_RENDERBUFFER_STENCIL_SIZE */
'/* reuse GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE */
'/* reuse GL_MAX_SAMPLES */
'/* Reuse tokens from ARB_framebuffer_sRGB */
'/* reuse GL_FRAMEBUFFER_SRGB */
'/* Reuse tokens from ARB_half_float_vertex */
'/* reuse GL_HALF_FLOAT */
'/* Reuse tokens from ARB_map_buffer_range */
'/* reuse GL_MAP_READ_BIT */
'/* reuse GL_MAP_WRITE_BIT */
'/* reuse GL_MAP_INVALIDATE_RANGE_BIT */
'/* reuse GL_MAP_INVALIDATE_BUFFER_BIT */
'/* reuse GL_MAP_FLUSH_EXPLICIT_BIT */
'/* reuse GL_MAP_UNSYNCHRONIZED_BIT */
'/* Reuse tokens from ARB_texture_compression_rgtc */
'/* reuse GL_COMPRESSED_RED_RGTC1 */
'/* reuse GL_COMPRESSED_SIGNED_RED_RGTC1 */
'/* reuse GL_COMPRESSED_RG_RGTC2 */
'/* reuse GL_COMPRESSED_SIGNED_RG_RGTC2 */
'/* Reuse tokens from ARB_texture_rg */
'/* reuse GL_RG */
'/* reuse GL_RG_INTEGER */
'/* reuse GL_R8 */
'/* reuse GL_R16 */
'/* reuse GL_RG8 */
'/* reuse GL_RG16 */
'/* reuse GL_R16F */
'/* reuse GL_R32F */
'/* reuse GL_RG16F */
'/* reuse GL_RG32F */
'/* reuse GL_R8I */
'/* reuse GL_R8UI */
'/* reuse GL_R16I */
'/* reuse GL_R16UI */
'/* reuse GL_R32I */
'/* reuse GL_R32UI */
'/* reuse GL_RG8I */
'/* reuse GL_RG8UI */
'/* reuse GL_RG16I */
'/* reuse GL_RG16UI */
'/* reuse GL_RG32I */
'/* reuse GL_RG32UI */
'/* Reuse tokens from ARB_vertex_array_object */
'/* reuse GL_VERTEX_ARRAY_BINDING */
#ENDIF

#IF NOT %DEF(%GL_ARB_multitexture)
%GL_TEXTURE0_ARB                                     = &H84C0???
%GL_TEXTURE1_ARB                                     = &H84C1???
%GL_TEXTURE2_ARB                                     = &H84C2???
%GL_TEXTURE3_ARB                                     = &H84C3???
%GL_TEXTURE4_ARB                                     = &H84C4???
%GL_TEXTURE5_ARB                                     = &H84C5???
%GL_TEXTURE6_ARB                                     = &H84C6???
%GL_TEXTURE7_ARB                                     = &H84C7???
%GL_TEXTURE8_ARB                                     = &H84C8???
%GL_TEXTURE9_ARB                                     = &H84C9???
%GL_TEXTURE10_ARB                                    = &H84CA???
%GL_TEXTURE11_ARB                                    = &H84CB???
%GL_TEXTURE12_ARB                                    = &H84CC???
%GL_TEXTURE13_ARB                                    = &H84CD???
%GL_TEXTURE14_ARB                                    = &H84CE???
%GL_TEXTURE15_ARB                                    = &H84CF???
%GL_TEXTURE16_ARB                                    = &H84D0???
%GL_TEXTURE17_ARB                                    = &H84D1???
%GL_TEXTURE18_ARB                                    = &H84D2???
%GL_TEXTURE19_ARB                                    = &H84D3???
%GL_TEXTURE20_ARB                                    = &H84D4???
%GL_TEXTURE21_ARB                                    = &H84D5???
%GL_TEXTURE22_ARB                                    = &H84D6???
%GL_TEXTURE23_ARB                                    = &H84D7???
%GL_TEXTURE24_ARB                                    = &H84D8???
%GL_TEXTURE25_ARB                                    = &H84D9???
%GL_TEXTURE26_ARB                                    = &H84DA???
%GL_TEXTURE27_ARB                                    = &H84DB???
%GL_TEXTURE28_ARB                                    = &H84DC???
%GL_TEXTURE29_ARB                                    = &H84DD???
%GL_TEXTURE30_ARB                                    = &H84DE???
%GL_TEXTURE31_ARB                                    = &H84DF???
%GL_ACTIVE_TEXTURE_ARB                               = &H84E0???
%GL_CLIENT_ACTIVE_TEXTURE_ARB                        = &H84E1???
%GL_MAX_TEXTURE_UNITS_ARB                            = &H84E2???
#ENDIF

#IF NOT %DEF(%GL_ARB_transpose_matrix)
%GL_TRANSPOSE_MODELVIEW_MATRIX_ARB                   = &H84E3???
%GL_TRANSPOSE_PROJECTION_MATRIX_ARB                  = &H84E4???
%GL_TRANSPOSE_TEXTURE_MATRIX_ARB                     = &H84E5???
%GL_TRANSPOSE_COLOR_MATRIX_ARB                       = &H84E6???
#ENDIF

#IF NOT %DEF(%GL_ARB_multisample)
%GL_MULTISAMPLE_ARB                                  = &H809D???
%GL_SAMPLE_ALPHA_TO_COVERAGE_ARB                     = &H809E???
%GL_SAMPLE_ALPHA_TO_ONE_ARB                          = &H809F???
%GL_SAMPLE_COVERAGE_ARB                              = &H80A0???
%GL_SAMPLE_BUFFERS_ARB                               = &H80A8???
%GL_SAMPLES_ARB                                      = &H80A9???
%GL_SAMPLE_COVERAGE_VALUE_ARB                        = &H80AA???
%GL_SAMPLE_COVERAGE_INVERT_ARB                       = &H80AB???
%GL_MULTISAMPLE_BIT_ARB                              = &H20000000???
#ENDIF

#IF NOT %DEF(%GL_ARB_texture_env_add)
#ENDIF

#IF NOT %DEF(%GL_ARB_texture_cube_map)
%GL_NORMAL_MAP_ARB                                   = &H8511???
%GL_REFLECTION_MAP_ARB                               = &H8512???
%GL_TEXTURE_CUBE_MAP_ARB                             = &H8513???
%GL_TEXTURE_BINDING_CUBE_MAP_ARB                     = &H8514???
%GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB                  = &H8515???
%GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB                  = &H8516???
%GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB                  = &H8517???
%GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB                  = &H8518???
%GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB                  = &H8519???
%GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB                  = &H851A???
%GL_PROXY_TEXTURE_CUBE_MAP_ARB                       = &H851B???
%GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB                    = &H851C???
#ENDIF

#IF NOT %DEF(%GL_ARB_texture_compression)
%GL_COMPRESSED_ALPHA_ARB                             = &H84E9???
%GL_COMPRESSED_LUMINANCE_ARB                         = &H84EA???
%GL_COMPRESSED_LUMINANCE_ALPHA_ARB                   = &H84EB???
%GL_COMPRESSED_INTENSITY_ARB                         = &H84EC???
%GL_COMPRESSED_RGB_ARB                               = &H84ED???
%GL_COMPRESSED_RGBA_ARB                              = &H84EE???
%GL_TEXTURE_COMPRESSION_HINT_ARB                     = &H84EF???
%GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB                = &H86A0???
%GL_TEXTURE_COMPRESSED_ARB                           = &H86A1???
%GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB               = &H86A2???
%GL_COMPRESSED_TEXTURE_FORMATS_ARB                   = &H86A3???
#ENDIF

#IF NOT %DEF(%GL_ARB_texture_border_clamp)
%GL_CLAMP_TO_BORDER_ARB                              = &H812D???
#ENDIF

#IF NOT %DEF(%GL_ARB_point_parameters)
%GL_POINT_SIZE_MIN_ARB                               = &H8126???
%GL_POINT_SIZE_MAX_ARB                               = &H8127???
%GL_POINT_FADE_THRESHOLD_SIZE_ARB                    = &H8128???
%GL_POINT_DISTANCE_ATTENUATION_ARB                   = &H8129???
#ENDIF

#IF NOT %DEF(%GL_ARB_vertex_blend)
%GL_MAX_VERTEX_UNITS_ARB                             = &H86A4???
%GL_ACTIVE_VERTEX_UNITS_ARB                          = &H86A5???
%GL_WEIGHT_SUM_UNITY_ARB                             = &H86A6???
%GL_VERTEX_BLEND_ARB                                 = &H86A7???
%GL_CURRENT_WEIGHT_ARB                               = &H86A8???
%GL_WEIGHT_ARRAY_TYPE_ARB                            = &H86A9???
%GL_WEIGHT_ARRAY_STRIDE_ARB                          = &H86AA???
%GL_WEIGHT_ARRAY_SIZE_ARB                            = &H86AB???
%GL_WEIGHT_ARRAY_POINTER_ARB                         = &H86AC???
%GL_WEIGHT_ARRAY_ARB                                 = &H86AD???
%GL_MODELVIEW0_ARB                                   = &H1700???
%GL_MODELVIEW1_ARB                                   = &H850A???
%GL_MODELVIEW2_ARB                                   = &H8722???
%GL_MODELVIEW3_ARB                                   = &H8723???
%GL_MODELVIEW4_ARB                                   = &H8724???
%GL_MODELVIEW5_ARB                                   = &H8725???
%GL_MODELVIEW6_ARB                                   = &H8726???
%GL_MODELVIEW7_ARB                                   = &H8727???
%GL_MODELVIEW8_ARB                                   = &H8728???
%GL_MODELVIEW9_ARB                                   = &H8729???
%GL_MODELVIEW10_ARB                                  = &H872A???
%GL_MODELVIEW11_ARB                                  = &H872B???
%GL_MODELVIEW12_ARB                                  = &H872C???
%GL_MODELVIEW13_ARB                                  = &H872D???
%GL_MODELVIEW14_ARB                                  = &H872E???
%GL_MODELVIEW15_ARB                                  = &H872F???
%GL_MODELVIEW16_ARB                                  = &H8730???
%GL_MODELVIEW17_ARB                                  = &H8731???
%GL_MODELVIEW18_ARB                                  = &H8732???
%GL_MODELVIEW19_ARB                                  = &H8733???
%GL_MODELVIEW20_ARB                                  = &H8734???
%GL_MODELVIEW21_ARB                                  = &H8735???
%GL_MODELVIEW22_ARB                                  = &H8736???
%GL_MODELVIEW23_ARB                                  = &H8737???
%GL_MODELVIEW24_ARB                                  = &H8738???
%GL_MODELVIEW25_ARB                                  = &H8739???
%GL_MODELVIEW26_ARB                                  = &H873A???
%GL_MODELVIEW27_ARB                                  = &H873B???
%GL_MODELVIEW28_ARB                                  = &H873C???
%GL_MODELVIEW29_ARB                                  = &H873D???
%GL_MODELVIEW30_ARB                                  = &H873E???
%GL_MODELVIEW31_ARB                                  = &H873F???
#ENDIF

#IF NOT %DEF(%GL_ARB_matrix_palette)
%GL_MATRIX_PALETTE_ARB                               = &H8840???
%GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB               = &H8841???
%GL_MAX_PALETTE_MATRICES_ARB                         = &H8842???
%GL_CURRENT_PALETTE_MATRIX_ARB                       = &H8843???
%GL_MATRIX_INDEX_ARRAY_ARB                           = &H8844???
%GL_CURRENT_MATRIX_INDEX_ARB                         = &H8845???
%GL_MATRIX_INDEX_ARRAY_SIZE_ARB                      = &H8846???
%GL_MATRIX_INDEX_ARRAY_TYPE_ARB                      = &H8847???
%GL_MATRIX_INDEX_ARRAY_STRIDE_ARB                    = &H8848???
%GL_MATRIX_INDEX_ARRAY_POINTER_ARB                   = &H8849???
#ENDIF

#IF NOT %DEF(%GL_ARB_texture_env_combine)
%GL_COMBINE_ARB                                      = &H8570???
%GL_COMBINE_RGB_ARB                                  = &H8571???
%GL_COMBINE_ALPHA_ARB                                = &H8572???
%GL_SOURCE0_RGB_ARB                                  = &H8580???
%GL_SOURCE1_RGB_ARB                                  = &H8581???
%GL_SOURCE2_RGB_ARB                                  = &H8582???
%GL_SOURCE0_ALPHA_ARB                                = &H8588???
%GL_SOURCE1_ALPHA_ARB                                = &H8589???
%GL_SOURCE2_ALPHA_ARB                                = &H858A???
%GL_OPERAND0_RGB_ARB                                 = &H8590???
%GL_OPERAND1_RGB_ARB                                 = &H8591???
%GL_OPERAND2_RGB_ARB                                 = &H8592???
%GL_OPERAND0_ALPHA_ARB                               = &H8598???
%GL_OPERAND1_ALPHA_ARB                               = &H8599???
%GL_OPERAND2_ALPHA_ARB                               = &H859A???
%GL_RGB_SCALE_ARB                                    = &H8573???
%GL_ADD_SIGNED_ARB                                   = &H8574???
%GL_INTERPOLATE_ARB                                  = &H8575???
%GL_SUBTRACT_ARB                                     = &H84E7???
%GL_CONSTANT_ARB                                     = &H8576???
%GL_PRIMARY_COLOR_ARB                                = &H8577???
%GL_PREVIOUS_ARB                                     = &H8578???
#ENDIF

#IF NOT %DEF(%GL_ARB_texture_env_crossbar)
#ENDIF

#IF NOT %DEF(%GL_ARB_texture_env_dot3)
%GL_DOT3_RGB_ARB                                     = &H86AE???
%GL_DOT3_RGBA_ARB                                    = &H86AF???
#ENDIF

#IF NOT %DEF(%GL_ARB_texture_mirrored_repeat)
%GL_MIRRORED_REPEAT_ARB                              = &H8370???
#ENDIF

#IF NOT %DEF(%GL_ARB_depth_texture)
%GL_DEPTH_COMPONENT16_ARB                            = &H81A5???
%GL_DEPTH_COMPONENT24_ARB                            = &H81A6???
%GL_DEPTH_COMPONENT32_ARB                            = &H81A7???
%GL_TEXTURE_DEPTH_SIZE_ARB                           = &H884A???
%GL_DEPTH_TEXTURE_MODE_ARB                           = &H884B???
#ENDIF

#IF NOT %DEF(%GL_ARB_shadow)
%GL_TEXTURE_COMPARE_MODE_ARB                         = &H884C???
%GL_TEXTURE_COMPARE_FUNC_ARB                         = &H884D???
%GL_COMPARE_R_TO_TEXTURE_ARB                         = &H884E???
#ENDIF

#IF NOT %DEF(%GL_ARB_shadow_ambient)
%GL_TEXTURE_COMPARE_FAIL_VALUE_ARB                   = &H80BF???
#ENDIF

#IF NOT %DEF(%GL_ARB_window_pos)
#ENDIF

#IF NOT %DEF(%GL_ARB_vertex_program)
%GL_COLOR_SUM_ARB                                    = &H8458???
%GL_VERTEX_PROGRAM_ARB                               = &H8620???
%GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB                  = &H8622???
%GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB                     = &H8623???
%GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB                   = &H8624???
%GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB                     = &H8625???
%GL_CURRENT_VERTEX_ATTRIB_ARB                        = &H8626???
%GL_PROGRAM_LENGTH_ARB                               = &H8627???
%GL_PROGRAM_STRING_ARB                               = &H8628???
%GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB               = &H862E???
%GL_MAX_PROGRAM_MATRICES_ARB                         = &H862F???
%GL_CURRENT_MATRIX_STACK_DEPTH_ARB                   = &H8640???
%GL_CURRENT_MATRIX_ARB                               = &H8641???
%GL_VERTEX_PROGRAM_POINT_SIZE_ARB                    = &H8642???
%GL_VERTEX_PROGRAM_TWO_SIDE_ARB                      = &H8643???
%GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB                  = &H8645???
%GL_PROGRAM_ERROR_POSITION_ARB                       = &H864B???
%GL_PROGRAM_BINDING_ARB                              = &H8677???
%GL_MAX_VERTEX_ATTRIBS_ARB                           = &H8869???
%GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB               = &H886A???
%GL_PROGRAM_ERROR_STRING_ARB                         = &H8874???
%GL_PROGRAM_FORMAT_ASCII_ARB                         = &H8875???
%GL_PROGRAM_FORMAT_ARB                               = &H8876???
%GL_PROGRAM_INSTRUCTIONS_ARB                         = &H88A0???
%GL_MAX_PROGRAM_INSTRUCTIONS_ARB                     = &H88A1???
%GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB                  = &H88A2???
%GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB              = &H88A3???
%GL_PROGRAM_TEMPORARIES_ARB                          = &H88A4???
%GL_MAX_PROGRAM_TEMPORARIES_ARB                      = &H88A5???
%GL_PROGRAM_NATIVE_TEMPORARIES_ARB                   = &H88A6???
%GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB               = &H88A7???
%GL_PROGRAM_PARAMETERS_ARB                           = &H88A8???
%GL_MAX_PROGRAM_PARAMETERS_ARB                       = &H88A9???
%GL_PROGRAM_NATIVE_PARAMETERS_ARB                    = &H88AA???
%GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB                = &H88AB???
%GL_PROGRAM_ATTRIBS_ARB                              = &H88AC???
%GL_MAX_PROGRAM_ATTRIBS_ARB                          = &H88AD???
%GL_PROGRAM_NATIVE_ATTRIBS_ARB                       = &H88AE???
%GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB                   = &H88AF???
%GL_PROGRAM_ADDRESS_REGISTERS_ARB                    = &H88B0???
%GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB                = &H88B1???
%GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB             = &H88B2???
%GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB         = &H88B3???
%GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB                 = &H88B4???
%GL_MAX_PROGRAM_ENV_PARAMETERS_ARB                   = &H88B5???
%GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB                  = &H88B6???
%GL_TRANSPOSE_CURRENT_MATRIX_ARB                     = &H88B7???
%GL_MATRIX0_ARB                                      = &H88C0???
%GL_MATRIX1_ARB                                      = &H88C1???
%GL_MATRIX2_ARB                                      = &H88C2???
%GL_MATRIX3_ARB                                      = &H88C3???
%GL_MATRIX4_ARB                                      = &H88C4???
%GL_MATRIX5_ARB                                      = &H88C5???
%GL_MATRIX6_ARB                                      = &H88C6???
%GL_MATRIX7_ARB                                      = &H88C7???
%GL_MATRIX8_ARB                                      = &H88C8???
%GL_MATRIX9_ARB                                      = &H88C9???
%GL_MATRIX10_ARB                                     = &H88CA???
%GL_MATRIX11_ARB                                     = &H88CB???
%GL_MATRIX12_ARB                                     = &H88CC???
%GL_MATRIX13_ARB                                     = &H88CD???
%GL_MATRIX14_ARB                                     = &H88CE???
%GL_MATRIX15_ARB                                     = &H88CF???
%GL_MATRIX16_ARB                                     = &H88D0???
%GL_MATRIX17_ARB                                     = &H88D1???
%GL_MATRIX18_ARB                                     = &H88D2???
%GL_MATRIX19_ARB                                     = &H88D3???
%GL_MATRIX20_ARB                                     = &H88D4???
%GL_MATRIX21_ARB                                     = &H88D5???
%GL_MATRIX22_ARB                                     = &H88D6???
%GL_MATRIX23_ARB                                     = &H88D7???
%GL_MATRIX24_ARB                                     = &H88D8???
%GL_MATRIX25_ARB                                     = &H88D9???
%GL_MATRIX26_ARB                                     = &H88DA???
%GL_MATRIX27_ARB                                     = &H88DB???
%GL_MATRIX28_ARB                                     = &H88DC???
%GL_MATRIX29_ARB                                     = &H88DD???
%GL_MATRIX30_ARB                                     = &H88DE???
%GL_MATRIX31_ARB                                     = &H88DF???
#ENDIF

#IF NOT %DEF(%GL_ARB_fragment_program)
%GL_FRAGMENT_PROGRAM_ARB                             = &H8804???
%GL_PROGRAM_ALU_INSTRUCTIONS_ARB                     = &H8805???
%GL_PROGRAM_TEX_INSTRUCTIONS_ARB                     = &H8806???
%GL_PROGRAM_TEX_INDIRECTIONS_ARB                     = &H8807???
%GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB              = &H8808???
%GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB              = &H8809???
%GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB              = &H880A???
%GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB                 = &H880B???
%GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB                 = &H880C???
%GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB                 = &H880D???
%GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB          = &H880E???
%GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB          = &H880F???
%GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB          = &H8810???
%GL_MAX_TEXTURE_COORDS_ARB                           = &H8871???
%GL_MAX_TEXTURE_IMAGE_UNITS_ARB                      = &H8872???
#ENDIF

#IF NOT %DEF(%GL_ARB_vertex_buffer_object)
%GL_BUFFER_SIZE_ARB                                  = &H8764???
%GL_BUFFER_USAGE_ARB                                 = &H8765???
%GL_ARRAY_BUFFER_ARB                                 = &H8892???
%GL_ELEMENT_ARRAY_BUFFER_ARB                         = &H8893???
%GL_ARRAY_BUFFER_BINDING_ARB                         = &H8894???
%GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB                 = &H8895???
%GL_VERTEX_ARRAY_BUFFER_BINDING_ARB                  = &H8896???
%GL_NORMAL_ARRAY_BUFFER_BINDING_ARB                  = &H8897???
%GL_COLOR_ARRAY_BUFFER_BINDING_ARB                   = &H8898???
%GL_INDEX_ARRAY_BUFFER_BINDING_ARB                   = &H8899???
%GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB           = &H889A???
%GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB               = &H889B???
%GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB         = &H889C???
%GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB          = &H889D???
%GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB                  = &H889E???
%GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB           = &H889F???
%GL_READ_ONLY_ARB                                    = &H88B8???
%GL_WRITE_ONLY_ARB                                   = &H88B9???
%GL_READ_WRITE_ARB                                   = &H88BA???
%GL_BUFFER_ACCESS_ARB                                = &H88BB???
%GL_BUFFER_MAPPED_ARB                                = &H88BC???
%GL_BUFFER_MAP_POINTER_ARB                           = &H88BD???
%GL_STREAM_DRAW_ARB                                  = &H88E0???
%GL_STREAM_READ_ARB                                  = &H88E1???
%GL_STREAM_COPY_ARB                                  = &H88E2???
%GL_STATIC_DRAW_ARB                                  = &H88E4???
%GL_STATIC_READ_ARB                                  = &H88E5???
%GL_STATIC_COPY_ARB                                  = &H88E6???
%GL_DYNAMIC_DRAW_ARB                                 = &H88E8???
%GL_DYNAMIC_READ_ARB                                 = &H88E9???
%GL_DYNAMIC_COPY_ARB                                 = &H88EA???
#ENDIF

#IF NOT %DEF(%GL_ARB_occlusion_query)
%GL_QUERY_COUNTER_BITS_ARB                           = &H8864???
%GL_CURRENT_QUERY_ARB                                = &H8865???
%GL_QUERY_RESULT_ARB                                 = &H8866???
%GL_QUERY_RESULT_AVAILABLE_ARB                       = &H8867???
%GL_SAMPLES_PASSED_ARB                               = &H8914???
#ENDIF

#IF NOT %DEF(%GL_ARB_shader_objects)
%GL_PROGRAM_OBJECT_ARB                               = &H8B40???
%GL_SHADER_OBJECT_ARB                                = &H8B48???
%GL_OBJECT_TYPE_ARB                                  = &H8B4E???
%GL_OBJECT_SUBTYPE_ARB                               = &H8B4F???
%GL_FLOAT_VEC2_ARB                                   = &H8B50???
%GL_FLOAT_VEC3_ARB                                   = &H8B51???
%GL_FLOAT_VEC4_ARB                                   = &H8B52???
%GL_INT_VEC2_ARB                                     = &H8B53???
%GL_INT_VEC3_ARB                                     = &H8B54???
%GL_INT_VEC4_ARB                                     = &H8B55???
%GL_BOOL_ARB                                         = &H8B56???
%GL_BOOL_VEC2_ARB                                    = &H8B57???
%GL_BOOL_VEC3_ARB                                    = &H8B58???
%GL_BOOL_VEC4_ARB                                    = &H8B59???
%GL_FLOAT_MAT2_ARB                                   = &H8B5A???
%GL_FLOAT_MAT3_ARB                                   = &H8B5B???
%GL_FLOAT_MAT4_ARB                                   = &H8B5C???
%GL_SAMPLER_1D_ARB                                   = &H8B5D???
%GL_SAMPLER_2D_ARB                                   = &H8B5E???
%GL_SAMPLER_3D_ARB                                   = &H8B5F???
%GL_SAMPLER_CUBE_ARB                                 = &H8B60???
%GL_SAMPLER_1D_SHADOW_ARB                            = &H8B61???
%GL_SAMPLER_2D_SHADOW_ARB                            = &H8B62???
%GL_SAMPLER_2D_RECT_ARB                              = &H8B63???
%GL_SAMPLER_2D_RECT_SHADOW_ARB                       = &H8B64???
%GL_OBJECT_DELETE_STATUS_ARB                         = &H8B80???
%GL_OBJECT_COMPILE_STATUS_ARB                        = &H8B81???
%GL_OBJECT_LINK_STATUS_ARB                           = &H8B82???
%GL_OBJECT_VALIDATE_STATUS_ARB                       = &H8B83???
%GL_OBJECT_INFO_LOG_LENGTH_ARB                       = &H8B84???
%GL_OBJECT_ATTACHED_OBJECTS_ARB                      = &H8B85???
%GL_OBJECT_ACTIVE_UNIFORMS_ARB                       = &H8B86???
%GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB             = &H8B87???
%GL_OBJECT_SHADER_SOURCE_LENGTH_ARB                  = &H8B88???
#ENDIF

#IF NOT %DEF(%GL_ARB_vertex_shader)
%GL_VERTEX_SHADER_ARB                                = &H8B31???
%GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB                = &H8B4A???
%GL_MAX_VARYING_FLOATS_ARB                           = &H8B4B???
%GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB               = &H8B4C???
%GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB             = &H8B4D???
%GL_OBJECT_ACTIVE_ATTRIBUTES_ARB                     = &H8B89???
%GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB           = &H8B8A???
#ENDIF

#IF NOT %DEF(%GL_ARB_fragment_shader)
%GL_FRAGMENT_SHADER_ARB                              = &H8B30???
%GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB              = &H8B49???
%GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB              = &H8B8B???
#ENDIF

#IF NOT %DEF(%GL_ARB_shading_language_100)
%GL_SHADING_LANGUAGE_VERSION_ARB                     = &H8B8C???
#ENDIF

#IF NOT %DEF(%GL_ARB_texture_non_power_of_two)
#ENDIF

#IF NOT %DEF(%GL_ARB_point_sprite)
%GL_POINT_SPRITE_ARB                                 = &H8861???
%GL_COORD_REPLACE_ARB                                = &H8862???
#ENDIF

#IF NOT %DEF(%GL_ARB_fragment_program_shadow)
#ENDIF

#IF NOT %DEF(%GL_ARB_draw_buffers)
%GL_MAX_DRAW_BUFFERS_ARB                             = &H8824???
%GL_DRAW_BUFFER0_ARB                                 = &H8825???
%GL_DRAW_BUFFER1_ARB                                 = &H8826???
%GL_DRAW_BUFFER2_ARB                                 = &H8827???
%GL_DRAW_BUFFER3_ARB                                 = &H8828???
%GL_DRAW_BUFFER4_ARB                                 = &H8829???
%GL_DRAW_BUFFER5_ARB                                 = &H882A???
%GL_DRAW_BUFFER6_ARB                                 = &H882B???
%GL_DRAW_BUFFER7_ARB                                 = &H882C???
%GL_DRAW_BUFFER8_ARB                                 = &H882D???
%GL_DRAW_BUFFER9_ARB                                 = &H882E???
%GL_DRAW_BUFFER10_ARB                                = &H882F???
%GL_DRAW_BUFFER11_ARB                                = &H8830???
%GL_DRAW_BUFFER12_ARB                                = &H8831???
%GL_DRAW_BUFFER13_ARB                                = &H8832???
%GL_DRAW_BUFFER14_ARB                                = &H8833???
%GL_DRAW_BUFFER15_ARB                                = &H8834???
#ENDIF

#IF NOT %DEF(%GL_ARB_texture_rectangle)
%GL_TEXTURE_RECTANGLE_ARB                            = &H84F5???
%GL_TEXTURE_BINDING_RECTANGLE_ARB                    = &H84F6???
%GL_PROXY_TEXTURE_RECTANGLE_ARB                      = &H84F7???
%GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB                   = &H84F8???
#ENDIF

#IF NOT %DEF(%GL_ARB_color_buffer_float)
%GL_RGBA_FLOAT_MODE_ARB                              = &H8820???
%GL_CLAMP_VERTEX_COLOR_ARB                           = &H891A???
%GL_CLAMP_FRAGMENT_COLOR_ARB                         = &H891B???
%GL_CLAMP_READ_COLOR_ARB                             = &H891C???
%GL_FIXED_ONLY_ARB                                   = &H891D???
#ENDIF

#IF NOT %DEF(%GL_ARB_half_float_pixel)
%GL_HALF_FLOAT_ARB                                   = &H140B???
#ENDIF

#IF NOT %DEF(%GL_ARB_texture_float)
%GL_TEXTURE_RED_TYPE_ARB                             = &H8C10???
%GL_TEXTURE_GREEN_TYPE_ARB                           = &H8C11???
%GL_TEXTURE_BLUE_TYPE_ARB                            = &H8C12???
%GL_TEXTURE_ALPHA_TYPE_ARB                           = &H8C13???
%GL_TEXTURE_LUMINANCE_TYPE_ARB                       = &H8C14???
%GL_TEXTURE_INTENSITY_TYPE_ARB                       = &H8C15???
%GL_TEXTURE_DEPTH_TYPE_ARB                           = &H8C16???
%GL_UNSIGNED_NORMALIZED_ARB                          = &H8C17???
%GL_RGBA32F_ARB                                      = &H8814???
%GL_RGB32F_ARB                                       = &H8815???
%GL_ALPHA32F_ARB                                     = &H8816???
%GL_INTENSITY32F_ARB                                 = &H8817???
%GL_LUMINANCE32F_ARB                                 = &H8818???
%GL_LUMINANCE_ALPHA32F_ARB                           = &H8819???
%GL_RGBA16F_ARB                                      = &H881A???
%GL_RGB16F_ARB                                       = &H881B???
%GL_ALPHA16F_ARB                                     = &H881C???
%GL_INTENSITY16F_ARB                                 = &H881D???
%GL_LUMINANCE16F_ARB                                 = &H881E???
%GL_LUMINANCE_ALPHA16F_ARB                           = &H881F???
#ENDIF

#IF NOT %DEF(%GL_ARB_pixel_buffer_object)
%GL_PIXEL_PACK_BUFFER_ARB                            = &H88EB???
%GL_PIXEL_UNPACK_BUFFER_ARB                          = &H88EC???
%GL_PIXEL_PACK_BUFFER_BINDING_ARB                    = &H88ED???
%GL_PIXEL_UNPACK_BUFFER_BINDING_ARB                  = &H88EF???
#ENDIF

#IF NOT %DEF(%GL_ARB_depth_buffer_float)
%GL_DEPTH_COMPONENT32F                               = &H8CAC???
%GL_DEPTH32F_STENCIL8                                = &H8CAD???
%GL_FLOAT_32_UNSIGNED_INT_24_8_REV                   = &H8DAD???
#ENDIF

#IF NOT %DEF(%GL_ARB_draw_instanced)
#ENDIF

#IF NOT %DEF(%GL_ARB_framebuffer_object)
%GL_INVALID_FRAMEBUFFER_OPERATION                    = &H0506???
%GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING            = &H8210???
%GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE            = &H8211???
%GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE                  = &H8212???
%GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE                = &H8213???
%GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE                 = &H8214???
%GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE                = &H8215???
%GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE                = &H8216???
%GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE              = &H8217???
%GL_FRAMEBUFFER_DEFAULT                              = &H8218???
%GL_FRAMEBUFFER_UNDEFINED                            = &H8219???
%GL_DEPTH_STENCIL_ATTACHMENT                         = &H821A???
%GL_INDEX                                            = &H8222???
%GL_MAX_RENDERBUFFER_SIZE                            = &H84E8???
%GL_DEPTH_STENCIL                                    = &H84F9???
%GL_UNSIGNED_INT_24_8                                = &H84FA???
%GL_DEPTH24_STENCIL8                                 = &H88F0???
%GL_TEXTURE_STENCIL_SIZE                             = &H88F1???
%GL_FRAMEBUFFER_BINDING                              = &H8CA6???
%GL_DRAW_FRAMEBUFFER_BINDING                         = %GL_FRAMEBUFFER_BINDING
%GL_RENDERBUFFER_BINDING                             = &H8CA7???
%GL_READ_FRAMEBUFFER                                 = &H8CA8???
%GL_DRAW_FRAMEBUFFER                                 = &H8CA9???
%GL_READ_FRAMEBUFFER_BINDING                         = &H8CAA???
%GL_RENDERBUFFER_SAMPLES                             = &H8CAB???
%GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE               = &H8CD0???
%GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME               = &H8CD1???
%GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL             = &H8CD2???
%GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE     = &H8CD3???
%GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER             = &H8CD4???
%GL_FRAMEBUFFER_COMPLETE                             = &H8CD5???
%GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT                = &H8CD6???
%GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT        = &H8CD7???
%GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER               = &H8CDB???
%GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER               = &H8CDC???
%GL_FRAMEBUFFER_UNSUPPORTED                          = &H8CDD???
%GL_MAX_COLOR_ATTACHMENTS                            = &H8CDF???
%GL_COLOR_ATTACHMENT0                                = &H8CE0???
%GL_COLOR_ATTACHMENT1                                = &H8CE1???
%GL_COLOR_ATTACHMENT2                                = &H8CE2???
%GL_COLOR_ATTACHMENT3                                = &H8CE3???
%GL_COLOR_ATTACHMENT4                                = &H8CE4???
%GL_COLOR_ATTACHMENT5                                = &H8CE5???
%GL_COLOR_ATTACHMENT6                                = &H8CE6???
%GL_COLOR_ATTACHMENT7                                = &H8CE7???
%GL_COLOR_ATTACHMENT8                                = &H8CE8???
%GL_COLOR_ATTACHMENT9                                = &H8CE9???
%GL_COLOR_ATTACHMENT10                               = &H8CEA???
%GL_COLOR_ATTACHMENT11                               = &H8CEB???
%GL_COLOR_ATTACHMENT12                               = &H8CEC???
%GL_COLOR_ATTACHMENT13                               = &H8CED???
%GL_COLOR_ATTACHMENT14                               = &H8CEE???
%GL_COLOR_ATTACHMENT15                               = &H8CEF???
%GL_DEPTH_ATTACHMENT                                 = &H8D00???
%GL_STENCIL_ATTACHMENT                               = &H8D20???
%GL_FRAMEBUFFER                                      = &H8D40???
%GL_RENDERBUFFER                                     = &H8D41???
%GL_RENDERBUFFER_WIDTH                               = &H8D42???
%GL_RENDERBUFFER_HEIGHT                              = &H8D43???
%GL_RENDERBUFFER_INTERNAL_FORMAT                     = &H8D44???
%GL_STENCIL_INDEX1                                   = &H8D46???
%GL_STENCIL_INDEX4                                   = &H8D47???
%GL_STENCIL_INDEX8                                   = &H8D48???
%GL_STENCIL_INDEX16                                  = &H8D49???
%GL_RENDERBUFFER_RED_SIZE                            = &H8D50???
%GL_RENDERBUFFER_GREEN_SIZE                          = &H8D51???
%GL_RENDERBUFFER_BLUE_SIZE                           = &H8D52???
%GL_RENDERBUFFER_ALPHA_SIZE                          = &H8D53???
%GL_RENDERBUFFER_DEPTH_SIZE                          = &H8D54???
%GL_RENDERBUFFER_STENCIL_SIZE                        = &H8D55???
%GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE               = &H8D56???
%GL_MAX_SAMPLES                                      = &H8D57???
#ENDIF

#IF NOT %DEF(%GL_ARB_framebuffer_sRGB)
%GL_FRAMEBUFFER_SRGB                                 = &H8DB9???
#ENDIF

#IF NOT %DEF(%GL_ARB_geometry_shader4)
%GL_LINES_ADJACENCY_ARB                              = &H000A???
%GL_LINE_STRIP_ADJACENCY_ARB                         = &H000B???
%GL_TRIANGLES_ADJACENCY_ARB                          = &H000C???
%GL_TRIANGLE_STRIP_ADJACENCY_ARB                     = &H000D???
%GL_PROGRAM_POINT_SIZE_ARB                           = &H8642???
%GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB             = &H8C29???
%GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB               = &H8DA7???
%GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB         = &H8DA8???
%GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB           = &H8DA9???
%GL_GEOMETRY_SHADER_ARB                              = &H8DD9???
%GL_GEOMETRY_VERTICES_OUT_ARB                        = &H8DDA???
%GL_GEOMETRY_INPUT_TYPE_ARB                          = &H8DDB???
%GL_GEOMETRY_OUTPUT_TYPE_ARB                         = &H8DDC???
%GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB              = &H8DDD???
%GL_MAX_VERTEX_VARYING_COMPONENTS_ARB                = &H8DDE???
%GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB              = &H8DDF???
%GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB                 = &H8DE0???
%GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB         = &H8DE1???
'/* reuse GL_MAX_VARYING_COMPONENTS */
'/* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER */
#ENDIF

#IF NOT %DEF(%GL_ARB_half_float_vertex)
%GL_HALF_FLOAT                                       = &H140B???
#ENDIF

#IF NOT %DEF(%GL_ARB_instanced_arrays)
#ENDIF

#IF NOT %DEF(%GL_ARB_map_buffer_range)
%GL_MAP_READ_BIT                                     = &H0001???
%GL_MAP_WRITE_BIT                                    = &H0002???
%GL_MAP_INVALIDATE_RANGE_BIT                         = &H0004???
%GL_MAP_INVALIDATE_BUFFER_BIT                        = &H0008???
%GL_MAP_FLUSH_EXPLICIT_BIT                           = &H0010???
%GL_MAP_UNSYNCHRONIZED_BIT                           = &H0020???
#ENDIF

#IF NOT %DEF(%GL_ARB_texture_buffer_object)
%GL_TEXTURE_BUFFER_ARB                               = &H8C2A???
%GL_MAX_TEXTURE_BUFFER_SIZE_ARB                      = &H8C2B???
%GL_TEXTURE_BINDING_BUFFER_ARB                       = &H8C2C???
%GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB            = &H8C2D???
%GL_TEXTURE_BUFFER_FORMAT_ARB                        = &H8C2E???
#ENDIF

#IF NOT %DEF(%GL_ARB_texture_compression_rgtc)
%GL_COMPRESSED_RED_RGTC1                             = &H8DBB???
%GL_COMPRESSED_SIGNED_RED_RGTC1                      = &H8DBC???
%GL_COMPRESSED_RG_RGTC2                              = &H8DBD???
%GL_COMPRESSED_SIGNED_RG_RGTC2                       = &H8DBE???
#ENDIF

#IF NOT %DEF(%GL_ARB_texture_rg)
%GL_RG                                               = &H8227???
%GL_RG_INTEGER                                       = &H8228???
%GL_R8                                               = &H8229???
%GL_R16                                              = &H822A???
%GL_RG8                                              = &H822B???
%GL_RG16                                             = &H822C???
%GL_R16F                                             = &H822D???
%GL_R32F                                             = &H822E???
%GL_RG16F                                            = &H822F???
%GL_RG32F                                            = &H8230???
%GL_R8I                                              = &H8231???
%GL_R8UI                                             = &H8232???
%GL_R16I                                             = &H8233???
%GL_R16UI                                            = &H8234???
%GL_R32I                                             = &H8235???
%GL_R32UI                                            = &H8236???
%GL_RG8I                                             = &H8237???
%GL_RG8UI                                            = &H8238???
%GL_RG16I                                            = &H8239???
%GL_RG16UI                                           = &H823A???
%GL_RG32I                                            = &H823B???
%GL_RG32UI                                           = &H823C???
#ENDIF

#IF NOT %DEF(%GL_ARB_vertex_array_object)
%GL_VERTEX_ARRAY_BINDING                             = &H85B5???
#ENDIF

#IF NOT %DEF(%GL_EXT_abgr)
%GL_ABGR_EXT                                         = &H8000???
#ENDIF

#IF NOT %DEF(%GL_EXT_blend_color)
%GL_CONSTANT_COLOR_EXT                               = &H8001???
%GL_ONE_MINUS_CONSTANT_COLOR_EXT                     = &H8002???
%GL_CONSTANT_ALPHA_EXT                               = &H8003???
%GL_ONE_MINUS_CONSTANT_ALPHA_EXT                     = &H8004???
%GL_BLEND_COLOR_EXT                                  = &H8005???
#ENDIF

#IF NOT %DEF(%GL_EXT_polygon_offset)
%GL_POLYGON_OFFSET_EXT                               = &H8037???
%GL_POLYGON_OFFSET_FACTOR_EXT                        = &H8038???
%GL_POLYGON_OFFSET_BIAS_EXT                          = &H8039???
#ENDIF

#IF NOT %DEF(%GL_EXT_texture)
%GL_ALPHA4_EXT                                       = &H803B???
%GL_ALPHA8_EXT                                       = &H803C???
%GL_ALPHA12_EXT                                      = &H803D???
%GL_ALPHA16_EXT                                      = &H803E???
%GL_LUMINANCE4_EXT                                   = &H803F???
%GL_LUMINANCE8_EXT                                   = &H8040???
%GL_LUMINANCE12_EXT                                  = &H8041???
%GL_LUMINANCE16_EXT                                  = &H8042???
%GL_LUMINANCE4_ALPHA4_EXT                            = &H8043???
%GL_LUMINANCE6_ALPHA2_EXT                            = &H8044???
%GL_LUMINANCE8_ALPHA8_EXT                            = &H8045???
%GL_LUMINANCE12_ALPHA4_EXT                           = &H8046???
%GL_LUMINANCE12_ALPHA12_EXT                          = &H8047???
%GL_LUMINANCE16_ALPHA16_EXT                          = &H8048???
%GL_INTENSITY_EXT                                    = &H8049???
%GL_INTENSITY4_EXT                                   = &H804A???
%GL_INTENSITY8_EXT                                   = &H804B???
%GL_INTENSITY12_EXT                                  = &H804C???
%GL_INTENSITY16_EXT                                  = &H804D???
%GL_RGB2_EXT                                         = &H804E???
%GL_RGB4_EXT                                         = &H804F???
%GL_RGB5_EXT                                         = &H8050???
%GL_RGB8_EXT                                         = &H8051???
%GL_RGB10_EXT                                        = &H8052???
%GL_RGB12_EXT                                        = &H8053???
%GL_RGB16_EXT                                        = &H8054???
%GL_RGBA2_EXT                                        = &H8055???
%GL_RGBA4_EXT                                        = &H8056???
%GL_RGB5_A1_EXT                                      = &H8057???
%GL_RGBA8_EXT                                        = &H8058???
%GL_RGB10_A2_EXT                                     = &H8059???
%GL_RGBA12_EXT                                       = &H805A???
%GL_RGBA16_EXT                                       = &H805B???
%GL_TEXTURE_RED_SIZE_EXT                             = &H805C???
%GL_TEXTURE_GREEN_SIZE_EXT                           = &H805D???
%GL_TEXTURE_BLUE_SIZE_EXT                            = &H805E???
%GL_TEXTURE_ALPHA_SIZE_EXT                           = &H805F???
%GL_TEXTURE_LUMINANCE_SIZE_EXT                       = &H8060???
%GL_TEXTURE_INTENSITY_SIZE_EXT                       = &H8061???
%GL_REPLACE_EXT                                      = &H8062???
%GL_PROXY_TEXTURE_1D_EXT                             = &H8063???
%GL_PROXY_TEXTURE_2D_EXT                             = &H8064???
%GL_TEXTURE_TOO_LARGE_EXT                            = &H8065???
#ENDIF

#IF NOT %DEF(%GL_EXT_texture3D)
%GL_PACK_SKIP_IMAGES_EXT                             = &H806B???
%GL_PACK_IMAGE_HEIGHT_EXT                            = &H806C???
%GL_UNPACK_SKIP_IMAGES_EXT                           = &H806D???
%GL_UNPACK_IMAGE_HEIGHT_EXT                          = &H806E???
%GL_TEXTURE_3D_EXT                                   = &H806F???
%GL_PROXY_TEXTURE_3D_EXT                             = &H8070???
%GL_TEXTURE_DEPTH_EXT                                = &H8071???
%GL_TEXTURE_WRAP_R_EXT                               = &H8072???
%GL_MAX_3D_TEXTURE_SIZE_EXT                          = &H8073???
#ENDIF

#IF NOT %DEF(%GL_SGIS_texture_filter4)
%GL_FILTER4_SGIS                                     = &H8146???
%GL_TEXTURE_FILTER4_SIZE_SGIS                        = &H8147???
#ENDIF

#IF NOT %DEF(%GL_EXT_subtexture)
#ENDIF

#IF NOT %DEF(%GL_EXT_copy_texture)
#ENDIF

#IF NOT %DEF(%GL_EXT_histogram)
%GL_HISTOGRAM_EXT                                    = &H8024???
%GL_PROXY_HISTOGRAM_EXT                              = &H8025???
%GL_HISTOGRAM_WIDTH_EXT                              = &H8026???
%GL_HISTOGRAM_FORMAT_EXT                             = &H8027???
%GL_HISTOGRAM_RED_SIZE_EXT                           = &H8028???
%GL_HISTOGRAM_GREEN_SIZE_EXT                         = &H8029???
%GL_HISTOGRAM_BLUE_SIZE_EXT                          = &H802A???
%GL_HISTOGRAM_ALPHA_SIZE_EXT                         = &H802B???
%GL_HISTOGRAM_LUMINANCE_SIZE_EXT                     = &H802C???
%GL_HISTOGRAM_SINK_EXT                               = &H802D???
%GL_MINMAX_EXT                                       = &H802E???
%GL_MINMAX_FORMAT_EXT                                = &H802F???
%GL_MINMAX_SINK_EXT                                  = &H8030???
%GL_TABLE_TOO_LARGE_EXT                              = &H8031???
#ENDIF

#IF NOT %DEF(%GL_EXT_convolution)
%GL_CONVOLUTION_1D_EXT                               = &H8010???
%GL_CONVOLUTION_2D_EXT                               = &H8011???
%GL_SEPARABLE_2D_EXT                                 = &H8012???
%GL_CONVOLUTION_BORDER_MODE_EXT                      = &H8013???
%GL_CONVOLUTION_FILTER_SCALE_EXT                     = &H8014???
%GL_CONVOLUTION_FILTER_BIAS_EXT                      = &H8015???
%GL_REDUCE_EXT                                       = &H8016???
%GL_CONVOLUTION_FORMAT_EXT                           = &H8017???
%GL_CONVOLUTION_WIDTH_EXT                            = &H8018???
%GL_CONVOLUTION_HEIGHT_EXT                           = &H8019???
%GL_MAX_CONVOLUTION_WIDTH_EXT                        = &H801A???
%GL_MAX_CONVOLUTION_HEIGHT_EXT                       = &H801B???
%GL_POST_CONVOLUTION_RED_SCALE_EXT                   = &H801C???
%GL_POST_CONVOLUTION_GREEN_SCALE_EXT                 = &H801D???
%GL_POST_CONVOLUTION_BLUE_SCALE_EXT                  = &H801E???
%GL_POST_CONVOLUTION_ALPHA_SCALE_EXT                 = &H801F???
%GL_POST_CONVOLUTION_RED_BIAS_EXT                    = &H8020???
%GL_POST_CONVOLUTION_GREEN_BIAS_EXT                  = &H8021???
%GL_POST_CONVOLUTION_BLUE_BIAS_EXT                   = &H8022???
%GL_POST_CONVOLUTION_ALPHA_BIAS_EXT                  = &H8023???
#ENDIF

#IF NOT %DEF(%GL_SGI_color_matrix)
%GL_COLOR_MATRIX_SGI                                 = &H80B1???
%GL_COLOR_MATRIX_STACK_DEPTH_SGI                     = &H80B2???
%GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI                 = &H80B3???
%GL_POST_COLOR_MATRIX_RED_SCALE_SGI                  = &H80B4???
%GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI                = &H80B5???
%GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI                 = &H80B6???
%GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI                = &H80B7???
%GL_POST_COLOR_MATRIX_RED_BIAS_SGI                   = &H80B8???
%GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI                 = &H80B9???
%GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI                  = &H80BA???
%GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI                 = &H80BB???
#ENDIF

#IF NOT %DEF(%GL_SGI_color_table)
%GL_COLOR_TABLE_SGI                                  = &H80D0???
%GL_POST_CONVOLUTION_COLOR_TABLE_SGI                 = &H80D1???
%GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI                = &H80D2???
%GL_PROXY_COLOR_TABLE_SGI                            = &H80D3???
%GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI           = &H80D4???
%GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI          = &H80D5???
%GL_COLOR_TABLE_SCALE_SGI                            = &H80D6???
%GL_COLOR_TABLE_BIAS_SGI                             = &H80D7???
%GL_COLOR_TABLE_FORMAT_SGI                           = &H80D8???
%GL_COLOR_TABLE_WIDTH_SGI                            = &H80D9???
%GL_COLOR_TABLE_RED_SIZE_SGI                         = &H80DA???
%GL_COLOR_TABLE_GREEN_SIZE_SGI                       = &H80DB???
%GL_COLOR_TABLE_BLUE_SIZE_SGI                        = &H80DC???
%GL_COLOR_TABLE_ALPHA_SIZE_SGI                       = &H80DD???
%GL_COLOR_TABLE_LUMINANCE_SIZE_SGI                   = &H80DE???
%GL_COLOR_TABLE_INTENSITY_SIZE_SGI                   = &H80DF???
#ENDIF

#IF NOT %DEF(%GL_SGIS_pixel_texture)
%GL_PIXEL_TEXTURE_SGIS                               = &H8353???
%GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS                   = &H8354???
%GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS                 = &H8355???
%GL_PIXEL_GROUP_COLOR_SGIS                           = &H8356???
#ENDIF

#IF NOT %DEF(%GL_SGIX_pixel_texture)
%GL_PIXEL_TEX_GEN_SGIX                               = &H8139???
%GL_PIXEL_TEX_GEN_MODE_SGIX                          = &H832B???
#ENDIF

#IF NOT %DEF(%GL_SGIS_texture4D)
%GL_PACK_SKIP_VOLUMES_SGIS                           = &H8130???
%GL_PACK_IMAGE_DEPTH_SGIS                            = &H8131???
%GL_UNPACK_SKIP_VOLUMES_SGIS                         = &H8132???
%GL_UNPACK_IMAGE_DEPTH_SGIS                          = &H8133???
%GL_TEXTURE_4D_SGIS                                  = &H8134???
%GL_PROXY_TEXTURE_4D_SGIS                            = &H8135???
%GL_TEXTURE_4DSIZE_SGIS                              = &H8136???
%GL_TEXTURE_WRAP_Q_SGIS                              = &H8137???
%GL_MAX_4D_TEXTURE_SIZE_SGIS                         = &H8138???
%GL_TEXTURE_4D_BINDING_SGIS                          = &H814F???
#ENDIF

#IF NOT %DEF(%GL_SGI_texture_color_table)
%GL_TEXTURE_COLOR_TABLE_SGI                          = &H80BC???
%GL_PROXY_TEXTURE_COLOR_TABLE_SGI                    = &H80BD???
#ENDIF

#IF NOT %DEF(%GL_EXT_cmyka)
%GL_CMYK_EXT                                         = &H800C???
%GL_CMYKA_EXT                                        = &H800D???
%GL_PACK_CMYK_HINT_EXT                               = &H800E???
%GL_UNPACK_CMYK_HINT_EXT                             = &H800F???
#ENDIF

#IF NOT %DEF(%GL_EXT_texture_object)
%GL_TEXTURE_PRIORITY_EXT                             = &H8066???
%GL_TEXTURE_RESIDENT_EXT                             = &H8067???
%GL_TEXTURE_1D_BINDING_EXT                           = &H8068???
%GL_TEXTURE_2D_BINDING_EXT                           = &H8069???
%GL_TEXTURE_3D_BINDING_EXT                           = &H806A???
#ENDIF

#IF NOT %DEF(%GL_SGIS_detail_texture)
%GL_DETAIL_TEXTURE_2D_SGIS                           = &H8095???
%GL_DETAIL_TEXTURE_2D_BINDING_SGIS                   = &H8096???
%GL_LINEAR_DETAIL_SGIS                               = &H8097???
%GL_LINEAR_DETAIL_ALPHA_SGIS                         = &H8098???
%GL_LINEAR_DETAIL_COLOR_SGIS                         = &H8099???
%GL_DETAIL_TEXTURE_LEVEL_SGIS                        = &H809A???
%GL_DETAIL_TEXTURE_MODE_SGIS                         = &H809B???
%GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS                  = &H809C???
#ENDIF

#IF NOT %DEF(%GL_SGIS_sharpen_texture)
%GL_LINEAR_SHARPEN_SGIS                              = &H80AD???
%GL_LINEAR_SHARPEN_ALPHA_SGIS                        = &H80AE???
%GL_LINEAR_SHARPEN_COLOR_SGIS                        = &H80AF???
%GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS                 = &H80B0???
#ENDIF

#IF NOT %DEF(%GL_EXT_packed_pixels)
%GL_UNSIGNED_BYTE_3_3_2_EXT                          = &H8032???
%GL_UNSIGNED_SHORT_4_4_4_4_EXT                       = &H8033???
%GL_UNSIGNED_SHORT_5_5_5_1_EXT                       = &H8034???
%GL_UNSIGNED_INT_8_8_8_8_EXT                         = &H8035???
%GL_UNSIGNED_INT_10_10_10_2_EXT                      = &H8036???
#ENDIF

#IF NOT %DEF(%GL_SGIS_texture_lod)
%GL_TEXTURE_MIN_LOD_SGIS                             = &H813A???
%GL_TEXTURE_MAX_LOD_SGIS                             = &H813B???
%GL_TEXTURE_BASE_LEVEL_SGIS                          = &H813C???
%GL_TEXTURE_MAX_LEVEL_SGIS                           = &H813D???
#ENDIF

#IF NOT %DEF(%GL_SGIS_multisample)
%GL_MULTISAMPLE_SGIS                                 = &H809D???
%GL_SAMPLE_ALPHA_TO_MASK_SGIS                        = &H809E???
%GL_SAMPLE_ALPHA_TO_ONE_SGIS                         = &H809F???
%GL_SAMPLE_MASK_SGIS                                 = &H80A0???
%GL_1PASS_SGIS                                       = &H80A1???
%GL_2PASS_0_SGIS                                     = &H80A2???
%GL_2PASS_1_SGIS                                     = &H80A3???
%GL_4PASS_0_SGIS                                     = &H80A4???
%GL_4PASS_1_SGIS                                     = &H80A5???
%GL_4PASS_2_SGIS                                     = &H80A6???
%GL_4PASS_3_SGIS                                     = &H80A7???
%GL_SAMPLE_BUFFERS_SGIS                              = &H80A8???
%GL_SAMPLES_SGIS                                     = &H80A9???
%GL_SAMPLE_MASK_VALUE_SGIS                           = &H80AA???
%GL_SAMPLE_MASK_INVERT_SGIS                          = &H80AB???
%GL_SAMPLE_PATTERN_SGIS                              = &H80AC???
#ENDIF

#IF NOT %DEF(%GL_EXT_rescale_normal)
%GL_RESCALE_NORMAL_EXT                               = &H803A???
#ENDIF

#IF NOT %DEF(%GL_EXT_vertex_array)
%GL_VERTEX_ARRAY_EXT                                 = &H8074???
%GL_NORMAL_ARRAY_EXT                                 = &H8075???
%GL_COLOR_ARRAY_EXT                                  = &H8076???
%GL_INDEX_ARRAY_EXT                                  = &H8077???
%GL_TEXTURE_COORD_ARRAY_EXT                          = &H8078???
%GL_EDGE_FLAG_ARRAY_EXT                              = &H8079???
%GL_VERTEX_ARRAY_SIZE_EXT                            = &H807A???
%GL_VERTEX_ARRAY_TYPE_EXT                            = &H807B???
%GL_VERTEX_ARRAY_STRIDE_EXT                          = &H807C???
%GL_VERTEX_ARRAY_COUNT_EXT                           = &H807D???
%GL_NORMAL_ARRAY_TYPE_EXT                            = &H807E???
%GL_NORMAL_ARRAY_STRIDE_EXT                          = &H807F???
%GL_NORMAL_ARRAY_COUNT_EXT                           = &H8080???
%GL_COLOR_ARRAY_SIZE_EXT                             = &H8081???
%GL_COLOR_ARRAY_TYPE_EXT                             = &H8082???
%GL_COLOR_ARRAY_STRIDE_EXT                           = &H8083???
%GL_COLOR_ARRAY_COUNT_EXT                            = &H8084???
%GL_INDEX_ARRAY_TYPE_EXT                             = &H8085???
%GL_INDEX_ARRAY_STRIDE_EXT                           = &H8086???
%GL_INDEX_ARRAY_COUNT_EXT                            = &H8087???
%GL_TEXTURE_COORD_ARRAY_SIZE_EXT                     = &H8088???
%GL_TEXTURE_COORD_ARRAY_TYPE_EXT                     = &H8089???
%GL_TEXTURE_COORD_ARRAY_STRIDE_EXT                   = &H808A???
%GL_TEXTURE_COORD_ARRAY_COUNT_EXT                    = &H808B???
%GL_EDGE_FLAG_ARRAY_STRIDE_EXT                       = &H808C???
%GL_EDGE_FLAG_ARRAY_COUNT_EXT                        = &H808D???
%GL_VERTEX_ARRAY_POINTER_EXT                         = &H808E???
%GL_NORMAL_ARRAY_POINTER_EXT                         = &H808F???
%GL_COLOR_ARRAY_POINTER_EXT                          = &H8090???
%GL_INDEX_ARRAY_POINTER_EXT                          = &H8091???
%GL_TEXTURE_COORD_ARRAY_POINTER_EXT                  = &H8092???
%GL_EDGE_FLAG_ARRAY_POINTER_EXT                      = &H8093???
#ENDIF

#IF NOT %DEF(%GL_EXT_misc_attribute)
#ENDIF

#IF NOT %DEF(%GL_SGIS_generate_mipmap)
%GL_GENERATE_MIPMAP_SGIS                             = &H8191???
%GL_GENERATE_MIPMAP_HINT_SGIS                        = &H8192???
#ENDIF

#IF NOT %DEF(%GL_SGIX_clipmap)
%GL_LINEAR_CLIPMAP_LINEAR_SGIX                       = &H8170???
%GL_TEXTURE_CLIPMAP_CENTER_SGIX                      = &H8171???
%GL_TEXTURE_CLIPMAP_FRAME_SGIX                       = &H8172???
%GL_TEXTURE_CLIPMAP_OFFSET_SGIX                      = &H8173???
%GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX               = &H8174???
%GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX                  = &H8175???
%GL_TEXTURE_CLIPMAP_DEPTH_SGIX                       = &H8176???
%GL_MAX_CLIPMAP_DEPTH_SGIX                           = &H8177???
%GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX                   = &H8178???
%GL_NEAREST_CLIPMAP_NEAREST_SGIX                     = &H844D???
%GL_NEAREST_CLIPMAP_LINEAR_SGIX                      = &H844E???
%GL_LINEAR_CLIPMAP_NEAREST_SGIX                      = &H844F???
#ENDIF

#IF NOT %DEF(%GL_SGIX_shadow)
%GL_TEXTURE_COMPARE_SGIX                             = &H819A???
%GL_TEXTURE_COMPARE_OPERATOR_SGIX                    = &H819B???
%GL_TEXTURE_LEQUAL_R_SGIX                            = &H819C???
%GL_TEXTURE_GEQUAL_R_SGIX                            = &H819D???
#ENDIF

#IF NOT %DEF(%GL_SGIS_texture_edge_clamp)
%GL_CLAMP_TO_EDGE_SGIS                               = &H812F???
#ENDIF

#IF NOT %DEF(%GL_SGIS_texture_border_clamp)
%GL_CLAMP_TO_BORDER_SGIS                             = &H812D???
#ENDIF

#IF NOT %DEF(%GL_EXT_blend_minmax)
%GL_FUNC_ADD_EXT                                     = &H8006???
%GL_MIN_EXT                                          = &H8007???
%GL_MAX_EXT                                          = &H8008???
%GL_BLEND_EQUATION_EXT                               = &H8009???
#ENDIF

#IF NOT %DEF(%GL_EXT_blend_subtract)
%GL_FUNC_SUBTRACT_EXT                                = &H800A???
%GL_FUNC_REVERSE_SUBTRACT_EXT                        = &H800B???
#ENDIF

#IF NOT %DEF(%GL_EXT_blend_logic_op)
#ENDIF

#IF NOT %DEF(%GL_SGIX_interlace)
%GL_INTERLACE_SGIX                                   = &H8094???
#ENDIF

#IF NOT %DEF(%GL_SGIX_pixel_tiles)
%GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX                   = &H813E???
%GL_PIXEL_TILE_CACHE_INCREMENT_SGIX                  = &H813F???
%GL_PIXEL_TILE_WIDTH_SGIX                            = &H8140???
%GL_PIXEL_TILE_HEIGHT_SGIX                           = &H8141???
%GL_PIXEL_TILE_GRID_WIDTH_SGIX                       = &H8142???
%GL_PIXEL_TILE_GRID_HEIGHT_SGIX                      = &H8143???
%GL_PIXEL_TILE_GRID_DEPTH_SGIX                       = &H8144???
%GL_PIXEL_TILE_CACHE_SIZE_SGIX                       = &H8145???
#ENDIF

#IF NOT %DEF(%GL_SGIS_texture_select)
%GL_DUAL_ALPHA4_SGIS                                 = &H8110???
%GL_DUAL_ALPHA8_SGIS                                 = &H8111???
%GL_DUAL_ALPHA12_SGIS                                = &H8112???
%GL_DUAL_ALPHA16_SGIS                                = &H8113???
%GL_DUAL_LUMINANCE4_SGIS                             = &H8114???
%GL_DUAL_LUMINANCE8_SGIS                             = &H8115???
%GL_DUAL_LUMINANCE12_SGIS                            = &H8116???
%GL_DUAL_LUMINANCE16_SGIS                            = &H8117???
%GL_DUAL_INTENSITY4_SGIS                             = &H8118???
%GL_DUAL_INTENSITY8_SGIS                             = &H8119???
%GL_DUAL_INTENSITY12_SGIS                            = &H811A???
%GL_DUAL_INTENSITY16_SGIS                            = &H811B???
%GL_DUAL_LUMINANCE_ALPHA4_SGIS                       = &H811C???
%GL_DUAL_LUMINANCE_ALPHA8_SGIS                       = &H811D???
%GL_QUAD_ALPHA4_SGIS                                 = &H811E???
%GL_QUAD_ALPHA8_SGIS                                 = &H811F???
%GL_QUAD_LUMINANCE4_SGIS                             = &H8120???
%GL_QUAD_LUMINANCE8_SGIS                             = &H8121???
%GL_QUAD_INTENSITY4_SGIS                             = &H8122???
%GL_QUAD_INTENSITY8_SGIS                             = &H8123???
%GL_DUAL_TEXTURE_SELECT_SGIS                         = &H8124???
%GL_QUAD_TEXTURE_SELECT_SGIS                         = &H8125???
#ENDIF

#IF NOT %DEF(%GL_SGIX_sprite)
%GL_SPRITE_SGIX                                      = &H8148???
%GL_SPRITE_MODE_SGIX                                 = &H8149???
%GL_SPRITE_AXIS_SGIX                                 = &H814A???
%GL_SPRITE_TRANSLATION_SGIX                          = &H814B???
%GL_SPRITE_AXIAL_SGIX                                = &H814C???
%GL_SPRITE_OBJECT_ALIGNED_SGIX                       = &H814D???
%GL_SPRITE_EYE_ALIGNED_SGIX                          = &H814E???
#ENDIF

#IF NOT %DEF(%GL_SGIX_texture_multi_buffer)
%GL_TEXTURE_MULTI_BUFFER_HINT_SGIX                   = &H812E???
#ENDIF

#IF NOT %DEF(%GL_EXT_point_parameters)
%GL_POINT_SIZE_MIN_EXT                               = &H8126???
%GL_POINT_SIZE_MAX_EXT                               = &H8127???
%GL_POINT_FADE_THRESHOLD_SIZE_EXT                    = &H8128???
%GL_DISTANCE_ATTENUATION_EXT                         = &H8129???
#ENDIF

#IF NOT %DEF(%GL_SGIS_point_parameters)
%GL_POINT_SIZE_MIN_SGIS                              = &H8126???
%GL_POINT_SIZE_MAX_SGIS                              = &H8127???
%GL_POINT_FADE_THRESHOLD_SIZE_SGIS                   = &H8128???
%GL_DISTANCE_ATTENUATION_SGIS                        = &H8129???
#ENDIF

#IF NOT %DEF(%GL_SGIX_instruments)
%GL_INSTRUMENT_BUFFER_POINTER_SGIX                   = &H8180???
%GL_INSTRUMENT_MEASUREMENTS_SGIX                     = &H8181???
#ENDIF

#IF NOT %DEF(%GL_SGIX_texture_scale_bias)
%GL_POST_TEXTURE_FILTER_BIAS_SGIX                    = &H8179???
%GL_POST_TEXTURE_FILTER_SCALE_SGIX                   = &H817A???
%GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX              = &H817B???
%GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX             = &H817C???
#ENDIF

#IF NOT %DEF(%GL_SGIX_framezoom)
%GL_FRAMEZOOM_SGIX                                   = &H818B???
%GL_FRAMEZOOM_FACTOR_SGIX                            = &H818C???
%GL_MAX_FRAMEZOOM_FACTOR_SGIX                        = &H818D???
#ENDIF

#IF NOT %DEF(%GL_SGIX_tag_sample_buffer)
#ENDIF

#IF NOT %DEF(%GL_FfdMaskSGIX)
%GL_TEXTURE_DEFORMATION_BIT_SGIX                     = &H00000001???
%GL_GEOMETRY_DEFORMATION_BIT_SGIX                    = &H00000002???
#ENDIF

#IF NOT %DEF(%GL_SGIX_polynomial_ffd)
%GL_GEOMETRY_DEFORMATION_SGIX                        = &H8194???
%GL_TEXTURE_DEFORMATION_SGIX                         = &H8195???
%GL_DEFORMATIONS_MASK_SGIX                           = &H8196???
%GL_MAX_DEFORMATION_ORDER_SGIX                       = &H8197???
#ENDIF

#IF NOT %DEF(%GL_SGIX_reference_plane)
%GL_REFERENCE_PLANE_SGIX                             = &H817D???
%GL_REFERENCE_PLANE_EQUATION_SGIX                    = &H817E???
#ENDIF

#IF NOT %DEF(%GL_SGIX_flush_raster)
#ENDIF

#IF NOT %DEF(%GL_SGIX_depth_texture)
%GL_DEPTH_COMPONENT16_SGIX                           = &H81A5???
%GL_DEPTH_COMPONENT24_SGIX                           = &H81A6???
%GL_DEPTH_COMPONENT32_SGIX                           = &H81A7???
#ENDIF

#IF NOT %DEF(%GL_SGIS_fog_function)
%GL_FOG_FUNC_SGIS                                    = &H812A???
%GL_FOG_FUNC_POINTS_SGIS                             = &H812B???
%GL_MAX_FOG_FUNC_POINTS_SGIS                         = &H812C???
#ENDIF

#IF NOT %DEF(%GL_SGIX_fog_offset)
%GL_FOG_OFFSET_SGIX                                  = &H8198???
%GL_FOG_OFFSET_VALUE_SGIX                            = &H8199???
#ENDIF

#IF NOT %DEF(%GL_HP_image_transform)
%GL_IMAGE_SCALE_X_HP                                 = &H8155???
%GL_IMAGE_SCALE_Y_HP                                 = &H8156???
%GL_IMAGE_TRANSLATE_X_HP                             = &H8157???
%GL_IMAGE_TRANSLATE_Y_HP                             = &H8158???
%GL_IMAGE_ROTATE_ANGLE_HP                            = &H8159???
%GL_IMAGE_ROTATE_ORIGIN_X_HP                         = &H815A???
%GL_IMAGE_ROTATE_ORIGIN_Y_HP                         = &H815B???
%GL_IMAGE_MAG_FILTER_HP                              = &H815C???
%GL_IMAGE_MIN_FILTER_HP                              = &H815D???
%GL_IMAGE_CUBIC_WEIGHT_HP                            = &H815E???
%GL_CUBIC_HP                                         = &H815F???
%GL_AVERAGE_HP                                       = &H8160???
%GL_IMAGE_TRANSFORM_2D_HP                            = &H8161???
%GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP              = &H8162???
%GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP        = &H8163???
#ENDIF

#IF NOT %DEF(%GL_HP_convolution_border_modes)
%GL_IGNORE_BORDER_HP                                 = &H8150???
%GL_CONSTANT_BORDER_HP                               = &H8151???
%GL_REPLICATE_BORDER_HP                              = &H8153???
%GL_CONVOLUTION_BORDER_COLOR_HP                      = &H8154???
#ENDIF

#IF NOT %DEF(%GL_INGR_palette_buffer)
#ENDIF

#IF NOT %DEF(%GL_SGIX_texture_add_env)
%GL_TEXTURE_ENV_BIAS_SGIX                            = &H80BE???
#ENDIF

#IF NOT %DEF(%GL_EXT_color_subtable)
#ENDIF

#IF NOT %DEF(%GL_PGI_vertex_hints)
%GL_VERTEX_DATA_HINT_PGI                             = &H1A22A???
%GL_VERTEX_CONSISTENT_HINT_PGI                       = &H1A22B???
%GL_MATERIAL_SIDE_HINT_PGI                           = &H1A22C???
%GL_MAX_VERTEX_HINT_PGI                              = &H1A22D???
%GL_COLOR3_BIT_PGI                                   = &H00010000???
%GL_COLOR4_BIT_PGI                                   = &H00020000???
%GL_EDGEFLAG_BIT_PGI                                 = &H00040000???
%GL_INDEX_BIT_PGI                                    = &H00080000???
%GL_MAT_AMBIENT_BIT_PGI                              = &H00100000???
%GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI                  = &H00200000???
%GL_MAT_DIFFUSE_BIT_PGI                              = &H00400000???
%GL_MAT_EMISSION_BIT_PGI                             = &H00800000???
%GL_MAT_COLOR_INDEXES_BIT_PGI                        = &H01000000???
%GL_MAT_SHININESS_BIT_PGI                            = &H02000000???
%GL_MAT_SPECULAR_BIT_PGI                             = &H04000000???
%GL_NORMAL_BIT_PGI                                   = &H08000000???
%GL_TEXCOORD1_BIT_PGI                                = &H10000000???
%GL_TEXCOORD2_BIT_PGI                                = &H20000000???
%GL_TEXCOORD3_BIT_PGI                                = &H40000000???
%GL_TEXCOORD4_BIT_PGI                                = &H80000000???
%GL_VERTEX23_BIT_PGI                                 = &H00000004???
%GL_VERTEX4_BIT_PGI                                  = &H00000008???
#ENDIF

#IF NOT %DEF(%GL_PGI_misc_hints)
%GL_PREFER_DOUBLEBUFFER_HINT_PGI                     = &H1A1F8???
%GL_CONSERVE_MEMORY_HINT_PGI                         = &H1A1FD???
%GL_RECLAIM_MEMORY_HINT_PGI                          = &H1A1FE???
%GL_NATIVE_GRAPHICS_HANDLE_PGI                       = &H1A202???
%GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI                   = &H1A203???
%GL_NATIVE_GRAPHICS_END_HINT_PGI                     = &H1A204???
%GL_ALWAYS_FAST_HINT_PGI                             = &H1A20C???
%GL_ALWAYS_SOFT_HINT_PGI                             = &H1A20D???
%GL_ALLOW_DRAW_OBJ_HINT_PGI                          = &H1A20E???
%GL_ALLOW_DRAW_WIN_HINT_PGI                          = &H1A20F???
%GL_ALLOW_DRAW_FRG_HINT_PGI                          = &H1A210???
%GL_ALLOW_DRAW_MEM_HINT_PGI                          = &H1A211???
%GL_STRICT_DEPTHFUNC_HINT_PGI                        = &H1A216???
%GL_STRICT_LIGHTING_HINT_PGI                         = &H1A217???
%GL_STRICT_SCISSOR_HINT_PGI                          = &H1A218???
%GL_FULL_STIPPLE_HINT_PGI                            = &H1A219???
%GL_CLIP_NEAR_HINT_PGI                               = &H1A220???
%GL_CLIP_FAR_HINT_PGI                                = &H1A221???
%GL_WIDE_LINE_HINT_PGI                               = &H1A222???
%GL_BACK_NORMALS_HINT_PGI                            = &H1A223???
#ENDIF

#IF NOT %DEF(%GL_EXT_paletted_texture)
%GL_COLOR_INDEX1_EXT                                 = &H80E2???
%GL_COLOR_INDEX2_EXT                                 = &H80E3???
%GL_COLOR_INDEX4_EXT                                 = &H80E4???
%GL_COLOR_INDEX8_EXT                                 = &H80E5???
%GL_COLOR_INDEX12_EXT                                = &H80E6???
%GL_COLOR_INDEX16_EXT                                = &H80E7???
%GL_TEXTURE_INDEX_SIZE_EXT                           = &H80ED???
#ENDIF

#IF NOT %DEF(%GL_EXT_clip_volume_hint)
%GL_CLIP_VOLUME_CLIPPING_HINT_EXT                    = &H80F0???
#ENDIF

#IF NOT %DEF(%GL_SGIX_list_priority)
%GL_LIST_PRIORITY_SGIX                               = &H8182???
#ENDIF

#IF NOT %DEF(%GL_SGIX_ir_instrument1)
%GL_IR_INSTRUMENT1_SGIX                              = &H817F???
#ENDIF

#IF NOT %DEF(%GL_SGIX_calligraphic_fragment)
%GL_CALLIGRAPHIC_FRAGMENT_SGIX                       = &H8183???
#ENDIF

#IF NOT %DEF(%GL_SGIX_texture_lod_bias)
%GL_TEXTURE_LOD_BIAS_S_SGIX                          = &H818E???
%GL_TEXTURE_LOD_BIAS_T_SGIX                          = &H818F???
%GL_TEXTURE_LOD_BIAS_R_SGIX                          = &H8190???
#ENDIF

#IF NOT %DEF(%GL_SGIX_shadow_ambient)
%GL_SHADOW_AMBIENT_SGIX                              = &H80BF???
#ENDIF

#IF NOT %DEF(%GL_EXT_index_texture)
#ENDIF

#IF NOT %DEF(%GL_EXT_index_material)
%GL_INDEX_MATERIAL_EXT                               = &H81B8???
%GL_INDEX_MATERIAL_PARAMETER_EXT                     = &H81B9???
%GL_INDEX_MATERIAL_FACE_EXT                          = &H81BA???
#ENDIF

#IF NOT %DEF(%GL_EXT_index_func)
%GL_INDEX_TEST_EXT                                   = &H81B5???
%GL_INDEX_TEST_FUNC_EXT                              = &H81B6???
%GL_INDEX_TEST_REF_EXT                               = &H81B7???
#ENDIF

#IF NOT %DEF(%GL_EXT_index_array_formats)
%GL_IUI_V2F_EXT                                      = &H81AD???
%GL_IUI_V3F_EXT                                      = &H81AE???
%GL_IUI_N3F_V2F_EXT                                  = &H81AF???
%GL_IUI_N3F_V3F_EXT                                  = &H81B0???
%GL_T2F_IUI_V2F_EXT                                  = &H81B1???
%GL_T2F_IUI_V3F_EXT                                  = &H81B2???
%GL_T2F_IUI_N3F_V2F_EXT                              = &H81B3???
%GL_T2F_IUI_N3F_V3F_EXT                              = &H81B4???
#ENDIF

#IF NOT %DEF(%GL_EXT_compiled_vertex_array)
%GL_ARRAY_ELEMENT_LOCK_FIRST_EXT                     = &H81A8???
%GL_ARRAY_ELEMENT_LOCK_COUNT_EXT                     = &H81A9???
#ENDIF

#IF NOT %DEF(%GL_EXT_cull_vertex)
%GL_CULL_VERTEX_EXT                                  = &H81AA???
%GL_CULL_VERTEX_EYE_POSITION_EXT                     = &H81AB???
%GL_CULL_VERTEX_OBJECT_POSITION_EXT                  = &H81AC???
#ENDIF

#IF NOT %DEF(%GL_SGIX_ycrcb)
%GL_YCRCB_422_SGIX                                   = &H81BB???
%GL_YCRCB_444_SGIX                                   = &H81BC???
#ENDIF

#IF NOT %DEF(%GL_SGIX_fragment_lighting)
%GL_FRAGMENT_LIGHTING_SGIX                           = &H8400???
%GL_FRAGMENT_COLOR_MATERIAL_SGIX                     = &H8401???
%GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX                = &H8402???
%GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX           = &H8403???
%GL_MAX_FRAGMENT_LIGHTS_SGIX                         = &H8404???
%GL_MAX_ACTIVE_LIGHTS_SGIX                           = &H8405???
%GL_CURRENT_RASTER_NORMAL_SGIX                       = &H8406???
%GL_LIGHT_ENV_MODE_SGIX                              = &H8407???
%GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX           = &H8408???
%GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX               = &H8409???
%GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX                = &H840A???
%GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX   = &H840B???
%GL_FRAGMENT_LIGHT0_SGIX                             = &H840C???
%GL_FRAGMENT_LIGHT1_SGIX                             = &H840D???
%GL_FRAGMENT_LIGHT2_SGIX                             = &H840E???
%GL_FRAGMENT_LIGHT3_SGIX                             = &H840F???
%GL_FRAGMENT_LIGHT4_SGIX                             = &H8410???
%GL_FRAGMENT_LIGHT5_SGIX                             = &H8411???
%GL_FRAGMENT_LIGHT6_SGIX                             = &H8412???
%GL_FRAGMENT_LIGHT7_SGIX                             = &H8413???
#ENDIF

#IF NOT %DEF(%GL_IBM_rasterpos_clip)
%GL_RASTER_POSITION_UNCLIPPED_IBM                    = &H19262???
#ENDIF

#IF NOT %DEF(%GL_HP_texture_lighting)
%GL_TEXTURE_LIGHTING_MODE_HP                         = &H8167???
%GL_TEXTURE_POST_SPECULAR_HP                         = &H8168???
%GL_TEXTURE_PRE_SPECULAR_HP                          = &H8169???
#ENDIF

#IF NOT %DEF(%GL_EXT_draw_range_elements)
%GL_MAX_ELEMENTS_VERTICES_EXT                        = &H80E8???
%GL_MAX_ELEMENTS_INDICES_EXT                         = &H80E9???
#ENDIF

#IF NOT %DEF(%GL_WIN_phong_shading)
%GL_PHONG_WIN                                        = &H80EA???
%GL_PHONG_HINT_WIN                                   = &H80EB???
#ENDIF

#IF NOT %DEF(%GL_WIN_specular_fog)
%GL_FOG_SPECULAR_TEXTURE_WIN                         = &H80EC???
#ENDIF

#IF NOT %DEF(%GL_EXT_light_texture)
%GL_FRAGMENT_MATERIAL_EXT                            = &H8349???
%GL_FRAGMENT_NORMAL_EXT                              = &H834A???
%GL_FRAGMENT_COLOR_EXT                               = &H834C???
%GL_ATTENUATION_EXT                                  = &H834D???
%GL_SHADOW_ATTENUATION_EXT                           = &H834E???
%GL_TEXTURE_APPLICATION_MODE_EXT                     = &H834F???
%GL_TEXTURE_LIGHT_EXT                                = &H8350???
%GL_TEXTURE_MATERIAL_FACE_EXT                        = &H8351???
%GL_TEXTURE_MATERIAL_PARAMETER_EXT                   = &H8352???
' /* reuse %GL_FRAGMENT_DEPTH_EXT
#ENDIF

#IF NOT %DEF(%GL_SGIX_blend_alpha_minmax)
%GL_ALPHA_MIN_SGIX                                   = &H8320???
%GL_ALPHA_MAX_SGIX                                   = &H8321???
#ENDIF

#IF NOT %DEF(%GL_SGIX_impact_pixel_texture)
%GL_PIXEL_TEX_GEN_Q_CEILING_SGIX                     = &H8184???
%GL_PIXEL_TEX_GEN_Q_ROUND_SGIX                       = &H8185???
%GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX                       = &H8186???
%GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX                 = &H8187???
%GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX              = &H8188???
%GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX                      = &H8189???
%GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX                      = &H818A???
#ENDIF

#IF NOT %DEF(%GL_EXT_bgra)
%GL_BGR_EXT                                          = &H80E0???
%GL_BGRA_EXT                                         = &H80E1???
#ENDIF

#IF NOT %DEF(%GL_SGIX_async)
%GL_ASYNC_MARKER_SGIX                                = &H8329???
#ENDIF

#IF NOT %DEF(%GL_SGIX_async_pixel)
%GL_ASYNC_TEX_IMAGE_SGIX                             = &H835C???
%GL_ASYNC_DRAW_PIXELS_SGIX                           = &H835D???
%GL_ASYNC_READ_PIXELS_SGIX                           = &H835E???
%GL_MAX_ASYNC_TEX_IMAGE_SGIX                         = &H835F???
%GL_MAX_ASYNC_DRAW_PIXELS_SGIX                       = &H8360???
%GL_MAX_ASYNC_READ_PIXELS_SGIX                       = &H8361???
#ENDIF

#IF NOT %DEF(%GL_SGIX_async_histogram)
%GL_ASYNC_HISTOGRAM_SGIX                             = &H832C???
%GL_MAX_ASYNC_HISTOGRAM_SGIX                         = &H832D???
#ENDIF

#IF NOT %DEF(%GL_INTEL_texture_scissor)
#ENDIF

#IF NOT %DEF(%GL_INTEL_parallel_arrays)
%GL_PARALLEL_ARRAYS_INTEL                            = &H83F4???
%GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL             = &H83F5???
%GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL             = &H83F6???
%GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL              = &H83F7???
%GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL      = &H83F8???
#ENDIF

#IF NOT %DEF(%GL_HP_occlusion_test)
%GL_OCCLUSION_TEST_HP                                = &H8165???
%GL_OCCLUSION_TEST_RESULT_HP                         = &H8166???
#ENDIF

#IF NOT %DEF(%GL_EXT_pixel_transform)
%GL_PIXEL_TRANSFORM_2D_EXT                           = &H8330???
%GL_PIXEL_MAG_FILTER_EXT                             = &H8331???
%GL_PIXEL_MIN_FILTER_EXT                             = &H8332???
%GL_PIXEL_CUBIC_WEIGHT_EXT                           = &H8333???
%GL_CUBIC_EXT                                        = &H8334???
%GL_AVERAGE_EXT                                      = &H8335???
%GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT               = &H8336???
%GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT           = &H8337???
%GL_PIXEL_TRANSFORM_2D_MATRIX_EXT                    = &H8338???
#ENDIF

#IF NOT %DEF(%GL_EXT_pixel_transform_color_table)
#ENDIF

#IF NOT %DEF(%GL_EXT_shared_texture_palette)
%GL_SHARED_TEXTURE_PALETTE_EXT                       = &H81FB???
#ENDIF

#IF NOT %DEF(%GL_EXT_separate_specular_color)
%GL_LIGHT_MODEL_COLOR_CONTROL_EXT                    = &H81F8???
%GL_SINGLE_COLOR_EXT                                 = &H81F9???
%GL_SEPARATE_SPECULAR_COLOR_EXT                      = &H81FA???
#ENDIF

#IF NOT %DEF(%GL_EXT_secondary_color)
%GL_COLOR_SUM_EXT                                    = &H8458???
%GL_CURRENT_SECONDARY_COLOR_EXT                      = &H8459???
%GL_SECONDARY_COLOR_ARRAY_SIZE_EXT                   = &H845A???
%GL_SECONDARY_COLOR_ARRAY_TYPE_EXT                   = &H845B???
%GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT                 = &H845C???
%GL_SECONDARY_COLOR_ARRAY_POINTER_EXT                = &H845D???
%GL_SECONDARY_COLOR_ARRAY_EXT                        = &H845E???
#ENDIF

#IF NOT %DEF(%GL_EXT_texture_perturb_normal)
%GL_PERTURB_EXT                                      = &H85AE???
%GL_TEXTURE_NORMAL_EXT                               = &H85AF???
#ENDIF

#IF NOT %DEF(%GL_EXT_multi_draw_arrays)
#ENDIF

#IF NOT %DEF(%GL_EXT_fog_coord)
%GL_FOG_COORDINATE_SOURCE_EXT                        = &H8450???
%GL_FOG_COORDINATE_EXT                               = &H8451???
%GL_FRAGMENT_DEPTH_EXT                               = &H8452???
%GL_CURRENT_FOG_COORDINATE_EXT                       = &H8453???
%GL_FOG_COORDINATE_ARRAY_TYPE_EXT                    = &H8454???
%GL_FOG_COORDINATE_ARRAY_STRIDE_EXT                  = &H8455???
%GL_FOG_COORDINATE_ARRAY_POINTER_EXT                 = &H8456???
%GL_FOG_COORDINATE_ARRAY_EXT                         = &H8457???
#ENDIF

#IF NOT %DEF(%GL_REND_screen_coordinates)
%GL_SCREEN_COORDINATES_REND                          = &H8490???
%GL_INVERTED_SCREEN_W_REND                           = &H8491???
#ENDIF

#IF NOT %DEF(%GL_EXT_coordinate_frame)
%GL_TANGENT_ARRAY_EXT                                = &H8439???
%GL_BINORMAL_ARRAY_EXT                               = &H843A???
%GL_CURRENT_TANGENT_EXT                              = &H843B???
%GL_CURRENT_BINORMAL_EXT                             = &H843C???
%GL_TANGENT_ARRAY_TYPE_EXT                           = &H843E???
%GL_TANGENT_ARRAY_STRIDE_EXT                         = &H843F???
%GL_BINORMAL_ARRAY_TYPE_EXT                          = &H8440???
%GL_BINORMAL_ARRAY_STRIDE_EXT                        = &H8441???
%GL_TANGENT_ARRAY_POINTER_EXT                        = &H8442???
%GL_BINORMAL_ARRAY_POINTER_EXT                       = &H8443???
%GL_MAP1_TANGENT_EXT                                 = &H8444???
%GL_MAP2_TANGENT_EXT                                 = &H8445???
%GL_MAP1_BINORMAL_EXT                                = &H8446???
%GL_MAP2_BINORMAL_EXT                                = &H8447???
#ENDIF

#IF NOT %DEF(%GL_EXT_texture_env_combine)
%GL_COMBINE_EXT                                      = &H8570???
%GL_COMBINE_RGB_EXT                                  = &H8571???
%GL_COMBINE_ALPHA_EXT                                = &H8572???
%GL_RGB_SCALE_EXT                                    = &H8573???
%GL_ADD_SIGNED_EXT                                   = &H8574???
%GL_INTERPOLATE_EXT                                  = &H8575???
%GL_CONSTANT_EXT                                     = &H8576???
%GL_PRIMARY_COLOR_EXT                                = &H8577???
%GL_PREVIOUS_EXT                                     = &H8578???
%GL_SOURCE0_RGB_EXT                                  = &H8580???
%GL_SOURCE1_RGB_EXT                                  = &H8581???
%GL_SOURCE2_RGB_EXT                                  = &H8582???
%GL_SOURCE0_ALPHA_EXT                                = &H8588???
%GL_SOURCE1_ALPHA_EXT                                = &H8589???
%GL_SOURCE2_ALPHA_EXT                                = &H858A???
%GL_OPERAND0_RGB_EXT                                 = &H8590???
%GL_OPERAND1_RGB_EXT                                 = &H8591???
%GL_OPERAND2_RGB_EXT                                 = &H8592???
%GL_OPERAND0_ALPHA_EXT                               = &H8598???
%GL_OPERAND1_ALPHA_EXT                               = &H8599???
%GL_OPERAND2_ALPHA_EXT                               = &H859A???
#ENDIF

#IF NOT %DEF(%GL_APPLE_specular_vector)
%GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE                = &H85B0???
#ENDIF

#IF NOT %DEF(%GL_APPLE_transform_hint)
%GL_TRANSFORM_HINT_APPLE                             = &H85B1???
#ENDIF

#IF NOT %DEF(%GL_SGIX_fog_scale)
%GL_FOG_SCALE_SGIX                                   = &H81FC???
%GL_FOG_SCALE_VALUE_SGIX                             = &H81FD???
#ENDIF

#IF NOT %DEF(%GL_SUNX_constant_data)
%GL_UNPACK_CONSTANT_DATA_SUNX                        = &H81D5???
%GL_TEXTURE_CONSTANT_DATA_SUNX                       = &H81D6???
#ENDIF

#IF NOT %DEF(%GL_SUN_global_alpha)
%GL_GLOBAL_ALPHA_SUN                                 = &H81D9???
%GL_GLOBAL_ALPHA_FACTOR_SUN                          = &H81DA???
#ENDIF

#IF NOT %DEF(%GL_SUN_triangle_list)
%GL_RESTART_SUN                                      = &H0001???
%GL_REPLACE_MIDDLE_SUN                               = &H0002???
%GL_REPLACE_OLDEST_SUN                               = &H0003???
%GL_TRIANGLE_LIST_SUN                                = &H81D7???
%GL_REPLACEMENT_CODE_SUN                             = &H81D8???
%GL_REPLACEMENT_CODE_ARRAY_SUN                       = &H85C0???
%GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN                  = &H85C1???
%GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN                = &H85C2???
%GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN               = &H85C3???
%GL_R1UI_V3F_SUN                                     = &H85C4???
%GL_R1UI_C4UB_V3F_SUN                                = &H85C5???
%GL_R1UI_C3F_V3F_SUN                                 = &H85C6???
%GL_R1UI_N3F_V3F_SUN                                 = &H85C7???
%GL_R1UI_C4F_N3F_V3F_SUN                             = &H85C8???
%GL_R1UI_T2F_V3F_SUN                                 = &H85C9???
%GL_R1UI_T2F_N3F_V3F_SUN                             = &H85CA???
%GL_R1UI_T2F_C4F_N3F_V3F_SUN                         = &H85CB???
#ENDIF

#IF NOT %DEF(%GL_SUN_vertex)
#ENDIF

#IF NOT %DEF(%GL_EXT_blend_func_separate)
%GL_BLEND_DST_RGB_EXT                                = &H80C8???
%GL_BLEND_SRC_RGB_EXT                                = &H80C9???
%GL_BLEND_DST_ALPHA_EXT                              = &H80CA???
%GL_BLEND_SRC_ALPHA_EXT                              = &H80CB???
#ENDIF

#IF NOT %DEF(%GL_INGR_color_clamp)
%GL_RED_MIN_CLAMP_INGR                               = &H8560???
%GL_GREEN_MIN_CLAMP_INGR                             = &H8561???
%GL_BLUE_MIN_CLAMP_INGR                              = &H8562???
%GL_ALPHA_MIN_CLAMP_INGR                             = &H8563???
%GL_RED_MAX_CLAMP_INGR                               = &H8564???
%GL_GREEN_MAX_CLAMP_INGR                             = &H8565???
%GL_BLUE_MAX_CLAMP_INGR                              = &H8566???
%GL_ALPHA_MAX_CLAMP_INGR                             = &H8567???
#ENDIF

#IF NOT %DEF(%GL_INGR_interlace_read)
%GL_INTERLACE_READ_INGR                              = &H8568???
#ENDIF

#IF NOT %DEF(%GL_EXT_stencil_wrap)
%GL_INCR_WRAP_EXT                                    = &H8507???
%GL_DECR_WRAP_EXT                                    = &H8508???
#ENDIF

#IF NOT %DEF(%GL_EXT_422_pixels)
%GL_422_EXT                                          = &H80CC???
%GL_422_REV_EXT                                      = &H80CD???
%GL_422_AVERAGE_EXT                                  = &H80CE???
%GL_422_REV_AVERAGE_EXT                              = &H80CF???
#ENDIF

#IF NOT %DEF(%GL_NV_texgen_reflection)
%GL_NORMAL_MAP_NV                                    = &H8511???
%GL_REFLECTION_MAP_NV                                = &H8512???
#ENDIF

#IF NOT %DEF(%GL_EXT_texture_cube_map)
%GL_NORMAL_MAP_EXT                                   = &H8511???
%GL_REFLECTION_MAP_EXT                               = &H8512???
%GL_TEXTURE_CUBE_MAP_EXT                             = &H8513???
%GL_TEXTURE_BINDING_CUBE_MAP_EXT                     = &H8514???
%GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT                  = &H8515???
%GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT                  = &H8516???
%GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT                  = &H8517???
%GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT                  = &H8518???
%GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT                  = &H8519???
%GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT                  = &H851A???
%GL_PROXY_TEXTURE_CUBE_MAP_EXT                       = &H851B???
%GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT                    = &H851C???
#ENDIF

#IF NOT %DEF(%GL_SUN_convolution_border_modes)
%GL_WRAP_BORDER_SUN                                  = &H81D4???
#ENDIF

#IF NOT %DEF(%GL_EXT_texture_env_add)
#ENDIF

#IF NOT %DEF(%GL_EXT_texture_lod_bias)
%GL_MAX_TEXTURE_LOD_BIAS_EXT                         = &H84FD???
%GL_TEXTURE_FILTER_CONTROL_EXT                       = &H8500???
%GL_TEXTURE_LOD_BIAS_EXT                             = &H8501???
#ENDIF

#IF NOT %DEF(%GL_EXT_texture_filter_anisotropic)
%GL_TEXTURE_MAX_ANISOTROPY_EXT                       = &H84FE???
%GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT                   = &H84FF???
#ENDIF

#IF NOT %DEF(%GL_EXT_vertex_weighting)
%GL_MODELVIEW0_STACK_DEPTH_EXT                       = %GL_MODELVIEW_STACK_DEPTH
%GL_MODELVIEW1_STACK_DEPTH_EXT                       = &H8502???
%GL_MODELVIEW0_MATRIX_EXT                            = %GL_MODELVIEW_MATRIX
%GL_MODELVIEW1_MATRIX_EXT                            = &H8506???
%GL_VERTEX_WEIGHTING_EXT                             = &H8509???
%GL_MODELVIEW0_EXT                                   = %GL_MODELVIEW
%GL_MODELVIEW1_EXT                                   = &H850A???
%GL_CURRENT_VERTEX_WEIGHT_EXT                        = &H850B???
%GL_VERTEX_WEIGHT_ARRAY_EXT                          = &H850C???
%GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT                     = &H850D???
%GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT                     = &H850E???
%GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT                   = &H850F???
%GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT                  = &H8510???
#ENDIF

#IF NOT %DEF(%GL_NV_light_max_exponent)
%GL_MAX_SHININESS_NV                                 = &H8504???
%GL_MAX_SPOT_EXPONENT_NV                             = &H8505???
#ENDIF

#IF NOT %DEF(%GL_NV_vertex_array_range)
%GL_VERTEX_ARRAY_RANGE_NV                            = &H851D???
%GL_VERTEX_ARRAY_RANGE_LENGTH_NV                     = &H851E???
%GL_VERTEX_ARRAY_RANGE_VALID_NV                      = &H851F???
%GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV                = &H8520???
%GL_VERTEX_ARRAY_RANGE_POINTER_NV                    = &H8521???
#ENDIF

#IF NOT %DEF(%GL_NV_register_combiners)
%GL_REGISTER_COMBINERS_NV                            = &H8522???
%GL_VARIABLE_A_NV                                    = &H8523???
%GL_VARIABLE_B_NV                                    = &H8524???
%GL_VARIABLE_C_NV                                    = &H8525???
%GL_VARIABLE_D_NV                                    = &H8526???
%GL_VARIABLE_E_NV                                    = &H8527???
%GL_VARIABLE_F_NV                                    = &H8528???
%GL_VARIABLE_G_NV                                    = &H8529???
%GL_CONSTANT_COLOR0_NV                               = &H852A???
%GL_CONSTANT_COLOR1_NV                               = &H852B???
%GL_PRIMARY_COLOR_NV                                 = &H852C???
%GL_SECONDARY_COLOR_NV                               = &H852D???
%GL_SPARE0_NV                                        = &H852E???
%GL_SPARE1_NV                                        = &H852F???
%GL_DISCARD_NV                                       = &H8530???
%GL_E_TIMES_F_NV                                     = &H8531???
%GL_SPARE0_PLUS_SECONDARY_COLOR_NV                   = &H8532???
%GL_UNSIGNED_IDENTITY_NV                             = &H8536???
%GL_UNSIGNED_INVERT_NV                               = &H8537???
%GL_EXPAND_NORMAL_NV                                 = &H8538???
%GL_EXPAND_NEGATE_NV                                 = &H8539???
%GL_HALF_BIAS_NORMAL_NV                              = &H853A???
%GL_HALF_BIAS_NEGATE_NV                              = &H853B???
%GL_SIGNED_IDENTITY_NV                               = &H853C???
%GL_SIGNED_NEGATE_NV                                 = &H853D???
%GL_SCALE_BY_TWO_NV                                  = &H853E???
%GL_SCALE_BY_FOUR_NV                                 = &H853F???
%GL_SCALE_BY_ONE_HALF_NV                             = &H8540???
%GL_BIAS_BY_NEGATIVE_ONE_HALF_NV                     = &H8541???
%GL_COMBINER_INPUT_NV                                = &H8542???
%GL_COMBINER_MAPPING_NV                              = &H8543???
%GL_COMBINER_COMPONENT_USAGE_NV                      = &H8544???
%GL_COMBINER_AB_DOT_PRODUCT_NV                       = &H8545???
%GL_COMBINER_CD_DOT_PRODUCT_NV                       = &H8546???
%GL_COMBINER_MUX_SUM_NV                              = &H8547???
%GL_COMBINER_SCALE_NV                                = &H8548???
%GL_COMBINER_BIAS_NV                                 = &H8549???
%GL_COMBINER_AB_OUTPUT_NV                            = &H854A???
%GL_COMBINER_CD_OUTPUT_NV                            = &H854B???
%GL_COMBINER_SUM_OUTPUT_NV                           = &H854C???
%GL_MAX_GENERAL_COMBINERS_NV                         = &H854D???
%GL_NUM_GENERAL_COMBINERS_NV                         = &H854E???
%GL_COLOR_SUM_CLAMP_NV                               = &H854F???
%GL_COMBINER0_NV                                     = &H8550???
%GL_COMBINER1_NV                                     = &H8551???
%GL_COMBINER2_NV                                     = &H8552???
%GL_COMBINER3_NV                                     = &H8553???
%GL_COMBINER4_NV                                     = &H8554???
%GL_COMBINER5_NV                                     = &H8555???
%GL_COMBINER6_NV                                     = &H8556???
%GL_COMBINER7_NV                                     = &H8557???
' /* reuse %GL_TEXTURE0_ARB
' /* reuse %GL_TEXTURE1_ARB
' /* reuse %GL_ZERO
' /* reuse %GL_NONE
' /* reuse %GL_FOG
#ENDIF

#IF NOT %DEF(%GL_NV_fog_distance)
%GL_FOG_DISTANCE_MODE_NV                             = &H855A???
%GL_EYE_RADIAL_NV                                    = &H855B???
%GL_EYE_PLANE_ABSOLUTE_NV                            = &H855C???
' /* reuse %GL_EYE_PLANE
#ENDIF

#IF NOT %DEF(%GL_NV_texgen_emboss)
%GL_EMBOSS_LIGHT_NV                                  = &H855D???
%GL_EMBOSS_CONSTANT_NV                               = &H855E???
%GL_EMBOSS_MAP_NV                                    = &H855F???
#ENDIF

#IF NOT %DEF(%GL_NV_blend_square)
#ENDIF

#IF NOT %DEF(%GL_NV_texture_env_combine4)
%GL_COMBINE4_NV                                      = &H8503???
%GL_SOURCE3_RGB_NV                                   = &H8583???
%GL_SOURCE3_ALPHA_NV                                 = &H858B???
%GL_OPERAND3_RGB_NV                                  = &H8593???
%GL_OPERAND3_ALPHA_NV                                = &H859B???
#ENDIF

#IF NOT %DEF(%GL_MESA_resize_buffers)
#ENDIF

#IF NOT %DEF(%GL_MESA_window_pos)
#ENDIF

#IF NOT %DEF(%GL_EXT_texture_compression_s3tc)
%GL_COMPRESSED_RGB_S3TC_DXT1_EXT                     = &H83F0???
%GL_COMPRESSED_RGBA_S3TC_DXT1_EXT                    = &H83F1???
%GL_COMPRESSED_RGBA_S3TC_DXT3_EXT                    = &H83F2???
%GL_COMPRESSED_RGBA_S3TC_DXT5_EXT                    = &H83F3???
#ENDIF

#IF NOT %DEF(%GL_IBM_cull_vertex)
%GL_CULL_VERTEX_IBM                                  = 103050???
#ENDIF

#IF NOT %DEF(%GL_IBM_multimode_draw_arrays)
#ENDIF

#IF NOT %DEF(%GL_IBM_vertex_array_lists)
%GL_VERTEX_ARRAY_LIST_IBM                            = 103070???
%GL_NORMAL_ARRAY_LIST_IBM                            = 103071???
%GL_COLOR_ARRAY_LIST_IBM                             = 103072???
%GL_INDEX_ARRAY_LIST_IBM                             = 103073???
%GL_TEXTURE_COORD_ARRAY_LIST_IBM                     = 103074???
%GL_EDGE_FLAG_ARRAY_LIST_IBM                         = 103075???
%GL_FOG_COORDINATE_ARRAY_LIST_IBM                    = 103076???
%GL_SECONDARY_COLOR_ARRAY_LIST_IBM                   = 103077???
%GL_VERTEX_ARRAY_LIST_STRIDE_IBM                     = 103080???
%GL_NORMAL_ARRAY_LIST_STRIDE_IBM                     = 103081???
%GL_COLOR_ARRAY_LIST_STRIDE_IBM                      = 103082???
%GL_INDEX_ARRAY_LIST_STRIDE_IBM                      = 103083???
%GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM              = 103084???
%GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM                  = 103085???
%GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM             = 103086???
%GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM            = 103087???
#ENDIF

#IF NOT %DEF(%GL_SGIX_subsample)
%GL_PACK_SUBSAMPLE_RATE_SGIX                         = &H85A0???
%GL_UNPACK_SUBSAMPLE_RATE_SGIX                       = &H85A1???
%GL_PIXEL_SUBSAMPLE_4444_SGIX                        = &H85A2???
%GL_PIXEL_SUBSAMPLE_2424_SGIX                        = &H85A3???
%GL_PIXEL_SUBSAMPLE_4242_SGIX                        = &H85A4???
#ENDIF

#IF NOT %DEF(%GL_SGIX_ycrcb_subsample)
#ENDIF

#IF NOT %DEF(%GL_SGIX_ycrcba)
%GL_YCRCB_SGIX                                       = &H8318???
%GL_YCRCBA_SGIX                                      = &H8319???
#ENDIF

#IF NOT %DEF(%GL_SGI_depth_pass_instrument)
%GL_DEPTH_PASS_INSTRUMENT_SGIX                       = &H8310???
%GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX              = &H8311???
%GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX                   = &H8312???
#ENDIF

#IF NOT %DEF(%GL_3DFX_texture_compression_FXT1)
%GL_COMPRESSED_RGB_FXT1_3DFX                         = &H86B0???
%GL_COMPRESSED_RGBA_FXT1_3DFX                        = &H86B1???
#ENDIF

#IF NOT %DEF(%GL_3DFX_multisample)
%GL_MULTISAMPLE_3DFX                                 = &H86B2???
%GL_SAMPLE_BUFFERS_3DFX                              = &H86B3???
%GL_SAMPLES_3DFX                                     = &H86B4???
%GL_MULTISAMPLE_BIT_3DFX                             = &H20000000???
#ENDIF

#IF NOT %DEF(%GL_3DFX_tbuffer)
#ENDIF

#IF NOT %DEF(%GL_EXT_multisample)
%GL_MULTISAMPLE_EXT                                  = &H809D???
%GL_SAMPLE_ALPHA_TO_MASK_EXT                         = &H809E???
%GL_SAMPLE_ALPHA_TO_ONE_EXT                          = &H809F???
%GL_SAMPLE_MASK_EXT                                  = &H80A0???
%GL_1PASS_EXT                                        = &H80A1???
%GL_2PASS_0_EXT                                      = &H80A2???
%GL_2PASS_1_EXT                                      = &H80A3???
%GL_4PASS_0_EXT                                      = &H80A4???
%GL_4PASS_1_EXT                                      = &H80A5???
%GL_4PASS_2_EXT                                      = &H80A6???
%GL_4PASS_3_EXT                                      = &H80A7???
%GL_SAMPLE_BUFFERS_EXT                               = &H80A8???
%GL_SAMPLES_EXT                                      = &H80A9???
%GL_SAMPLE_MASK_VALUE_EXT                            = &H80AA???
%GL_SAMPLE_MASK_INVERT_EXT                           = &H80AB???
%GL_SAMPLE_PATTERN_EXT                               = &H80AC???
%GL_MULTISAMPLE_BIT_EXT                              = &H20000000???
#ENDIF

#IF NOT %DEF(%GL_SGIX_vertex_preclip)
%GL_VERTEX_PRECLIP_SGIX                              = &H83EE???
%GL_VERTEX_PRECLIP_HINT_SGIX                         = &H83EF???
#ENDIF

#IF NOT %DEF(%GL_SGIX_convolution_accuracy)
%GL_CONVOLUTION_HINT_SGIX                            = &H8316???
#ENDIF

#IF NOT %DEF(%GL_SGIX_resample)
%GL_PACK_RESAMPLE_SGIX                               = &H842C???
%GL_UNPACK_RESAMPLE_SGIX                             = &H842D???
%GL_RESAMPLE_REPLICATE_SGIX                          = &H842E???
%GL_RESAMPLE_ZERO_FILL_SGIX                          = &H842F???
%GL_RESAMPLE_DECIMATE_SGIX                           = &H8430???
#ENDIF

#IF NOT %DEF(%GL_SGIS_point_line_texgen)
%GL_EYE_DISTANCE_TO_POINT_SGIS                       = &H81F0???
%GL_OBJECT_DISTANCE_TO_POINT_SGIS                    = &H81F1???
%GL_EYE_DISTANCE_TO_LINE_SGIS                        = &H81F2???
%GL_OBJECT_DISTANCE_TO_LINE_SGIS                     = &H81F3???
%GL_EYE_POINT_SGIS                                   = &H81F4???
%GL_OBJECT_POINT_SGIS                                = &H81F5???
%GL_EYE_LINE_SGIS                                    = &H81F6???
%GL_OBJECT_LINE_SGIS                                 = &H81F7???
#ENDIF

#IF NOT %DEF(%GL_SGIS_texture_color_mask)
%GL_TEXTURE_COLOR_WRITEMASK_SGIS                     = &H81EF???
#ENDIF

#IF NOT %DEF(%GL_EXT_texture_env_dot3)
%GL_DOT3_RGB_EXT                                     = &H8740???
%GL_DOT3_RGBA_EXT                                    = &H8741???
#ENDIF

#IF NOT %DEF(%GL_ATI_texture_mirror_once)
%GL_MIRROR_CLAMP_ATI                                 = &H8742???
%GL_MIRROR_CLAMP_TO_EDGE_ATI                         = &H8743???
#ENDIF

#IF NOT %DEF(%GL_NV_fence)
%GL_ALL_COMPLETED_NV                                 = &H84F2???
%GL_FENCE_STATUS_NV                                  = &H84F3???
%GL_FENCE_CONDITION_NV                               = &H84F4???
#ENDIF

#IF NOT %DEF(%GL_IBM_texture_mirrored_repeat)
%GL_MIRRORED_REPEAT_IBM                              = &H8370???
#ENDIF

#IF NOT %DEF(%GL_NV_evaluators)
%GL_EVAL_2D_NV                                       = &H86C0???
%GL_EVAL_TRIANGULAR_2D_NV                            = &H86C1???
%GL_MAP_TESSELLATION_NV                              = &H86C2???
%GL_MAP_ATTRIB_U_ORDER_NV                            = &H86C3???
%GL_MAP_ATTRIB_V_ORDER_NV                            = &H86C4???
%GL_EVAL_FRACTIONAL_TESSELLATION_NV                  = &H86C5???
%GL_EVAL_VERTEX_ATTRIB0_NV                           = &H86C6???
%GL_EVAL_VERTEX_ATTRIB1_NV                           = &H86C7???
%GL_EVAL_VERTEX_ATTRIB2_NV                           = &H86C8???
%GL_EVAL_VERTEX_ATTRIB3_NV                           = &H86C9???
%GL_EVAL_VERTEX_ATTRIB4_NV                           = &H86CA???
%GL_EVAL_VERTEX_ATTRIB5_NV                           = &H86CB???
%GL_EVAL_VERTEX_ATTRIB6_NV                           = &H86CC???
%GL_EVAL_VERTEX_ATTRIB7_NV                           = &H86CD???
%GL_EVAL_VERTEX_ATTRIB8_NV                           = &H86CE???
%GL_EVAL_VERTEX_ATTRIB9_NV                           = &H86CF???
%GL_EVAL_VERTEX_ATTRIB10_NV                          = &H86D0???
%GL_EVAL_VERTEX_ATTRIB11_NV                          = &H86D1???
%GL_EVAL_VERTEX_ATTRIB12_NV                          = &H86D2???
%GL_EVAL_VERTEX_ATTRIB13_NV                          = &H86D3???
%GL_EVAL_VERTEX_ATTRIB14_NV                          = &H86D4???
%GL_EVAL_VERTEX_ATTRIB15_NV                          = &H86D5???
%GL_MAX_MAP_TESSELLATION_NV                          = &H86D6???
%GL_MAX_RATIONAL_EVAL_ORDER_NV                       = &H86D7???
#ENDIF

#IF NOT %DEF(%GL_NV_packed_depth_stencil)
%GL_DEPTH_STENCIL_NV                                 = &H84F9???
%GL_UNSIGNED_INT_24_8_NV                             = &H84FA???
#ENDIF

#IF NOT %DEF(%GL_NV_register_combiners2)
%GL_PER_STAGE_CONSTANTS_NV                           = &H8535???
#ENDIF

#IF NOT %DEF(%GL_NV_texture_compression_vtc)
#ENDIF

#IF NOT %DEF(%GL_NV_texture_rectangle)
%GL_TEXTURE_RECTANGLE_NV                             = &H84F5???
%GL_TEXTURE_BINDING_RECTANGLE_NV                     = &H84F6???
%GL_PROXY_TEXTURE_RECTANGLE_NV                       = &H84F7???
%GL_MAX_RECTANGLE_TEXTURE_SIZE_NV                    = &H84F8???
#ENDIF

#IF NOT %DEF(%GL_NV_texture_shader)
%GL_OFFSET_TEXTURE_RECTANGLE_NV                      = &H864C???
%GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV                = &H864D???
%GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV                 = &H864E???
%GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV             = &H86D9???
%GL_UNSIGNED_INT_S8_S8_8_8_NV                        = &H86DA???
%GL_UNSIGNED_INT_8_8_S8_S8_REV_NV                    = &H86DB???
%GL_DSDT_MAG_INTENSITY_NV                            = &H86DC???
%GL_SHADER_CONSISTENT_NV                             = &H86DD???
%GL_TEXTURE_SHADER_NV                                = &H86DE???
%GL_SHADER_OPERATION_NV                              = &H86DF???
%GL_CULL_MODES_NV                                    = &H86E0???
%GL_OFFSET_TEXTURE_MATRIX_NV                         = &H86E1???
%GL_OFFSET_TEXTURE_SCALE_NV                          = &H86E2???
%GL_OFFSET_TEXTURE_BIAS_NV                           = &H86E3???
%GL_OFFSET_TEXTURE_2D_MATRIX_NV                      = %GL_OFFSET_TEXTURE_MATRIX_NV
%GL_OFFSET_TEXTURE_2D_SCALE_NV                       = %GL_OFFSET_TEXTURE_SCALE_NV
%GL_OFFSET_TEXTURE_2D_BIAS_NV                        = %GL_OFFSET_TEXTURE_BIAS_NV
%GL_PREVIOUS_TEXTURE_INPUT_NV                        = &H86E4???
%GL_CONST_EYE_NV                                     = &H86E5???
%GL_PASS_THROUGH_NV                                  = &H86E6???
%GL_CULL_FRAGMENT_NV                                 = &H86E7???
%GL_OFFSET_TEXTURE_2D_NV                             = &H86E8???
%GL_DEPENDENT_AR_TEXTURE_2D_NV                       = &H86E9???
%GL_DEPENDENT_GB_TEXTURE_2D_NV                       = &H86EA???
%GL_DOT_PRODUCT_NV                                   = &H86EC???
%GL_DOT_PRODUCT_DEPTH_REPLACE_NV                     = &H86ED???
%GL_DOT_PRODUCT_TEXTURE_2D_NV                        = &H86EE???
%GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV                  = &H86F0???
%GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV                  = &H86F1???
%GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV                  = &H86F2???
%GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV        = &H86F3???
%GL_HILO_NV                                          = &H86F4???
%GL_DSDT_NV                                          = &H86F5???
%GL_DSDT_MAG_NV                                      = &H86F6???
%GL_DSDT_MAG_VIB_NV                                  = &H86F7???
%GL_HILO16_NV                                        = &H86F8???
%GL_SIGNED_HILO_NV                                   = &H86F9???
%GL_SIGNED_HILO16_NV                                 = &H86FA???
%GL_SIGNED_RGBA_NV                                   = &H86FB???
%GL_SIGNED_RGBA8_NV                                  = &H86FC???
%GL_SIGNED_RGB_NV                                    = &H86FE???
%GL_SIGNED_RGB8_NV                                   = &H86FF???
%GL_SIGNED_LUMINANCE_NV                              = &H8701???
%GL_SIGNED_LUMINANCE8_NV                             = &H8702???
%GL_SIGNED_LUMINANCE_ALPHA_NV                        = &H8703???
%GL_SIGNED_LUMINANCE8_ALPHA8_NV                      = &H8704???
%GL_SIGNED_ALPHA_NV                                  = &H8705???
%GL_SIGNED_ALPHA8_NV                                 = &H8706???
%GL_SIGNED_INTENSITY_NV                              = &H8707???
%GL_SIGNED_INTENSITY8_NV                             = &H8708???
%GL_DSDT8_NV                                         = &H8709???
%GL_DSDT8_MAG8_NV                                    = &H870A???
%GL_DSDT8_MAG8_INTENSITY8_NV                         = &H870B???
%GL_SIGNED_RGB_UNSIGNED_ALPHA_NV                     = &H870C???
%GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV                   = &H870D???
%GL_HI_SCALE_NV                                      = &H870E???
%GL_LO_SCALE_NV                                      = &H870F???
%GL_DS_SCALE_NV                                      = &H8710???
%GL_DT_SCALE_NV                                      = &H8711???
%GL_MAGNITUDE_SCALE_NV                               = &H8712???
%GL_VIBRANCE_SCALE_NV                                = &H8713???
%GL_HI_BIAS_NV                                       = &H8714???
%GL_LO_BIAS_NV                                       = &H8715???
%GL_DS_BIAS_NV                                       = &H8716???
%GL_DT_BIAS_NV                                       = &H8717???
%GL_MAGNITUDE_BIAS_NV                                = &H8718???
%GL_VIBRANCE_BIAS_NV                                 = &H8719???
%GL_TEXTURE_BORDER_VALUES_NV                         = &H871A???
%GL_TEXTURE_HI_SIZE_NV                               = &H871B???
%GL_TEXTURE_LO_SIZE_NV                               = &H871C???
%GL_TEXTURE_DS_SIZE_NV                               = &H871D???
%GL_TEXTURE_DT_SIZE_NV                               = &H871E???
%GL_TEXTURE_MAG_SIZE_NV                              = &H871F???
#ENDIF

#IF NOT %DEF(%GL_NV_texture_shader2)
%GL_DOT_PRODUCT_TEXTURE_3D_NV                        = &H86EF???
#ENDIF

#IF NOT %DEF(%GL_NV_vertex_array_range2)
%GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV              = &H8533???
#ENDIF

#IF NOT %DEF(%GL_NV_vertex_program)
%GL_VERTEX_PROGRAM_NV                                = &H8620???
%GL_VERTEX_STATE_PROGRAM_NV                          = &H8621???
%GL_ATTRIB_ARRAY_SIZE_NV                             = &H8623???
%GL_ATTRIB_ARRAY_STRIDE_NV                           = &H8624???
%GL_ATTRIB_ARRAY_TYPE_NV                             = &H8625???
%GL_CURRENT_ATTRIB_NV                                = &H8626???
%GL_PROGRAM_LENGTH_NV                                = &H8627???
%GL_PROGRAM_STRING_NV                                = &H8628???
%GL_MODELVIEW_PROJECTION_NV                          = &H8629???
%GL_IDENTITY_NV                                      = &H862A???
%GL_INVERSE_NV                                       = &H862B???
%GL_TRANSPOSE_NV                                     = &H862C???
%GL_INVERSE_TRANSPOSE_NV                             = &H862D???
%GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV                  = &H862E???
%GL_MAX_TRACK_MATRICES_NV                            = &H862F???
%GL_MATRIX0_NV                                       = &H8630???
%GL_MATRIX1_NV                                       = &H8631???
%GL_MATRIX2_NV                                       = &H8632???
%GL_MATRIX3_NV                                       = &H8633???
%GL_MATRIX4_NV                                       = &H8634???
%GL_MATRIX5_NV                                       = &H8635???
%GL_MATRIX6_NV                                       = &H8636???
%GL_MATRIX7_NV                                       = &H8637???
%GL_CURRENT_MATRIX_STACK_DEPTH_NV                    = &H8640???
%GL_CURRENT_MATRIX_NV                                = &H8641???
%GL_VERTEX_PROGRAM_POINT_SIZE_NV                     = &H8642???
%GL_VERTEX_PROGRAM_TWO_SIDE_NV                       = &H8643???
%GL_PROGRAM_PARAMETER_NV                             = &H8644???
%GL_ATTRIB_ARRAY_POINTER_NV                          = &H8645???
%GL_PROGRAM_TARGET_NV                                = &H8646???
%GL_PROGRAM_RESIDENT_NV                              = &H8647???
%GL_TRACK_MATRIX_NV                                  = &H8648???
%GL_TRACK_MATRIX_TRANSFORM_NV                        = &H8649???
%GL_VERTEX_PROGRAM_BINDING_NV                        = &H864A???
%GL_PROGRAM_ERROR_POSITION_NV                        = &H864B???
%GL_VERTEX_ATTRIB_ARRAY0_NV                          = &H8650???
%GL_VERTEX_ATTRIB_ARRAY1_NV                          = &H8651???
%GL_VERTEX_ATTRIB_ARRAY2_NV                          = &H8652???
%GL_VERTEX_ATTRIB_ARRAY3_NV                          = &H8653???
%GL_VERTEX_ATTRIB_ARRAY4_NV                          = &H8654???
%GL_VERTEX_ATTRIB_ARRAY5_NV                          = &H8655???
%GL_VERTEX_ATTRIB_ARRAY6_NV                          = &H8656???
%GL_VERTEX_ATTRIB_ARRAY7_NV                          = &H8657???
%GL_VERTEX_ATTRIB_ARRAY8_NV                          = &H8658???
%GL_VERTEX_ATTRIB_ARRAY9_NV                          = &H8659???
%GL_VERTEX_ATTRIB_ARRAY10_NV                         = &H865A???
%GL_VERTEX_ATTRIB_ARRAY11_NV                         = &H865B???
%GL_VERTEX_ATTRIB_ARRAY12_NV                         = &H865C???
%GL_VERTEX_ATTRIB_ARRAY13_NV                         = &H865D???
%GL_VERTEX_ATTRIB_ARRAY14_NV                         = &H865E???
%GL_VERTEX_ATTRIB_ARRAY15_NV                         = &H865F???
%GL_MAP1_VERTEX_ATTRIB0_4_NV                         = &H8660???
%GL_MAP1_VERTEX_ATTRIB1_4_NV                         = &H8661???
%GL_MAP1_VERTEX_ATTRIB2_4_NV                         = &H8662???
%GL_MAP1_VERTEX_ATTRIB3_4_NV                         = &H8663???
%GL_MAP1_VERTEX_ATTRIB4_4_NV                         = &H8664???
%GL_MAP1_VERTEX_ATTRIB5_4_NV                         = &H8665???
%GL_MAP1_VERTEX_ATTRIB6_4_NV                         = &H8666???
%GL_MAP1_VERTEX_ATTRIB7_4_NV                         = &H8667???
%GL_MAP1_VERTEX_ATTRIB8_4_NV                         = &H8668???
%GL_MAP1_VERTEX_ATTRIB9_4_NV                         = &H8669???
%GL_MAP1_VERTEX_ATTRIB10_4_NV                        = &H866A???
%GL_MAP1_VERTEX_ATTRIB11_4_NV                        = &H866B???
%GL_MAP1_VERTEX_ATTRIB12_4_NV                        = &H866C???
%GL_MAP1_VERTEX_ATTRIB13_4_NV                        = &H866D???
%GL_MAP1_VERTEX_ATTRIB14_4_NV                        = &H866E???
%GL_MAP1_VERTEX_ATTRIB15_4_NV                        = &H866F???
%GL_MAP2_VERTEX_ATTRIB0_4_NV                         = &H8670???
%GL_MAP2_VERTEX_ATTRIB1_4_NV                         = &H8671???
%GL_MAP2_VERTEX_ATTRIB2_4_NV                         = &H8672???
%GL_MAP2_VERTEX_ATTRIB3_4_NV                         = &H8673???
%GL_MAP2_VERTEX_ATTRIB4_4_NV                         = &H8674???
%GL_MAP2_VERTEX_ATTRIB5_4_NV                         = &H8675???
%GL_MAP2_VERTEX_ATTRIB6_4_NV                         = &H8676???
%GL_MAP2_VERTEX_ATTRIB7_4_NV                         = &H8677???
%GL_MAP2_VERTEX_ATTRIB8_4_NV                         = &H8678???
%GL_MAP2_VERTEX_ATTRIB9_4_NV                         = &H8679???
%GL_MAP2_VERTEX_ATTRIB10_4_NV                        = &H867A???
%GL_MAP2_VERTEX_ATTRIB11_4_NV                        = &H867B???
%GL_MAP2_VERTEX_ATTRIB12_4_NV                        = &H867C???
%GL_MAP2_VERTEX_ATTRIB13_4_NV                        = &H867D???
%GL_MAP2_VERTEX_ATTRIB14_4_NV                        = &H867E???
%GL_MAP2_VERTEX_ATTRIB15_4_NV                        = &H867F???
#ENDIF

#IF NOT %DEF(%GL_SGIX_texture_coordinate_clamp)
%GL_TEXTURE_MAX_CLAMP_S_SGIX                         = &H8369???
%GL_TEXTURE_MAX_CLAMP_T_SGIX                         = &H836A???
%GL_TEXTURE_MAX_CLAMP_R_SGIX                         = &H836B???
#ENDIF

#IF NOT %DEF(%GL_SGIX_scalebias_hint)
%GL_SCALEBIAS_HINT_SGIX                              = &H8322???
#ENDIF

#IF NOT %DEF(%GL_OML_interlace)
%GL_INTERLACE_OML                                    = &H8980???
%GL_INTERLACE_READ_OML                               = &H8981???
#ENDIF

#IF NOT %DEF(%GL_OML_subsample)
%GL_FORMAT_SUBSAMPLE_24_24_OML                       = &H8982???
%GL_FORMAT_SUBSAMPLE_244_244_OML                     = &H8983???
#ENDIF

#IF NOT %DEF(%GL_OML_resample)
%GL_PACK_RESAMPLE_OML                                = &H8984???
%GL_UNPACK_RESAMPLE_OML                              = &H8985???
%GL_RESAMPLE_REPLICATE_OML                           = &H8986???
%GL_RESAMPLE_ZERO_FILL_OML                           = &H8987???
%GL_RESAMPLE_AVERAGE_OML                             = &H8988???
%GL_RESAMPLE_DECIMATE_OML                            = &H8989???
#ENDIF

#IF NOT %DEF(%GL_NV_copy_depth_to_color)
%GL_DEPTH_STENCIL_TO_RGBA_NV                         = &H886E???
%GL_DEPTH_STENCIL_TO_BGRA_NV                         = &H886F???
#ENDIF

#IF NOT %DEF(%GL_ATI_envmap_bumpmap)
%GL_BUMP_ROT_MATRIX_ATI                              = &H8775???
%GL_BUMP_ROT_MATRIX_SIZE_ATI                         = &H8776???
%GL_BUMP_NUM_TEX_UNITS_ATI                           = &H8777???
%GL_BUMP_TEX_UNITS_ATI                               = &H8778???
%GL_DUDV_ATI                                         = &H8779???
%GL_DU8DV8_ATI                                       = &H877A???
%GL_BUMP_ENVMAP_ATI                                  = &H877B???
%GL_BUMP_TARGET_ATI                                  = &H877C???
#ENDIF

#IF NOT %DEF(%GL_ATI_fragment_shader)
%GL_FRAGMENT_SHADER_ATI                              = &H8920???
%GL_REG_0_ATI                                        = &H8921???
%GL_REG_1_ATI                                        = &H8922???
%GL_REG_2_ATI                                        = &H8923???
%GL_REG_3_ATI                                        = &H8924???
%GL_REG_4_ATI                                        = &H8925???
%GL_REG_5_ATI                                        = &H8926???
%GL_REG_6_ATI                                        = &H8927???
%GL_REG_7_ATI                                        = &H8928???
%GL_REG_8_ATI                                        = &H8929???
%GL_REG_9_ATI                                        = &H892A???
%GL_REG_10_ATI                                       = &H892B???
%GL_REG_11_ATI                                       = &H892C???
%GL_REG_12_ATI                                       = &H892D???
%GL_REG_13_ATI                                       = &H892E???
%GL_REG_14_ATI                                       = &H892F???
%GL_REG_15_ATI                                       = &H8930???
%GL_REG_16_ATI                                       = &H8931???
%GL_REG_17_ATI                                       = &H8932???
%GL_REG_18_ATI                                       = &H8933???
%GL_REG_19_ATI                                       = &H8934???
%GL_REG_20_ATI                                       = &H8935???
%GL_REG_21_ATI                                       = &H8936???
%GL_REG_22_ATI                                       = &H8937???
%GL_REG_23_ATI                                       = &H8938???
%GL_REG_24_ATI                                       = &H8939???
%GL_REG_25_ATI                                       = &H893A???
%GL_REG_26_ATI                                       = &H893B???
%GL_REG_27_ATI                                       = &H893C???
%GL_REG_28_ATI                                       = &H893D???
%GL_REG_29_ATI                                       = &H893E???
%GL_REG_30_ATI                                       = &H893F???
%GL_REG_31_ATI                                       = &H8940???
%GL_CON_0_ATI                                        = &H8941???
%GL_CON_1_ATI                                        = &H8942???
%GL_CON_2_ATI                                        = &H8943???
%GL_CON_3_ATI                                        = &H8944???
%GL_CON_4_ATI                                        = &H8945???
%GL_CON_5_ATI                                        = &H8946???
%GL_CON_6_ATI                                        = &H8947???
%GL_CON_7_ATI                                        = &H8948???
%GL_CON_8_ATI                                        = &H8949???
%GL_CON_9_ATI                                        = &H894A???
%GL_CON_10_ATI                                       = &H894B???
%GL_CON_11_ATI                                       = &H894C???
%GL_CON_12_ATI                                       = &H894D???
%GL_CON_13_ATI                                       = &H894E???
%GL_CON_14_ATI                                       = &H894F???
%GL_CON_15_ATI                                       = &H8950???
%GL_CON_16_ATI                                       = &H8951???
%GL_CON_17_ATI                                       = &H8952???
%GL_CON_18_ATI                                       = &H8953???
%GL_CON_19_ATI                                       = &H8954???
%GL_CON_20_ATI                                       = &H8955???
%GL_CON_21_ATI                                       = &H8956???
%GL_CON_22_ATI                                       = &H8957???
%GL_CON_23_ATI                                       = &H8958???
%GL_CON_24_ATI                                       = &H8959???
%GL_CON_25_ATI                                       = &H895A???
%GL_CON_26_ATI                                       = &H895B???
%GL_CON_27_ATI                                       = &H895C???
%GL_CON_28_ATI                                       = &H895D???
%GL_CON_29_ATI                                       = &H895E???
%GL_CON_30_ATI                                       = &H895F???
%GL_CON_31_ATI                                       = &H8960???
%GL_MOV_ATI                                          = &H8961???
%GL_ADD_ATI                                          = &H8963???
%GL_MUL_ATI                                          = &H8964???
%GL_SUB_ATI                                          = &H8965???
%GL_DOT3_ATI                                         = &H8966???
%GL_DOT4_ATI                                         = &H8967???
%GL_MAD_ATI                                          = &H8968???
%GL_LERP_ATI                                         = &H8969???
%GL_CND_ATI                                          = &H896A???
%GL_CND0_ATI                                         = &H896B???
%GL_DOT2_ADD_ATI                                     = &H896C???
%GL_SECONDARY_INTERPOLATOR_ATI                       = &H896D???
%GL_NUM_FRAGMENT_REGISTERS_ATI                       = &H896E???
%GL_NUM_FRAGMENT_CONSTANTS_ATI                       = &H896F???
%GL_NUM_PASSES_ATI                                   = &H8970???
%GL_NUM_INSTRUCTIONS_PER_PASS_ATI                    = &H8971???
%GL_NUM_INSTRUCTIONS_TOTAL_ATI                       = &H8972???
%GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI            = &H8973???
%GL_NUM_LOOPBACK_COMPONENTS_ATI                      = &H8974???
%GL_COLOR_ALPHA_PAIRING_ATI                          = &H8975???
%GL_SWIZZLE_STR_ATI                                  = &H8976???
%GL_SWIZZLE_STQ_ATI                                  = &H8977???
%GL_SWIZZLE_STR_DR_ATI                               = &H8978???
%GL_SWIZZLE_STQ_DQ_ATI                               = &H8979???
%GL_SWIZZLE_STRQ_ATI                                 = &H897A???
%GL_SWIZZLE_STRQ_DQ_ATI                              = &H897B???
%GL_RED_BIT_ATI                                      = &H00000001???
%GL_GREEN_BIT_ATI                                    = &H00000002???
%GL_BLUE_BIT_ATI                                     = &H00000004???
%GL_2X_BIT_ATI                                       = &H00000001???
%GL_4X_BIT_ATI                                       = &H00000002???
%GL_8X_BIT_ATI                                       = &H00000004???
%GL_HALF_BIT_ATI                                     = &H00000008???
%GL_QUARTER_BIT_ATI                                  = &H00000010???
%GL_EIGHTH_BIT_ATI                                   = &H00000020???
%GL_SATURATE_BIT_ATI                                 = &H00000040???
%GL_COMP_BIT_ATI                                     = &H00000002???
%GL_NEGATE_BIT_ATI                                   = &H00000004???
%GL_BIAS_BIT_ATI                                     = &H00000008???
#ENDIF

#IF NOT %DEF(%GL_ATI_pn_triangles)
%GL_PN_TRIANGLES_ATI                                 = &H87F0???
%GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI           = &H87F1???
%GL_PN_TRIANGLES_POINT_MODE_ATI                      = &H87F2???
%GL_PN_TRIANGLES_NORMAL_MODE_ATI                     = &H87F3???
%GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI               = &H87F4???
%GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI               = &H87F5???
%GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI                = &H87F6???
%GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI              = &H87F7???
%GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI           = &H87F8???
#ENDIF

#IF NOT %DEF(%GL_ATI_vertex_array_object)
%GL_STATIC_ATI                                       = &H8760???
%GL_DYNAMIC_ATI                                      = &H8761???
%GL_PRESERVE_ATI                                     = &H8762???
%GL_DISCARD_ATI                                      = &H8763???
%GL_OBJECT_BUFFER_SIZE_ATI                           = &H8764???
%GL_OBJECT_BUFFER_USAGE_ATI                          = &H8765???
%GL_ARRAY_OBJECT_BUFFER_ATI                          = &H8766???
%GL_ARRAY_OBJECT_OFFSET_ATI                          = &H8767???
#ENDIF

#IF NOT %DEF(%GL_EXT_vertex_shader)
%GL_VERTEX_SHADER_EXT                                = &H8780???
%GL_VERTEX_SHADER_BINDING_EXT                        = &H8781???
%GL_OP_INDEX_EXT                                     = &H8782???
%GL_OP_NEGATE_EXT                                    = &H8783???
%GL_OP_DOT3_EXT                                      = &H8784???
%GL_OP_DOT4_EXT                                      = &H8785???
%GL_OP_MUL_EXT                                       = &H8786???
%GL_OP_ADD_EXT                                       = &H8787???
%GL_OP_MADD_EXT                                      = &H8788???
%GL_OP_FRAC_EXT                                      = &H8789???
%GL_OP_MAX_EXT                                       = &H878A???
%GL_OP_MIN_EXT                                       = &H878B???
%GL_OP_SET_GE_EXT                                    = &H878C???
%GL_OP_SET_LT_EXT                                    = &H878D???
%GL_OP_CLAMP_EXT                                     = &H878E???
%GL_OP_FLOOR_EXT                                     = &H878F???
%GL_OP_ROUND_EXT                                     = &H8790???
%GL_OP_EXP_BASE_2_EXT                                = &H8791???
%GL_OP_LOG_BASE_2_EXT                                = &H8792???
%GL_OP_POWER_EXT                                     = &H8793???
%GL_OP_RECIP_EXT                                     = &H8794???
%GL_OP_RECIP_SQRT_EXT                                = &H8795???
%GL_OP_SUB_EXT                                       = &H8796???
%GL_OP_CROSS_PRODUCT_EXT                             = &H8797???
%GL_OP_MULTIPLY_MATRIX_EXT                           = &H8798???
%GL_OP_MOV_EXT                                       = &H8799???
%GL_OUTPUT_VERTEX_EXT                                = &H879A???
%GL_OUTPUT_COLOR0_EXT                                = &H879B???
%GL_OUTPUT_COLOR1_EXT                                = &H879C???
%GL_OUTPUT_TEXTURE_COORD0_EXT                        = &H879D???
%GL_OUTPUT_TEXTURE_COORD1_EXT                        = &H879E???
%GL_OUTPUT_TEXTURE_COORD2_EXT                        = &H879F???
%GL_OUTPUT_TEXTURE_COORD3_EXT                        = &H87A0???
%GL_OUTPUT_TEXTURE_COORD4_EXT                        = &H87A1???
%GL_OUTPUT_TEXTURE_COORD5_EXT                        = &H87A2???
%GL_OUTPUT_TEXTURE_COORD6_EXT                        = &H87A3???
%GL_OUTPUT_TEXTURE_COORD7_EXT                        = &H87A4???
%GL_OUTPUT_TEXTURE_COORD8_EXT                        = &H87A5???
%GL_OUTPUT_TEXTURE_COORD9_EXT                        = &H87A6???
%GL_OUTPUT_TEXTURE_COORD10_EXT                       = &H87A7???
%GL_OUTPUT_TEXTURE_COORD11_EXT                       = &H87A8???
%GL_OUTPUT_TEXTURE_COORD12_EXT                       = &H87A9???
%GL_OUTPUT_TEXTURE_COORD13_EXT                       = &H87AA???
%GL_OUTPUT_TEXTURE_COORD14_EXT                       = &H87AB???
%GL_OUTPUT_TEXTURE_COORD15_EXT                       = &H87AC???
%GL_OUTPUT_TEXTURE_COORD16_EXT                       = &H87AD???
%GL_OUTPUT_TEXTURE_COORD17_EXT                       = &H87AE???
%GL_OUTPUT_TEXTURE_COORD18_EXT                       = &H87AF???
%GL_OUTPUT_TEXTURE_COORD19_EXT                       = &H87B0???
%GL_OUTPUT_TEXTURE_COORD20_EXT                       = &H87B1???
%GL_OUTPUT_TEXTURE_COORD21_EXT                       = &H87B2???
%GL_OUTPUT_TEXTURE_COORD22_EXT                       = &H87B3???
%GL_OUTPUT_TEXTURE_COORD23_EXT                       = &H87B4???
%GL_OUTPUT_TEXTURE_COORD24_EXT                       = &H87B5???
%GL_OUTPUT_TEXTURE_COORD25_EXT                       = &H87B6???
%GL_OUTPUT_TEXTURE_COORD26_EXT                       = &H87B7???
%GL_OUTPUT_TEXTURE_COORD27_EXT                       = &H87B8???
%GL_OUTPUT_TEXTURE_COORD28_EXT                       = &H87B9???
%GL_OUTPUT_TEXTURE_COORD29_EXT                       = &H87BA???
%GL_OUTPUT_TEXTURE_COORD30_EXT                       = &H87BB???
%GL_OUTPUT_TEXTURE_COORD31_EXT                       = &H87BC???
%GL_OUTPUT_FOG_EXT                                   = &H87BD???
%GL_SCALAR_EXT                                       = &H87BE???
%GL_VECTOR_EXT                                       = &H87BF???
%GL_MATRIX_EXT                                       = &H87C0???
%GL_VARIANT_EXT                                      = &H87C1???
%GL_INVARIANT_EXT                                    = &H87C2???
%GL_LOCAL_CONSTANT_EXT                               = &H87C3???
%GL_LOCAL_EXT                                        = &H87C4???
%GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT               = &H87C5???
%GL_MAX_VERTEX_SHADER_VARIANTS_EXT                   = &H87C6???
%GL_MAX_VERTEX_SHADER_INVARIANTS_EXT                 = &H87C7???
%GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT            = &H87C8???
%GL_MAX_VERTEX_SHADER_LOCALS_EXT                     = &H87C9???
%GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT     = &H87CA???
%GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT         = &H87CB???
%GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT  = &H87CC???
%GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT       = &H87CD???
%GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT           = &H87CE???
%GL_VERTEX_SHADER_INSTRUCTIONS_EXT                   = &H87CF???
%GL_VERTEX_SHADER_VARIANTS_EXT                       = &H87D0???
%GL_VERTEX_SHADER_INVARIANTS_EXT                     = &H87D1???
%GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT                = &H87D2???
%GL_VERTEX_SHADER_LOCALS_EXT                         = &H87D3???
%GL_VERTEX_SHADER_OPTIMIZED_EXT                      = &H87D4???
%GL_X_EXT                                            = &H87D5???
%GL_Y_EXT                                            = &H87D6???
%GL_Z_EXT                                            = &H87D7???
%GL_W_EXT                                            = &H87D8???
%GL_NEGATIVE_X_EXT                                   = &H87D9???
%GL_NEGATIVE_Y_EXT                                   = &H87DA???
%GL_NEGATIVE_Z_EXT                                   = &H87DB???
%GL_NEGATIVE_W_EXT                                   = &H87DC???
%GL_ZERO_EXT                                         = &H87DD???
%GL_ONE_EXT                                          = &H87DE???
%GL_NEGATIVE_ONE_EXT                                 = &H87DF???
%GL_NORMALIZED_RANGE_EXT                             = &H87E0???
%GL_FULL_RANGE_EXT                                   = &H87E1???
%GL_CURRENT_VERTEX_EXT                               = &H87E2???
%GL_MVP_MATRIX_EXT                                   = &H87E3???
%GL_VARIANT_VALUE_EXT                                = &H87E4???
%GL_VARIANT_DATATYPE_EXT                             = &H87E5???
%GL_VARIANT_ARRAY_STRIDE_EXT                         = &H87E6???
%GL_VARIANT_ARRAY_TYPE_EXT                           = &H87E7???
%GL_VARIANT_ARRAY_EXT                                = &H87E8???
%GL_VARIANT_ARRAY_POINTER_EXT                        = &H87E9???
%GL_INVARIANT_VALUE_EXT                              = &H87EA???
%GL_INVARIANT_DATATYPE_EXT                           = &H87EB???
%GL_LOCAL_CONSTANT_VALUE_EXT                         = &H87EC???
%GL_LOCAL_CONSTANT_DATATYPE_EXT                      = &H87ED???
#ENDIF

#IF NOT %DEF(%GL_ATI_vertex_streams)
%GL_MAX_VERTEX_STREAMS_ATI                           = &H876B???
%GL_VERTEX_STREAM0_ATI                               = &H876C???
%GL_VERTEX_STREAM1_ATI                               = &H876D???
%GL_VERTEX_STREAM2_ATI                               = &H876E???
%GL_VERTEX_STREAM3_ATI                               = &H876F???
%GL_VERTEX_STREAM4_ATI                               = &H8770???
%GL_VERTEX_STREAM5_ATI                               = &H8771???
%GL_VERTEX_STREAM6_ATI                               = &H8772???
%GL_VERTEX_STREAM7_ATI                               = &H8773???
%GL_VERTEX_SOURCE_ATI                                = &H8774???
#ENDIF

#IF NOT %DEF(%GL_ATI_element_array)
%GL_ELEMENT_ARRAY_ATI                                = &H8768???
%GL_ELEMENT_ARRAY_TYPE_ATI                           = &H8769???
%GL_ELEMENT_ARRAY_POINTER_ATI                        = &H876A???
#ENDIF

#IF NOT %DEF(%GL_SUN_mesh_array)
%GL_QUAD_MESH_SUN                                    = &H8614???
%GL_TRIANGLE_MESH_SUN                                = &H8615???
#ENDIF

#IF NOT %DEF(%GL_SUN_slice_accum)
%GL_SLICE_ACCUM_SUN                                  = &H85CC???
#ENDIF

#IF NOT %DEF(%GL_NV_multisample_filter_hint)
%GL_MULTISAMPLE_FILTER_HINT_NV                       = &H8534???
#ENDIF

#IF NOT %DEF(%GL_NV_depth_clamp)
%GL_DEPTH_CLAMP_NV                                   = &H864F???
#ENDIF

#IF NOT %DEF(%GL_NV_occlusion_query)
%GL_PIXEL_COUNTER_BITS_NV                            = &H8864???
%GL_CURRENT_OCCLUSION_QUERY_ID_NV                    = &H8865???
%GL_PIXEL_COUNT_NV                                   = &H8866???
%GL_PIXEL_COUNT_AVAILABLE_NV                         = &H8867???
#ENDIF

#IF NOT %DEF(%GL_NV_point_sprite)
%GL_POINT_SPRITE_NV                                  = &H8861???
%GL_COORD_REPLACE_NV                                 = &H8862???
%GL_POINT_SPRITE_R_MODE_NV                           = &H8863???
#ENDIF

#IF NOT %DEF(%GL_NV_texture_shader3)
%GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV                  = &H8850???
%GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV            = &H8851???
%GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV           = &H8852???
%GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV     = &H8853???
%GL_OFFSET_HILO_TEXTURE_2D_NV                        = &H8854???
%GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV                 = &H8855???
%GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV             = &H8856???
%GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV      = &H8857???
%GL_DEPENDENT_HILO_TEXTURE_2D_NV                     = &H8858???
%GL_DEPENDENT_RGB_TEXTURE_3D_NV                      = &H8859???
%GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV                = &H885A???
%GL_DOT_PRODUCT_PASS_THROUGH_NV                      = &H885B???
%GL_DOT_PRODUCT_TEXTURE_1D_NV                        = &H885C???
%GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV              = &H885D???
%GL_HILO8_NV                                         = &H885E???
%GL_SIGNED_HILO8_NV                                  = &H885F???
%GL_FORCE_BLUE_TO_ONE_NV                             = &H8860???
#ENDIF

#IF NOT %DEF(%GL_NV_vertex_program1_1)
#ENDIF

#IF NOT %DEF(%GL_EXT_shadow_funcs)
#ENDIF

#IF NOT %DEF(%GL_EXT_stencil_two_side)
%GL_STENCIL_TEST_TWO_SIDE_EXT                        = &H8910???
%GL_ACTIVE_STENCIL_FACE_EXT                          = &H8911???
#ENDIF

#IF NOT %DEF(%GL_ATI_text_fragment_shader)
%GL_TEXT_FRAGMENT_SHADER_ATI                         = &H8200???
#ENDIF

#IF NOT %DEF(%GL_APPLE_client_storage)
%GL_UNPACK_CLIENT_STORAGE_APPLE                      = &H85B2???
#ENDIF

#IF NOT %DEF(%GL_APPLE_element_array)
%GL_ELEMENT_ARRAY_APPLE                              = &H8768???
%GL_ELEMENT_ARRAY_TYPE_APPLE                         = &H8769???
%GL_ELEMENT_ARRAY_POINTER_APPLE                      = &H876A???
#ENDIF

#IF NOT %DEF(%GL_APPLE_fence)
%GL_DRAW_PIXELS_APPLE                                = &H8A0A???
%GL_FENCE_APPLE                                      = &H8A0B???
#ENDIF

#IF NOT %DEF(%GL_APPLE_vertex_array_object)
%GL_VERTEX_ARRAY_BINDING_APPLE                       = &H85B5???
#ENDIF

#IF NOT %DEF(%GL_APPLE_vertex_array_range)
%GL_VERTEX_ARRAY_RANGE_APPLE                         = &H851D???
%GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE                  = &H851E???
%GL_VERTEX_ARRAY_STORAGE_HINT_APPLE                  = &H851F???
%GL_VERTEX_ARRAY_RANGE_POINTER_APPLE                 = &H8521???
%GL_STORAGE_CACHED_APPLE                             = &H85BE???
%GL_STORAGE_SHARED_APPLE                             = &H85BF???
#ENDIF

#IF NOT %DEF(%GL_APPLE_ycbcr_422)
%GL_YCBCR_422_APPLE                                  = &H85B9???
%GL_UNSIGNED_SHORT_8_8_APPLE                         = &H85BA???
%GL_UNSIGNED_SHORT_8_8_REV_APPLE                     = &H85BB???
#ENDIF

#IF NOT %DEF(%GL_S3_s3tc)
%GL_RGB_S3TC                                         = &H83A0???
%GL_RGB4_S3TC                                        = &H83A1???
%GL_RGBA_S3TC                                        = &H83A2???
%GL_RGBA4_S3TC                                       = &H83A3???
#ENDIF

#IF NOT %DEF(%GL_ATI_draw_buffers)
%GL_MAX_DRAW_BUFFERS_ATI                             = &H8824???
%GL_DRAW_BUFFER0_ATI                                 = &H8825???
%GL_DRAW_BUFFER1_ATI                                 = &H8826???
%GL_DRAW_BUFFER2_ATI                                 = &H8827???
%GL_DRAW_BUFFER3_ATI                                 = &H8828???
%GL_DRAW_BUFFER4_ATI                                 = &H8829???
%GL_DRAW_BUFFER5_ATI                                 = &H882A???
%GL_DRAW_BUFFER6_ATI                                 = &H882B???
%GL_DRAW_BUFFER7_ATI                                 = &H882C???
%GL_DRAW_BUFFER8_ATI                                 = &H882D???
%GL_DRAW_BUFFER9_ATI                                 = &H882E???
%GL_DRAW_BUFFER10_ATI                                = &H882F???
%GL_DRAW_BUFFER11_ATI                                = &H8830???
%GL_DRAW_BUFFER12_ATI                                = &H8831???
%GL_DRAW_BUFFER13_ATI                                = &H8832???
%GL_DRAW_BUFFER14_ATI                                = &H8833???
%GL_DRAW_BUFFER15_ATI                                = &H8834???
#ENDIF

#IF NOT %DEF(%GL_ATI_pixel_format_float)
%GL_TYPE_RGBA_FLOAT_ATI                              = &H8820???
%GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI                  = &H8835???
#ENDIF

#IF NOT %DEF(%GL_ATI_texture_env_combine3)
%GL_MODULATE_ADD_ATI                                 = &H8744???
%GL_MODULATE_SIGNED_ADD_ATI                          = &H8745???
%GL_MODULATE_SUBTRACT_ATI                            = &H8746???
#ENDIF

#IF NOT %DEF(%GL_ATI_texture_float)
%GL_RGBA_FLOAT32_ATI                                 = &H8814???
%GL_RGB_FLOAT32_ATI                                  = &H8815???
%GL_ALPHA_FLOAT32_ATI                                = &H8816???
%GL_INTENSITY_FLOAT32_ATI                            = &H8817???
%GL_LUMINANCE_FLOAT32_ATI                            = &H8818???
%GL_LUMINANCE_ALPHA_FLOAT32_ATI                      = &H8819???
%GL_RGBA_FLOAT16_ATI                                 = &H881A???
%GL_RGB_FLOAT16_ATI                                  = &H881B???
%GL_ALPHA_FLOAT16_ATI                                = &H881C???
%GL_INTENSITY_FLOAT16_ATI                            = &H881D???
%GL_LUMINANCE_FLOAT16_ATI                            = &H881E???
%GL_LUMINANCE_ALPHA_FLOAT16_ATI                      = &H881F???
#ENDIF

#IF NOT %DEF(%GL_NV_float_buffer)
%GL_FLOAT_R_NV                                       = &H8880???
%GL_FLOAT_RG_NV                                      = &H8881???
%GL_FLOAT_RGB_NV                                     = &H8882???
%GL_FLOAT_RGBA_NV                                    = &H8883???
%GL_FLOAT_R16_NV                                     = &H8884???
%GL_FLOAT_R32_NV                                     = &H8885???
%GL_FLOAT_RG16_NV                                    = &H8886???
%GL_FLOAT_RG32_NV                                    = &H8887???
%GL_FLOAT_RGB16_NV                                   = &H8888???
%GL_FLOAT_RGB32_NV                                   = &H8889???
%GL_FLOAT_RGBA16_NV                                  = &H888A???
%GL_FLOAT_RGBA32_NV                                  = &H888B???
%GL_TEXTURE_FLOAT_COMPONENTS_NV                      = &H888C???
%GL_FLOAT_CLEAR_COLOR_VALUE_NV                       = &H888D???
%GL_FLOAT_RGBA_MODE_NV                               = &H888E???
#ENDIF

#IF NOT %DEF(%GL_NV_fragment_program)
%GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV         = &H8868???
%GL_FRAGMENT_PROGRAM_NV                              = &H8870???
%GL_MAX_TEXTURE_COORDS_NV                            = &H8871???
%GL_MAX_TEXTURE_IMAGE_UNITS_NV                       = &H8872???
%GL_FRAGMENT_PROGRAM_BINDING_NV                      = &H8873???
%GL_PROGRAM_ERROR_STRING_NV                          = &H8874???
#ENDIF

#IF NOT %DEF(%GL_NV_half_float)
%GL_HALF_FLOAT_NV                                    = &H140B???
#ENDIF

#IF NOT %DEF(%GL_NV_pixel_data_range)
%GL_WRITE_PIXEL_DATA_RANGE_NV                        = &H8878???
%GL_READ_PIXEL_DATA_RANGE_NV                         = &H8879???
%GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV                 = &H887A???
%GL_READ_PIXEL_DATA_RANGE_LENGTH_NV                  = &H887B???
%GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV                = &H887C???
%GL_READ_PIXEL_DATA_RANGE_POINTER_NV                 = &H887D???
#ENDIF

#IF NOT %DEF(%GL_NV_primitive_restart)
%GL_PRIMITIVE_RESTART_NV                             = &H8558???
%GL_PRIMITIVE_RESTART_INDEX_NV                       = &H8559???
#ENDIF

#IF NOT %DEF(%GL_NV_texture_expand_normal)
%GL_TEXTURE_UNSIGNED_REMAP_MODE_NV                   = &H888F???
#ENDIF

#IF NOT %DEF(%GL_NV_vertex_program2)
#ENDIF

#IF NOT %DEF(%GL_ATI_map_object_buffer)
#ENDIF

#IF NOT %DEF(%GL_ATI_separate_stencil)
%GL_STENCIL_BACK_FUNC_ATI                            = &H8800???
%GL_STENCIL_BACK_FAIL_ATI                            = &H8801???
%GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI                 = &H8802???
%GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI                 = &H8803???
#ENDIF

#IF NOT %DEF(%GL_ATI_vertex_attrib_array_object)
#ENDIF

#IF NOT %DEF(%GL_OES_read_format)
%GL_IMPLEMENTATION_COLOR_READ_TYPE_OES               = &H8B9A???
%GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES             = &H8B9B???
#ENDIF

#IF NOT %DEF(%GL_EXT_depth_bounds_test)
%GL_DEPTH_BOUNDS_TEST_EXT                            = &H8890???
%GL_DEPTH_BOUNDS_EXT                                 = &H8891???
#ENDIF

#IF NOT %DEF(%GL_EXT_texture_mirror_clamp)
%GL_MIRROR_CLAMP_EXT                                 = &H8742???
%GL_MIRROR_CLAMP_TO_EDGE_EXT                         = &H8743???
%GL_MIRROR_CLAMP_TO_BORDER_EXT                       = &H8912???
#ENDIF

#IF NOT %DEF(%GL_EXT_blend_equation_separate)
%GL_BLEND_EQUATION_RGB_EXT                           = %GL_BLEND_EQUATION
%GL_BLEND_EQUATION_ALPHA_EXT                         = &H883D???
#ENDIF

#IF NOT %DEF(%GL_MESA_pack_invert)
%GL_PACK_INVERT_MESA                                 = &H8758???
#ENDIF

#IF NOT %DEF(%GL_MESA_ycbcr_texture)
%GL_UNSIGNED_SHORT_8_8_MESA                          = &H85BA???
%GL_UNSIGNED_SHORT_8_8_REV_MESA                      = &H85BB???
%GL_YCBCR_MESA                                       = &H8757???
#ENDIF

#IF NOT %DEF(%GL_EXT_pixel_buffer_object)
%GL_PIXEL_PACK_BUFFER_EXT                            = &H88EB???
%GL_PIXEL_UNPACK_BUFFER_EXT                          = &H88EC???
%GL_PIXEL_PACK_BUFFER_BINDING_EXT                    = &H88ED???
%GL_PIXEL_UNPACK_BUFFER_BINDING_EXT                  = &H88EF???
#ENDIF

#IF NOT %DEF(%GL_NV_fragment_program_option)
#ENDIF

#IF NOT %DEF(%GL_NV_fragment_program2)
%GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV                 = &H88F4???
%GL_MAX_PROGRAM_CALL_DEPTH_NV                        = &H88F5???
%GL_MAX_PROGRAM_IF_DEPTH_NV                          = &H88F6???
%GL_MAX_PROGRAM_LOOP_DEPTH_NV                        = &H88F7???
%GL_MAX_PROGRAM_LOOP_COUNT_NV                        = &H88F8???
#ENDIF

#IF NOT %DEF(%GL_NV_vertex_program2_option)
' /* reuse %GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
' /* reuse %GL_MAX_PROGRAM_CALL_DEPTH_NV
#ENDIF

#IF NOT %DEF(%GL_NV_vertex_program3)
' /* reuse %GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
#ENDIF

#IF NOT %DEF(%GL_EXT_framebuffer_object)
%GL_INVALID_FRAMEBUFFER_OPERATION_EXT                = &H0506???
%GL_MAX_RENDERBUFFER_SIZE_EXT                        = &H84E8???
%GL_FRAMEBUFFER_BINDING_EXT                          = &H8CA6???
%GL_RENDERBUFFER_BINDING_EXT                         = &H8CA7???
%GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT           = &H8CD0???
%GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT           = &H8CD1???
%GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT         = &H8CD2???
%GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = &H8CD3???
%GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT    = &H8CD4???
%GL_FRAMEBUFFER_COMPLETE_EXT                         = &H8CD5???
%GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT            = &H8CD6???
%GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT    = &H8CD7???
%GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT            = &H8CD9???
%GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT               = &H8CDA???
%GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT           = &H8CDB???
%GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT           = &H8CDC???
%GL_FRAMEBUFFER_UNSUPPORTED_EXT                      = &H8CDD???
%GL_MAX_COLOR_ATTACHMENTS_EXT                        = &H8CDF???
%GL_COLOR_ATTACHMENT0_EXT                            = &H8CE0???
%GL_COLOR_ATTACHMENT1_EXT                            = &H8CE1???
%GL_COLOR_ATTACHMENT2_EXT                            = &H8CE2???
%GL_COLOR_ATTACHMENT3_EXT                            = &H8CE3???
%GL_COLOR_ATTACHMENT4_EXT                            = &H8CE4???
%GL_COLOR_ATTACHMENT5_EXT                            = &H8CE5???
%GL_COLOR_ATTACHMENT6_EXT                            = &H8CE6???
%GL_COLOR_ATTACHMENT7_EXT                            = &H8CE7???
%GL_COLOR_ATTACHMENT8_EXT                            = &H8CE8???
%GL_COLOR_ATTACHMENT9_EXT                            = &H8CE9???
%GL_COLOR_ATTACHMENT10_EXT                           = &H8CEA???
%GL_COLOR_ATTACHMENT11_EXT                           = &H8CEB???
%GL_COLOR_ATTACHMENT12_EXT                           = &H8CEC???
%GL_COLOR_ATTACHMENT13_EXT                           = &H8CED???
%GL_COLOR_ATTACHMENT14_EXT                           = &H8CEE???
%GL_COLOR_ATTACHMENT15_EXT                           = &H8CEF???
%GL_DEPTH_ATTACHMENT_EXT                             = &H8D00???
%GL_STENCIL_ATTACHMENT_EXT                           = &H8D20???
%GL_FRAMEBUFFER_EXT                                  = &H8D40???
%GL_RENDERBUFFER_EXT                                 = &H8D41???
%GL_RENDERBUFFER_WIDTH_EXT                           = &H8D42???
%GL_RENDERBUFFER_HEIGHT_EXT                          = &H8D43???
%GL_RENDERBUFFER_INTERNAL_FORMAT_EXT                 = &H8D44???
%GL_STENCIL_INDEX1_EXT                               = &H8D46???
%GL_STENCIL_INDEX4_EXT                               = &H8D47???
%GL_STENCIL_INDEX8_EXT                               = &H8D48???
%GL_STENCIL_INDEX16_EXT                              = &H8D49???
%GL_RENDERBUFFER_RED_SIZE_EXT                        = &H8D50???
%GL_RENDERBUFFER_GREEN_SIZE_EXT                      = &H8D51???
%GL_RENDERBUFFER_BLUE_SIZE_EXT                       = &H8D52???
%GL_RENDERBUFFER_ALPHA_SIZE_EXT                      = &H8D53???
%GL_RENDERBUFFER_DEPTH_SIZE_EXT                      = &H8D54???
%GL_RENDERBUFFER_STENCIL_SIZE_EXT                    = &H8D55???
#ENDIF

#IF NOT %DEF(%GL_GREMEDY_string_marker)
#ENDIF

#IF NOT %DEF(%GL_EXT_packed_depth_stencil)
%GL_DEPTH_STENCIL_EXT                                = &H84F9???
%GL_UNSIGNED_INT_24_8_EXT                            = &H84FA???
%GL_DEPTH24_STENCIL8_EXT                             = &H88F0???
%GL_TEXTURE_STENCIL_SIZE_EXT                         = &H88F1???
#ENDIF

#IF NOT %DEF(%GL_EXT_stencil_clear_tag)
%GL_STENCIL_TAG_BITS_EXT                             = &H88F2???
%GL_STENCIL_CLEAR_TAG_VALUE_EXT                      = &H88F3???
#ENDIF

#IF NOT %DEF(%GL_EXT_texture_sRGB)
%GL_SRGB_EXT                                         = &H8C40???
%GL_SRGB8_EXT                                        = &H8C41???
%GL_SRGB_ALPHA_EXT                                   = &H8C42???
%GL_SRGB8_ALPHA8_EXT                                 = &H8C43???
%GL_SLUMINANCE_ALPHA_EXT                             = &H8C44???
%GL_SLUMINANCE8_ALPHA8_EXT                           = &H8C45???
%GL_SLUMINANCE_EXT                                   = &H8C46???
%GL_SLUMINANCE8_EXT                                  = &H8C47???
%GL_COMPRESSED_SRGB_EXT                              = &H8C48???
%GL_COMPRESSED_SRGB_ALPHA_EXT                        = &H8C49???
%GL_COMPRESSED_SLUMINANCE_EXT                        = &H8C4A???
%GL_COMPRESSED_SLUMINANCE_ALPHA_EXT                  = &H8C4B???
%GL_COMPRESSED_SRGB_S3TC_DXT1_EXT                    = &H8C4C???
%GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT              = &H8C4D???
%GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT              = &H8C4E???
%GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT              = &H8C4F???
#ENDIF

#IF NOT %DEF(%GL_EXT_framebuffer_blit)
%GL_READ_FRAMEBUFFER_EXT                             = &H8CA8???
%GL_DRAW_FRAMEBUFFER_EXT                             = &H8CA9???
%GL_READ_FRAMEBUFFER_BINDING_EXT                     = %GL_FRAMEBUFFER_BINDING_EXT
%GL_DRAW_FRAMEBUFFER_BINDING_EXT                     = &H8CAA???
#ENDIF

#IF NOT %DEF(%GL_EXT_framebuffer_multisample)
%GL_RENDERBUFFER_SAMPLES_EXT                         = &H8CAB???
%GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT           = &H8D56???
%GL_MAX_SAMPLES_EXT                                  = &H8D57???
#ENDIF

#IF NOT %DEF(%GL_MESAX_texture_stack)
%GL_TEXTURE_1D_STACK_MESAX                           = &H8759???
%GL_TEXTURE_2D_STACK_MESAX                           = &H875A???
%GL_PROXY_TEXTURE_1D_STACK_MESAX                     = &H875B???
%GL_PROXY_TEXTURE_2D_STACK_MESAX                     = &H875C???
%GL_TEXTURE_1D_STACK_BINDING_MESAX                   = &H875D???
%GL_TEXTURE_2D_STACK_BINDING_MESAX                   = &H875E???
#ENDIF

#IF NOT %DEF(%GL_EXT_timer_query)
%GL_TIME_ELAPSED_EXT                                 = &H88BF???
#ENDIF

#IF NOT %DEF(%GL_EXT_gpu_program_parameters)
#ENDIF

#IF NOT %DEF(%GL_APPLE_flush_buffer_range)
%GL_BUFFER_SERIALIZED_MODIFY_APPLE                   = &H8A12???
%GL_BUFFER_FLUSHING_UNMAP_APPLE                      = &H8A13???
#ENDIF

#IF NOT %DEF(%GL_NV_gpu_program4)
%GL_MIN_PROGRAM_TEXEL_OFFSET_NV                      = &H8904???
%GL_MAX_PROGRAM_TEXEL_OFFSET_NV                      = &H8905???
%GL_PROGRAM_ATTRIB_COMPONENTS_NV                     = &H8906???
%GL_PROGRAM_RESULT_COMPONENTS_NV                     = &H8907???
%GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV                 = &H8908???
%GL_MAX_PROGRAM_RESULT_COMPONENTS_NV                 = &H8909???
%GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV                   = &H8DA5???
%GL_MAX_PROGRAM_GENERIC_RESULTS_NV                   = &H8DA6???
#ENDIF

#IF NOT %DEF(%GL_NV_geometry_program4)
%GL_LINES_ADJACENCY_EXT                              = &H000A???
%GL_LINE_STRIP_ADJACENCY_EXT                         = &H000B???
%GL_TRIANGLES_ADJACENCY_EXT                          = &H000C???
%GL_TRIANGLE_STRIP_ADJACENCY_EXT                     = &H000D???
%GL_GEOMETRY_PROGRAM_NV                              = &H8C26???
%GL_MAX_PROGRAM_OUTPUT_VERTICES_NV                   = &H8C27???
%GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV           = &H8C28???
%GL_GEOMETRY_VERTICES_OUT_EXT                        = &H8DDA???
%GL_GEOMETRY_INPUT_TYPE_EXT                          = &H8DDB???
%GL_GEOMETRY_OUTPUT_TYPE_EXT                         = &H8DDC???
%GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT             = &H8C29???
%GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT               = &H8DA7???
%GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT         = &H8DA8???
%GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT           = &H8DA9???
%GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT         = &H8CD4???
%GL_PROGRAM_POINT_SIZE_EXT                           = &H8642???
#ENDIF

#IF NOT %DEF(%GL_EXT_geometry_shader4)
%GL_GEOMETRY_SHADER_EXT                              = &H8DD9???
' /* reuse %GL_GEOMETRY_VERTICES_OUT_EXT
' /* reuse %GL_GEOMETRY_INPUT_TYPE_EXT
' /* reuse %GL_GEOMETRY_OUTPUT_TYPE_EXT
' /* reuse %GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT
%GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT              = &H8DDD???
%GL_MAX_VERTEX_VARYING_COMPONENTS_EXT                = &H8DDE???
%GL_MAX_VARYING_COMPONENTS_EXT                       = &H8B4B???
%GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT              = &H8DDF???
%GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT                 = &H8DE0???
%GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT         = &H8DE1???
' /* reuse %GL_LINES_ADJACENCY_EXT
' /* reuse %GL_LINE_STRIP_ADJACENCY_EXT
' /* reuse %GL_TRIANGLES_ADJACENCY_EXT
' /* reuse %GL_TRIANGLE_STRIP_ADJACENCY_EXT
' /* reuse %GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT
' /* reuse %GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT
' /* reuse %GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT
' /* reuse %GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
' /* reuse %GL_PROGRAM_POINT_SIZE_EXT
#ENDIF

#IF NOT %DEF(%GL_NV_vertex_program4)
%GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV                   = &H88FD???
#ENDIF

#IF NOT %DEF(%GL_EXT_gpu_shader4)
%GL_SAMPLER_1D_ARRAY_EXT                             = &H8DC0???
%GL_SAMPLER_2D_ARRAY_EXT                             = &H8DC1???
%GL_SAMPLER_BUFFER_EXT                               = &H8DC2???
%GL_SAMPLER_1D_ARRAY_SHADOW_EXT                      = &H8DC3???
%GL_SAMPLER_2D_ARRAY_SHADOW_EXT                      = &H8DC4???
%GL_SAMPLER_CUBE_SHADOW_EXT                          = &H8DC5???
%GL_UNSIGNED_INT_VEC2_EXT                            = &H8DC6???
%GL_UNSIGNED_INT_VEC3_EXT                            = &H8DC7???
%GL_UNSIGNED_INT_VEC4_EXT                            = &H8DC8???
%GL_INT_SAMPLER_1D_EXT                               = &H8DC9???
%GL_INT_SAMPLER_2D_EXT                               = &H8DCA???
%GL_INT_SAMPLER_3D_EXT                               = &H8DCB???
%GL_INT_SAMPLER_CUBE_EXT                             = &H8DCC???
%GL_INT_SAMPLER_2D_RECT_EXT                          = &H8DCD???
%GL_INT_SAMPLER_1D_ARRAY_EXT                         = &H8DCE???
%GL_INT_SAMPLER_2D_ARRAY_EXT                         = &H8DCF???
%GL_INT_SAMPLER_BUFFER_EXT                           = &H8DD0???
%GL_UNSIGNED_INT_SAMPLER_1D_EXT                      = &H8DD1???
%GL_UNSIGNED_INT_SAMPLER_2D_EXT                      = &H8DD2???
%GL_UNSIGNED_INT_SAMPLER_3D_EXT                      = &H8DD3???
%GL_UNSIGNED_INT_SAMPLER_CUBE_EXT                    = &H8DD4???
%GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT                 = &H8DD5???
%GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT                = &H8DD6???
%GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT                = &H8DD7???
%GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT                  = &H8DD8???
#ENDIF

#IF NOT %DEF(%GL_EXT_draw_instanced)
#ENDIF

#IF NOT %DEF(%GL_EXT_packed_float)
%GL_R11F_G11F_B10F_EXT                               = &H8C3A???
%GL_UNSIGNED_INT_10F_11F_11F_REV_EXT                 = &H8C3B???
%GL_RGBA_SIGNED_COMPONENTS_EXT                       = &H8C3C???
#ENDIF

#IF NOT %DEF(%GL_EXT_texture_array)
%GL_TEXTURE_1D_ARRAY_EXT                             = &H8C18???
%GL_PROXY_TEXTURE_1D_ARRAY_EXT                       = &H8C19???
%GL_TEXTURE_2D_ARRAY_EXT                             = &H8C1A???
%GL_PROXY_TEXTURE_2D_ARRAY_EXT                       = &H8C1B???
%GL_TEXTURE_BINDING_1D_ARRAY_EXT                     = &H8C1C???
%GL_TEXTURE_BINDING_2D_ARRAY_EXT                     = &H8C1D???
%GL_MAX_ARRAY_TEXTURE_LAYERS_EXT                     = &H88FF???
%GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT                 = &H884E???
' /* reuse %GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
#ENDIF

#IF NOT %DEF(%GL_EXT_texture_buffer_object)
%GL_TEXTURE_BUFFER_EXT                               = &H8C2A???
%GL_MAX_TEXTURE_BUFFER_SIZE_EXT                      = &H8C2B???
%GL_TEXTURE_BINDING_BUFFER_EXT                       = &H8C2C???
%GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT            = &H8C2D???
%GL_TEXTURE_BUFFER_FORMAT_EXT                        = &H8C2E???
#ENDIF

#IF NOT %DEF(%GL_EXT_texture_compression_latc)
%GL_COMPRESSED_LUMINANCE_LATC1_EXT                   = &H8C70???
%GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT            = &H8C71???
%GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT             = &H8C72???
%GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT      = &H8C73???
#ENDIF

#IF NOT %DEF(%GL_EXT_texture_compression_rgtc)
%GL_COMPRESSED_RED_RGTC1_EXT                         = &H8DBB???
%GL_COMPRESSED_SIGNED_RED_RGTC1_EXT                  = &H8DBC???
%GL_COMPRESSED_RED_GREEN_RGTC2_EXT                   = &H8DBD???
%GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT            = &H8DBE???
#ENDIF

#IF NOT %DEF(%GL_EXT_texture_shared_exponent)
%GL_RGB9_E5_EXT                                      = &H8C3D???
%GL_UNSIGNED_INT_5_9_9_9_REV_EXT                     = &H8C3E???
%GL_TEXTURE_SHARED_SIZE_EXT                          = &H8C3F???
#ENDIF

#IF NOT %DEF(%GL_NV_depth_buffer_float)
%GL_DEPTH_COMPONENT32F_NV                            = &H8DAB???
%GL_DEPTH32F_STENCIL8_NV                             = &H8DAC???
%GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV                = &H8DAD???
%GL_DEPTH_BUFFER_FLOAT_MODE_NV                       = &H8DAF???
#ENDIF

#IF NOT %DEF(%GL_NV_fragment_program4)
#ENDIF

#IF NOT %DEF(%GL_NV_framebuffer_multisample_coverage)
%GL_RENDERBUFFER_COVERAGE_SAMPLES_NV                 = &H8CAB???
%GL_RENDERBUFFER_COLOR_SAMPLES_NV                    = &H8E10???
%GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV                = &H8E11???
%GL_MULTISAMPLE_COVERAGE_MODES_NV                    = &H8E12???
#ENDIF

#IF NOT %DEF(%GL_EXT_framebuffer_sRGB)
%GL_FRAMEBUFFER_SRGB_EXT                             = &H8DB9???
%GL_FRAMEBUFFER_SRGB_CAPABLE_EXT                     = &H8DBA???
#ENDIF

#IF NOT %DEF(%GL_NV_geometry_shader4)
#ENDIF

#IF NOT %DEF(%GL_NV_parameter_buffer_object)
%GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV         = &H8DA0???
%GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV             = &H8DA1???
%GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV               = &H8DA2???
%GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV             = &H8DA3???
%GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV             = &H8DA4???
#ENDIF

#IF NOT %DEF(%GL_EXT_draw_buffers2)
#ENDIF

#IF NOT %DEF(%GL_NV_transform_feedback)
%GL_BACK_PRIMARY_COLOR_NV                            = &H8C77???
%GL_BACK_SECONDARY_COLOR_NV                          = &H8C78???
%GL_TEXTURE_COORD_NV                                 = &H8C79???
%GL_CLIP_DISTANCE_NV                                 = &H8C7A???
%GL_VERTEX_ID_NV                                     = &H8C7B???
%GL_PRIMITIVE_ID_NV                                  = &H8C7C???
%GL_GENERIC_ATTRIB_NV                                = &H8C7D???
%GL_TRANSFORM_FEEDBACK_ATTRIBS_NV                    = &H8C7E???
%GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV                = &H8C7F???
%GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV    = &H8C80???
%GL_ACTIVE_VARYINGS_NV                               = &H8C81???
%GL_ACTIVE_VARYING_MAX_LENGTH_NV                     = &H8C82???
%GL_TRANSFORM_FEEDBACK_VARYINGS_NV                   = &H8C83???
%GL_TRANSFORM_FEEDBACK_BUFFER_START_NV               = &H8C84???
%GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV                = &H8C85???
%GL_TRANSFORM_FEEDBACK_RECORD_NV                     = &H8C86???
%GL_PRIMITIVES_GENERATED_NV                          = &H8C87???
%GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV         = &H8C88???
%GL_RASTERIZER_DISCARD_NV                            = &H8C89???
%GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_ATTRIBS_NV    = &H8C8A???
%GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV       = &H8C8B???
%GL_INTERLEAVED_ATTRIBS_NV                           = &H8C8C???
%GL_SEPARATE_ATTRIBS_NV                              = &H8C8D???
%GL_TRANSFORM_FEEDBACK_BUFFER_NV                     = &H8C8E???
%GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV             = &H8C8F???
#ENDIF

#IF NOT %DEF(%GL_EXT_bindable_uniform)
%GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT                 = &H8DE2???
%GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT               = &H8DE3???
%GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT               = &H8DE4???
%GL_MAX_BINDABLE_UNIFORM_SIZE_EXT                    = &H8DED???
%GL_UNIFORM_BUFFER_EXT                               = &H8DEE???
%GL_UNIFORM_BUFFER_BINDING_EXT                       = &H8DEF???
#ENDIF

#IF NOT %DEF(%GL_EXT_texture_integer)
%GL_RGBA32UI_EXT                                     = &H8D70???
%GL_RGB32UI_EXT                                      = &H8D71???
%GL_ALPHA32UI_EXT                                    = &H8D72???
%GL_INTENSITY32UI_EXT                                = &H8D73???
%GL_LUMINANCE32UI_EXT                                = &H8D74???
%GL_LUMINANCE_ALPHA32UI_EXT                          = &H8D75???
%GL_RGBA16UI_EXT                                     = &H8D76???
%GL_RGB16UI_EXT                                      = &H8D77???
%GL_ALPHA16UI_EXT                                    = &H8D78???
%GL_INTENSITY16UI_EXT                                = &H8D79???
%GL_LUMINANCE16UI_EXT                                = &H8D7A???
%GL_LUMINANCE_ALPHA16UI_EXT                          = &H8D7B???
%GL_RGBA8UI_EXT                                      = &H8D7C???
%GL_RGB8UI_EXT                                       = &H8D7D???
%GL_ALPHA8UI_EXT                                     = &H8D7E???
%GL_INTENSITY8UI_EXT                                 = &H8D7F???
%GL_LUMINANCE8UI_EXT                                 = &H8D80???
%GL_LUMINANCE_ALPHA8UI_EXT                           = &H8D81???
%GL_RGBA32I_EXT                                      = &H8D82???
%GL_RGB32I_EXT                                       = &H8D83???
%GL_ALPHA32I_EXT                                     = &H8D84???
%GL_INTENSITY32I_EXT                                 = &H8D85???
%GL_LUMINANCE32I_EXT                                 = &H8D86???
%GL_LUMINANCE_ALPHA32I_EXT                           = &H8D87???
%GL_RGBA16I_EXT                                      = &H8D88???
%GL_RGB16I_EXT                                       = &H8D89???
%GL_ALPHA16I_EXT                                     = &H8D8A???
%GL_INTENSITY16I_EXT                                 = &H8D8B???
%GL_LUMINANCE16I_EXT                                 = &H8D8C???
%GL_LUMINANCE_ALPHA16I_EXT                           = &H8D8D???
%GL_RGBA8I_EXT                                       = &H8D8E???
%GL_RGB8I_EXT                                        = &H8D8F???
%GL_ALPHA8I_EXT                                      = &H8D90???
%GL_INTENSITY8I_EXT                                  = &H8D91???
%GL_LUMINANCE8I_EXT                                  = &H8D92???
%GL_LUMINANCE_ALPHA8I_EXT                            = &H8D93???
%GL_RED_INTEGER_EXT                                  = &H8D94???
%GL_GREEN_INTEGER_EXT                                = &H8D95???
%GL_BLUE_INTEGER_EXT                                 = &H8D96???
%GL_ALPHA_INTEGER_EXT                                = &H8D97???
%GL_RGB_INTEGER_EXT                                  = &H8D98???
%GL_RGBA_INTEGER_EXT                                 = &H8D99???
%GL_BGR_INTEGER_EXT                                  = &H8D9A???
%GL_BGRA_INTEGER_EXT                                 = &H8D9B???
%GL_LUMINANCE_INTEGER_EXT                            = &H8D9C???
%GL_LUMINANCE_ALPHA_INTEGER_EXT                      = &H8D9D???
%GL_RGBA_INTEGER_MODE_EXT                            = &H8D9E???
#ENDIF

#IF NOT %DEF(%GL_GREMEDY_frame_terminator)
#ENDIF

#IF NOT %DEF(%GL_NV_conditional_render)
%GL_QUERY_WAIT_NV                                    = &H8E13???
%GL_QUERY_NO_WAIT_NV                                 = &H8E14???
%GL_QUERY_BY_REGION_WAIT_NV                          = &H8E15???
%GL_QUERY_BY_REGION_NO_WAIT_NV                       = &H8E16???
#ENDIF

#IF NOT %DEF(%GL_NV_present_video)
%GL_FRAME_NV                                         = &H8E26???
%GL_FIELDS_NV                                        = &H8E27???
%GL_CURRENT_TIME_NV                                  = &H8E28???
%GL_NUM_FILL_STREAMS_NV                              = &H8E29???
%GL_PRESENT_TIME_NV                                  = &H8E2A???
%GL_PRESENT_DURATION_NV                              = &H8E2B???
#ENDIF

#IF NOT %DEF(%GL_EXT_transform_feedback)
%GL_TRANSFORM_FEEDBACK_BUFFER_EXT                     = &H8C8E???
%GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT               = &H8C84???
%GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT                = &H8C85???
%GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT             = &H8C8F???
%GL_INTERLEAVED_ATTRIBS_EXT                           = &H8C8C???
%GL_SEPARATE_ATTRIBS_EXT                              = &H8C8D???
%GL_PRIMITIVES_GENERATED_EXT                          = &H8C87???
%GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT         = &H8C88???
%GL_RASTERIZER_DISCARD_EXT                            = &H8C89???
%GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = &H8C8A???
%GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT       = &H8C8B???
%GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT    = &H8C80???
%GL_TRANSFORM_FEEDBACK_VARYINGS_EXT                   = &H8C83???
%GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT                = &H8C7F???
%GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT         = &H8C76???
#ENDIF

#IF NOT %DEF(%GL_EXT_direct_state_access)
%GL_PROGRAM_MATRIX_EXT                                = &H8E2D???
%GL_TRANSPOSE_PROGRAM_MATRIX_EXT                      = &H8E2E???
%GL_PROGRAM_MATRIX_STACK_DEPTH_EXT                    = &H8E2F???
#ENDIF

#IF NOT %DEF(%GL_EXT_vertex_array_bgra)
'/* reuse GL_BGRA */
#ENDIF


' /*************************************************************/

'#include <stddef.h>
'#ifndef GL_VERSION_2_0
'/* GL type for program/shader text */
'typedef char GLchar;         /* native character */
'#endif

'#ifndef GL_VERSION_1_5
'/* GL types for handling large vertex buffer objects */
'typedef ptrdiff_t GLintptr;
'typedef ptrdiff_t GLsizeiptr;
'#endif

'#ifndef GL_ARB_vertex_buffer_object
'/* GL types for handling large vertex buffer objects */
'typedef ptrdiff_t GLintptrARB;
'typedef ptrdiff_t GLsizeiptrARB;
'#endif

'#ifndef GL_ARB_shader_objects
'/* GL types for handling shader object handles and program/shader text */
'typedef char GLcharARB;      /* native character */
'typedef unsigned int GLhandleARB;   /* shader object handle */
'#endif

'/* GL types for "half" precision (s10e5) float data in host memory */
'#ifndef GL_ARB_half_float_pixel
'typedef unsigned short GLhalfARB;
'#endif

'#ifndef GL_NV_half_float
'typedef unsigned short GLhalfNV;
'#endif

'#ifndef GLEXT_64_TYPES_DEFINED
'/* This code block is duplicated in glxext.h, so must be protected */
'#define GLEXT_64_TYPES_DEFINED
'/* Define int32_t, int64_t, and uint64_t types for UST/MSC */
'/* (as used in the GL_EXT_timer_query extension). */
'#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
'#include <inttypes.h>
'#elif defined(__sun__)
'#include <inttypes.h>
'#if defined(__STDC__)
'#if defined(__arch64__)
'typedef long int int64_t;
'typedef unsigned long int uint64_t;
'#else
'typedef long long int int64_t;
'typedef unsigned long long int uint64_t;
'#endif /* __arch64__ */
'#endif /* __STDC__ */
'#elif defined( __VMS )
'#include <inttypes.h>
'#elif defined(__SCO__) || defined(__USLC__)
'#include <stdint.h>
'#elif defined(__UNIXOS2__) || defined(__SOL64__)
'typedef long int int32_t;
'typedef long long int int64_t;
'typedef unsigned long long int uint64_t;
'#elif defined(_WIN32) && defined(__GNUC__)
'#include <stdint.h>
'#elif defined(_WIN32)
'typedef __int32 int32_t;
'typedef __int64 int64_t;
'typedef unsigned __int64 uint64_t;
'#else
'#include <inttypes.h>     /* Fallback option */
'#endif
'#endif

'#ifndef GL_EXT_timer_query
'typedef int64_t GLint64EXT;
'typedef uint64_t GLuint64EXT;
'#endif


#IF NOT %DEF(%GL_VERSION_1_2)
%GL_VERSION_1_2 = 1

'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' Set the blend color.
' void glBlendColor (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
' ========================================================================================
DECLARE SUB Proto_glBlendColor (BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glBlendColor(red, green, blue, alpha)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBlendColor")
   IF pProc THEN CALL DWORD pProc USING Proto_glBlendColor(red, green, blue, alpha)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the blend equation
' void glBlendEquation (GLenum mode);
' ========================================================================================
DECLARE SUB Proto_glBlendEquation (BYVAL DWORD)
MACRO glBlendEquation(dwmode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBlendEquation")
   IF pProc THEN CALL DWORD pProc USING Proto_glBlendEquation(dwmode)
END MACRO
' ========================================================================================

' ========================================================================================
' Render primitives from array data.
' void glDrawRangeElements (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
' ========================================================================================
DECLARE SUB Proto_glDrawRangeElements (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYREF ANY)
MACRO glDrawRangeElements(dwmode, dwstart, dwend, dwcount, dwtype, pindices)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDrawRangeElements")
   IF pProc THEN CALL DWORD pProc USING Proto_glDrawRangeElements(dwmode, dwstart, dwend, dwcount, dwtype, pindices)
END MACRO
' ========================================================================================

' ========================================================================================
' Defines a color lookup table
' void glColorTable (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
' ========================================================================================
DECLARE SUB Proto_glColorTable (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glColorTable(dwtarget, internalformat, iwidth, dwformat, dwtype, ptable)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glColorTable")
   IF pProc THEN CALL DWORD pProc USING Proto_glColorTable(dwtarget, internalformat, iwidth, dwformat, dwtype, ptable)
END MACRO
' ========================================================================================

' ========================================================================================
' Set color lookup table parameters.
' void glColorTableParameterfv (GLenum target, GLenum pname, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glColorTableParameterfv (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glColorTableParameterfv(dwtarget, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glColorTableParameterfv")
   IF pProc THEN CALL DWORD pProc USING Proto_glColorTableParameterfv(dwtarget, internalformat, iwidth, dwformat, dwtype, table)
END MACRO
' ========================================================================================

' ========================================================================================
' Set color lookup table parameters.
' void glColorTableParameteriv (GLenum target, GLenum pname, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glColorTableParameteriv (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glColorTableParameteriv(dwtarget, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glColorTableParameteriv")
   IF pProc THEN CALL DWORD pProc USING Proto_glColorTableParameteriv(dwtarget, internalformat, iwidth, dwformat, dwtype, table)
END MACRO
' ========================================================================================

' ========================================================================================
' Copy pixels into a color table.
' void glCopyColorTable (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
' ========================================================================================
DECLARE SUB Proto_glCopyColorTable (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glCopyColorTable(dwtarget, internalformat, x, y, iwidth)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCopyColorTable")
   IF pProc THEN CALL DWORD pProc USING Proto_glCopyColorTable(dwtarget, internalformat, x, y, iwidth)
END MACRO
' ========================================================================================

' ========================================================================================
' Retrieve contents of a color lookup table.
' void glGetColorTable (GLenum target, GLenum format, GLenum type, GLvoid *table);
' ========================================================================================
DECLARE SUB Proto_glGetColorTable (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glGetColorTable(dwtarget, dwformat, dwtype, ptable)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetColorTable")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetColorTable(dwtarget, dwformat, dwtype, ptable)
END MACRO
' ========================================================================================

' ========================================================================================
' Get color lookup table parameters.
' void glGetColorTableParameterfv (GLenum target, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetColorTableParameterfv (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetColorTableParameterfv(dwtarget, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetColorTableParameterfv")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetColorTableParameterfv(dwtarget, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' Get color lookup table parameters.
' void glGetColorTableParameteriv (GLenum target, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetColorTableParameteriv (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetColorTableParameteriv(dwtarget, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetColorTableParameteriv")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetColorTableParameteriv(dwtarget, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' Respecify a portion of a color table.
' void glColorSubTable (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
' ========================================================================================
DECLARE SUB Proto_glColorSubTable (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glColorSubTable(dwtarget, istart, icount, dwformat, dwtype, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glColorSubTable")
   IF pProc THEN CALL DWORD pProc USING Proto_glColorSubTable(dwtarget, istart, icount, dwformat, dwtype, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' Respecify a portion of a color table.
' void glCopyColorSubTable (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
' ========================================================================================
DECLARE SUB Proto_glCopyColorSubTable (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glCopyColorSubTable(dwtarget, istart, x, y, iwidth)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCopyColorSubTable")
   IF pProc THEN CALL DWORD pProc USING Proto_glCopyColorSubTable(dwtarget, istart, x, y, iwidth)
END MACRO
' ========================================================================================

' ========================================================================================
' Define a one-dimensional convolution filter.
' void glConvolutionFilter1D (GLenum target, GLenum internalformat, GLsizei width,
' GLenum format, GLenum type, const GLvoid *image);
' ========================================================================================
DECLARE SUB Proto_glConvolutionFilter1D (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glConvolutionFilter1D(dwtarget, internalformat, iwidth, dwformat, dwtype, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glConvolutionFilter1D")
   IF pProc THEN CALL DWORD pProc USING Proto_glConvolutionFilter1D(dwtarget, internalformat, iwidth, dwformat, dwtype, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' Define a two-dimensional convolution filter.
' void glConvolutionFilter2D (GLenum target, GLenum internalformat, GLsizei width,
' GLsizei height, GLenum format, GLenum type, const GLvoid *image);
' ========================================================================================
DECLARE SUB Proto_glConvolutionFilter2D (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glConvolutionFilter2D(dwtarget, internalformat, iwidth, iheight, dwformat, dwtype, pimage)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glConvolutionFilter2D")
   IF pProc THEN CALL DWORD pProc USING Proto_glConvolutionFilter2D(dwtarget, internalformat, iwidth, iheight, dwformat, dwtype, pimage)
END MACRO
' ========================================================================================

' ========================================================================================
' Set convolution parameters.
' void glConvolutionParameterf (GLenum target, GLenum pname, GLfloat params);
' ========================================================================================
DECLARE SUB Proto_glConvolutionParameterf (BYVAL DWORD, BYVAL DWORD, BYVAL SINGLE)
MACRO glConvolutionParameterf(dwtarget, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glConvolutionParameterf")
   IF pProc THEN CALL DWORD pProc USING Proto_glConvolutionParameterf(dwtarget, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' Set convolution parameters.
' void glConvolutionParameterfv (GLenum target, GLenum pname, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glConvolutionParameterfv (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glConvolutionParameterfv(dwtarget, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glConvolutionParameterfv")
   IF pProc THEN CALL DWORD pProc USING Proto_glConvolutionParameterfv(dwtarget, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' Set convolution parameters.
' void glConvolutionParameteri (GLenum target, GLenum pname, GLint params);
' ========================================================================================
DECLARE SUB Proto_glConvolutionParameteri (BYVAL DWORD, BYVAL DWORD, BYVAL LONG)
MACRO glConvolutionParameteri(dwtarget, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glConvolutionParameteri")
   IF pProc THEN CALL DWORD pProc USING Proto_glConvolutionParameteri(dwtarget, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' Set convolution parameters.
' void glConvolutionParameteriv (GLenum target, GLenum pname, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glConvolutionParameteriv (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glConvolutionParameteriv(dwtarget, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glConvolutionParameteriv")
   IF pProc THEN CALL DWORD pProc USING Proto_glConvolutionParameteriv(dwtarget, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' Copy pixels into a one-dimensional convolution filter.
' void glCopyConvolutionFilter1D (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
' ========================================================================================
DECLARE SUB Proto_glCopyConvolutionFilter1D (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glCopyConvolutionFilter1D(dwtarget, internalformat, x, y, iwidth)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCopyConvolutionFilter1D")
   IF pProc THEN CALL DWORD pProc USING Proto_glCopyConvolutionFilter1D(dwtarget, internalformat, x, y, iwidth)
END MACRO
' ========================================================================================

' ========================================================================================
' Copy pixels into a two-dimensional convolution filter.
' void glCopyConvolutionFilter2D (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
' ========================================================================================
DECLARE SUB Proto_glCopyConvolutionFilter2D (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glCopyConvolutionFilter2D(dwtarget, internalformat, x, y, iwidth, iheight)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCopyConvolutionFilter2D")
   IF pProc THEN CALL DWORD pProc USING Proto_glCopyConvolutionFilter2D(dwtarget, internalformat, x, y, iwidth, iheight)
END MACRO
' ========================================================================================

' ========================================================================================
' Get current 1D or 2D convolution filter kernel.
' void glGetConvolutionFilter (GLenum target, GLenum format, GLenum type, GLvoid *image);
' ========================================================================================
DECLARE SUB Proto_glGetConvolutionFilter (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glGetConvolutionFilter(dwtarget, dwformat, dwtype, pimage)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetConvolutionFilter")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetConvolutionFilter(dwtarget, dwformat, dwtype, pimage)
END MACRO
' ========================================================================================

' ========================================================================================
' Get convolution parameters.
' void glGetConvolutionParameterfv (GLenum target, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetConvolutionParameterfv (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetConvolutionParameterfv(dwtarget, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetConvolutionParameterfv")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetConvolutionParameterfv(dwtarget, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' Get convolution parameters.
' void glGetConvolutionParameteriv (GLenum target, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetConvolutionParameteriv (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetConvolutionParameteriv(dwtarget, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetConvolutionParameteriv")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetConvolutionParameteriv(dwtarget, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' Get separable convolution filter kernel images.
' void glGetSeparableFilter (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
' ========================================================================================
DECLARE SUB Proto_glGetSeparableFilter (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF ANY, BYREF ANY, BYREF ANY)
MACRO glGetSeparableFilter(dwtarget, dwformat, dwtype, prow, pcolumn, pspan)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetSeparableFilter")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetSeparableFilter(dwtarget, dwformat, dwtype, prow, pcolumn, pspan)
END MACRO
' ========================================================================================

' ========================================================================================
' Define a separable two-dimensional convolution filter.
' void glSeparableFilter2D (GLenum target, GLenum internalformat, GLsizei width,
' GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
' ========================================================================================
DECLARE SUB Proto_glSeparableFilter2D (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY, BYREF ANY)
MACRO glSeparableFilter2D(dwtarget, internalformat, iwidth, iheight, dwformat, dwtype, prow, pcolumn)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSeparableFilter2D")
   IF pProc THEN CALL DWORD pProc USING Proto_glSeparableFilter2D(dwtarget, internalformat, iwidth, iheight, dwformat, dwtype, prow, pcolumn)
END MACRO
' ========================================================================================

' ========================================================================================
' Get histogram table.
' void glGetHistogram (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
' ========================================================================================
DECLARE SUB Proto_glGetHistogram (BYVAL DWORD, BYVAL BYTE, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glGetHistogram(dwtarget, breset, dwformat, dwtype, pvalues)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetHistogram")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetHistogram(dwtarget, breset, dwformat, dwtype, pvalues)
END MACRO
' ========================================================================================

' ========================================================================================
' Get histogram parameters.
' void glGetHistogramParameterfv (GLenum target, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetHistogramParameterfv (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetHistogramParameterfv(dwtarget, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetHistogramParameterfv")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetHistogramParameterfv(dwtarget, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' Get histogram parameters.
' void glGetHistogramParameteriv (GLenum target, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetHistogramParameteriv (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetHistogramParameteriv(dwtarget, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetHistogramParameteriv")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetHistogramParameteriv(dwtarget, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' Get minimum and maximum pixel values.
' void glGetMinmax (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
' ========================================================================================
DECLARE SUB Proto_glGetMinmax (BYVAL DWORD, BYVAL BYTE, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glGetMinmax(dwtarget, breset, dwformat, dwtypes, pvalues)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetMinmax")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetMinmax(dwtarget, breset, dwformat, dwtypes, pvalues)
END MACRO
' ========================================================================================

' ========================================================================================
' Get minmax parameters.
' void glGetMinmaxParameterfv (GLenum target, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetMinmaxParameterfv (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetMinmaxParameterfv(dwtarget, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetMinmaxParameterfv")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetMinmaxParameterfv(dwtarget, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' Get minmax parameters.
' void glGetMinmaxParameteriv (GLenum target, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetMinmaxParameteriv (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetMinmaxParameteriv(dwtarget, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetMinmaxParameteriv")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetMinmaxParameteriv(dwtarget, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' Define histogram table.
' void glHistogram (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
' ========================================================================================
DECLARE SUB Proto_glHistogram (BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL BYTE)
MACRO glHistogram(dwtarget, iwidth, internalformat, bsink)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glHistogram")
   IF pProc THEN CALL DWORD pProc USING Proto_glHistogram(dwtarget, iwidth, internalformat, bsink)
END MACRO
' ========================================================================================

' ========================================================================================
' Define minmax table.
' void glMinmax (GLenum target, GLenum internalformat, GLboolean sink);
' ========================================================================================
DECLARE SUB Proto_glMinmax (BYVAL DWORD, BYVAL DWORD, BYVAL BYTE)
MACRO glMinmax(dwtarget, internalformat, bsink)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMinmax")
   IF pProc THEN CALL DWORD pProc USING Proto_glMinmax(dwtarget, internalformat, bsink)
END MACRO
' ========================================================================================

' ========================================================================================
' Reset histogram table entries to zero.
' void glResetHistogram (GLenum target);
' ========================================================================================
DECLARE SUB Proto_glResetHistogram (BYVAL DWORD)
MACRO glResetHistogram(dwtarget)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glResetHistogram")
   IF pProc THEN CALL DWORD pProc USING Proto_glResetHistogram(dwtarget)
END MACRO
' ========================================================================================

' ========================================================================================
' Reset minmax table entries to initial values
' void glResetMinmax (GLenum target);
' ========================================================================================
DECLARE SUB Proto_glResetMinmax (BYVAL DWORD)
MACRO glResetMinmax(dwtarget)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glResetMinmax")
   IF pProc THEN CALL DWORD pProc USING Proto_glResetMinmax(dwtarget)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify a three-dimensional texture image.
' GLAPI void APIENTRY glTexImage3D (GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
' typedef void (APIENTRYP PFNGLTEXIMAGE3DPROC) (GLenum target, GLint level, GLint internalformat,
' GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
' ========================================================================================
DECLARE SUB Proto_glTexImage3D (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glTexImage3D(dwtarget, ilevel, internalformat, iwidth, iheight, idepth, iborder, dwformat, dwtype, ppixels)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexImage3D")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexImage3D(dwtarget, ilevel, internalformat, iwidth, iheight, idepth, iborder, dwformat, dwtype, ppixels)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies a three-dimensional (3D) texture subimage.
' void glTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset,
' GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
' ========================================================================================
DECLARE SUB Proto_glTexSubImage3D (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glTexSubImage3D(dwtarget, ilevel, xoffset, yoffset, zoffset, iwidht, iheight, idepth, dwformat, dwtype, ppixels)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexSubImage3D")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexSubImage3D(dwtarget, ilevel, xoffset, yoffset, zoffset, iwidht, iheight, idepth, dwformat, dwtype, ppixels)
END MACRO
' ========================================================================================

' ========================================================================================
' Copy a three-dimensional texture subimage.
' void glCopyTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset,
' GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
' ========================================================================================
DECLARE SUB Proto_glCopyTexSubImage3D (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glCopyTexSubImage3D(dwtarget, ilevel, xoffset, yoffset, zoffset, x, y, iwidth, iheight)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCopyTexSubImage3D")
   IF pProc THEN CALL DWORD pProc USING Proto_glCopyTexSubImage3D(dwtarget, ilevel, xoffset, yoffset, zoffset, x, y, iwidth, iheight)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES

#ENDIF

#IF NOT %DEF(%GL_VERSION_1_3)
%GL_VERSION_1_3 = 1

'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' Select server-side active texture unit.
' void glActiveTexture (GLenum texture);
' ========================================================================================
DECLARE SUB Proto_glActiveTexture (BYVAL DWORD)
MACRO glActiveTexture(dwtexture)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glActiveTexture")
   IF pProc THEN CALL DWORD pProc USING Proto_glActiveTexture(dwtexture)
END MACRO
' ========================================================================================

' ========================================================================================
' Select client-side active texture unit.
' void glClientActiveTexture (GLenum texture);
' ========================================================================================
DECLARE SUB Proto_glClientActiveTexture (BYVAL DWORD)
MACRO glClientActiveTexture(dwtexture)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glClientActiveTexture")
   IF pProc THEN CALL DWORD pProc USING Proto_glClientActiveTexture(dwtexture)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord1d (GLenum target, GLdouble s);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord1d (BYVAL DWORD, BYVAL DOUBLE)
MACRO glMultiTexCoord1d(dwtarget, s)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord1d")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord1d(dwtarget, s)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord1dv (GLenum target, const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord1dv (BYVAL DWORD, BYREF DOUBLE)
MACRO glMultiTexCoord1dv(dwtarget, s)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord1dv")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord1dv(dwtarget, s)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord1f (GLenum target, GLfloat s);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord1f (BYVAL DWORD, BYVAL SINGLE)
MACRO glMultiTexCoord1f(dwtarget, s)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord1f")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord1f(dwtarget, s)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord1fv (GLenum target, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord1fv (BYVAL DWORD, BYREF SINGLE)
MACRO glMultiTexCoord1fv(dwtarget, s)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord1fv")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord1fv(dwtarget, s)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord1i (GLenum target, GLint s);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord1i (BYVAL DWORD, BYVAL LONG)
MACRO glMultiTexCoord1i(dwtarget, s)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord1i")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord1i(dwtarget, s)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord1iv (GLenum target, const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord1iv (BYVAL DWORD, BYREF LONG)
MACRO glMultiTexCoord1iv(dwtarget, s)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord1iv")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord1iv(dwtarget, s)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord1s (GLenum target, GLshort s);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord1s (BYVAL DWORD, BYVAL INTEGER)
MACRO glMultiTexCoord1s(dwtarget, s)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord1s")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord1s(dwtarget, s)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord1sv (GLenum target, const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord1sv (BYVAL DWORD, BYREF INTEGER)
MACRO glMultiTexCoord1sv(dwtarget, s)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord1sv")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord1sv(dwtarget, s)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord2d (GLenum target, GLdouble s, GLdouble t);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord2d (BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glMultiTexCoord2d(dwtarget, s, t)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord2d")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord2d(dwtarget, s, t)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord2dv (GLenum target, const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord2dv (BYVAL DWORD, BYREF DOUBLE)
MACRO glMultiTexCoord2dv(dwtarget, s)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord2dv")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord2dv(dwtarget, s)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord2f (GLenum target, GLfloat s, GLfloat t);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord2f (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE)
MACRO glMultiTexCoord2f(dwtarget, s, t)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord2f")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord2f(dwtarget, s, t)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord2fv (GLenum target, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord2fv (BYVAL DWORD, BYREF SINGLE)
MACRO glMultiTexCoord2fv(dwtarget, s)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord2fv")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord2fv(dwtarget, s)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord2i (GLenum target, GLint s, GLint t);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord2i (BYVAL DWORD, BYVAL LONG, BYVAL LONG)
MACRO glMultiTexCoord2i(dwtarget, s, t)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord2i")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord2i(dwtarget, s, t)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord2iv (GLenum target, const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord2iv (BYVAL DWORD, BYREF LONG)
MACRO glMultiTexCoord2iv(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord2iv")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord2iv(dwtarget, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord2s (GLenum target, GLshort s, GLshort t);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord2s (BYVAL DWORD, BYVAL INTEGER, BYVAL INTEGER)
MACRO glMultiTexCoord2s(dwtarget, s, t)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord2s")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord2s(dwtarget, s, t)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord2sv (GLenum target, const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord2sv (BYVAL DWORD, BYREF INTEGER)
MACRO glMultiTexCoord2sv(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord2sv")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord2sv(dwtarget, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord3d (GLenum target, GLdouble s, GLdouble t, GLdouble r);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord3d (BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glMultiTexCoord3d(dwtarget, s, t, r)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord3d")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord3d(dwtarget, s, t, r)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord3dv (GLenum target, const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord3dv (BYVAL DWORD, BYREF DOUBLE)
MACRO glMultiTexCoord3dv(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord3dv")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord3dv(dwtarget, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord3f (GLenum target, GLfloat s, GLfloat t, GLfloat r);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord3f (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glMultiTexCoord3f(dwtarget, s, t, r)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord3f")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord3f(dwtarget, s, t, r)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord3fv (GLenum target, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord3fv (BYVAL DWORD, BYREF SINGLE)
MACRO glMultiTexCoord3fv(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord3fv")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord3fv(dwtarget, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord3i (GLenum target, GLint s, GLint t, GLint r);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord3i (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glMultiTexCoord3i(dwtarget, s, t, r)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord3i")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord3i(dwtarget, s, t, r)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord3iv (GLenum target, const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord3iv (BYVAL DWORD, BYREF LONG)
MACRO glMultiTexCoord3iv(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord3iv")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord3iv(dwtarget, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord3s (GLenum target, GLshort s, GLshort t, GLshort r);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord3s (BYVAL DWORD, BYVAL INTEGER, BYVAL INTEGER, BYVAL INTEGER)
MACRO glMultiTexCoord3s(dwtarget, s, t, r)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord3s")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord3s(dwtarget, s, t, r)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord3sv (GLenum target, const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord3sv (BYVAL DWORD, BYREF INTEGER)
MACRO glMultiTexCoord3sv(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord3sv")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord3sv(dwtarget, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord4d (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord4d (BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glMultiTexCoord4d(dwtarget, s, t, r, q)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord4d")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord4d(dwtarget, s, t, r, q)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord4dv (GLenum target, const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord4dv (BYVAL DWORD, BYREF DOUBLE)
MACRO glMultiTexCoord4dv(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord4dv")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord4dv(dwtarget, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord4f (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord4f (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glMultiTexCoord4f(dwtarget, s, t, r, q)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord4f")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord4f(dwtarget, s, t, r, q)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord4fv (GLenum target, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord4fv (BYVAL DWORD, BYREF SINGLE)
MACRO glMultiTexCoord4fv(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord4fv")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord4fv(dwtarget, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord4i (GLenum target, GLint s, GLint t, GLint r, GLint q);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord4i (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glMultiTexCoord4i(dwtarget, s, t, r, q)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord4i")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord4i(dwtarget, s, t, r, q)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord4iv (GLenum target, const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord4iv (BYVAL DWORD, BYREF LONG)
MACRO glMultiTexCoord4iv(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord4iv")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord4iv(dwtarget, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord4s (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord4s (BYVAL DWORD, BYVAL INTEGER, BYVAL INTEGER, BYVAL INTEGER, BYVAL INTEGER)
MACRO glMultiTexCoord4s(dwtarget, s, t, r, q)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord4s")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord4s(dwtarget, s, t, r, q)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current texture coordinates.
' void glMultiTexCoord4sv (GLenum target, const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord4sv (BYVAL DWORD, BYREF INTEGER)
MACRO glMultiTexCoord4sv(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord4sv")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord4sv(dwtarget, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Replace the current matrix with the specified row-major ordered matrix
' void glLoadTransposeMatrixf (const GLfloat *m);
' ========================================================================================
DECLARE SUB Proto_glLoadTransposeMatrixf (BYREF SINGLE)
MACRO glLoadTransposeMatrixf(m)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glLoadTransposeMatrixf")
   IF pProc THEN CALL DWORD pProc USING Proto_glLoadTransposeMatrixf(m)
END MACRO
' ========================================================================================

' ========================================================================================
' Replace the current matrix with the specified row-major ordered matrix
' void glLoadTransposeMatrixd (const GLdouble *m);
' ========================================================================================
DECLARE SUB Proto_glLoadTransposeMatrixd (BYREF DOUBLE)
MACRO glLoadTransposeMatrixd(m)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glLoadTransposeMatrixd")
   IF pProc THEN CALL DWORD pProc USING Proto_glLoadTransposeMatrixd(m)
END MACRO
' ========================================================================================

' ========================================================================================
' Replace the current matrix with the specified row-major ordered matrix
' void glMultTransposeMatrixf (const GLfloat *m);
' ========================================================================================
DECLARE SUB Proto_glMultTransposeMatrixf (BYREF SINGLE)
MACRO glMultTransposeMatrixf(m)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultTransposeMatrixf")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultTransposeMatrixf(m)
END MACRO
' ========================================================================================

' ========================================================================================
' Replace the current matrix with the specified row-major ordered matrix
' void glMultTransposeMatrixd (const GLdouble *m);
' ========================================================================================
DECLARE SUB Proto_glMultTransposeMatrixd (BYREF DOUBLE)
MACRO glMultTransposeMatrixd(m)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultTransposeMatrixd")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultTransposeMatrixd(m)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify mask to modify multisampled pixel fragments
' void glSampleCoverage (GLclampf value, GLboolean invert);
' ========================================================================================
DECLARE SUB Proto_glSampleCoverage (BYVAL SINGLE, BYVAL BYTE)
MACRO glSampleCoverage(value, binvert)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSampleCoverage")
   IF pProc THEN CALL DWORD pProc USING Proto_glSampleCoverage(value, binvert)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify a three-dimensional texture image in a compressed format.
' void glCompressedTexImage3D (GLenum target, GLint level, GLenum internalformat,
' GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
' ========================================================================================
DECLARE SUB Proto_glCompressedTexImage3D (BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYREF ANY)
MACRO glCompressedTexImage3D(dwtarget, ilevel, internalformat, iwidth, iheight, idepth, iborder, imageSize, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCompressedTexImage3D")
   IF pProc THEN CALL DWORD pProc USING Proto_glCompressedTexImage3D(dwtarget, ilevel, internalformat, iwidth, iheight, idepth, iborder, imageSize, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify a two-dimensional compressed texture image.
' void glCompressedTexImage2D (GLenum target, GLint level, GLenum internalformat,
' GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
' ========================================================================================
DECLARE SUB Proto_glCompressedTexImage2D (BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYREF ANY)
MACRO glCompressedTexImage2D(dwtarget, ilevel, internalformat, iwidth, iheight, idepth, iborder, imageSize, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCompressedTexImage2D")
   IF pProc THEN CALL DWORD pProc USING Proto_glCompressedTexImage2D(dwtarget, ilevel, internalformat, iwidth, iheight, idepth, iborder, imageSize, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify a one-dimensional texture image in a compressed format.
' void glCompressedTexImage1D (GLenum target, GLint level, GLenum internalformat,
' GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
' ========================================================================================
DECLARE SUB Proto_glCompressedTexImage1D (BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYREF ANY)
MACRO glCompressedTexImage1D(dwtarget, ilevel, internalformat, iwidth, iborder, imageSize, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCompressedTexImage1D")
   IF pProc THEN CALL DWORD pProc USING Proto_glCompressedTexImage1D(dwtarget, ilevel, internalformat, iwidth, iborder, imageSize, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify a three-dimensional texture subimage in a compressed format
' void glCompressedTexSubImage3D (GLenum target, GLint level, GLint xoffset,
' GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
' ========================================================================================
DECLARE SUB Proto_glCompressedTexSubImage3D (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glCompressedTexSubImage3D(dwtarget, ilevel, xoffset, yoffset, zoffset, iwidth, iheight, idepth, dwformat, imageSize, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCompressedTexSubImage3D")
   IF pProc THEN CALL DWORD pProc USING Proto_glCompressedTexSubImage3D(dwtarget, ilevel, xoffset, yoffset, zoffset, iwidth, iheight, idepth, dwformat, imageSize, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify a two-dimensional texture subimage in a compressed format
' void glCompressedTexSubImage2D (GLenum target, GLint level, GLint xoffset,
' GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
' ========================================================================================
DECLARE SUB Proto_glCompressedTexSubImage2D (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glCompressedTexSubImage2D(dwtarget, ilevel, xoffset, yoffset, iwidth, iheight, dwformat, imageSize, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCompressedTexSubImage2D")
   IF pProc THEN CALL DWORD pProc USING Proto_glCompressedTexSubImage2D(dwtarget, ilevel, xoffset, yoffset, iwidth, iheight, dwformat, imageSize, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify a one-dimensional texture subimage in a compressed format.
' void glCompressedTexSubImage1D (GLenum target, GLint level, GLint xoffset,
' GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
' ========================================================================================
DECLARE SUB Proto_glCompressedTexSubImage1D (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glCompressedTexSubImage1D(dwtarget, ilevel, xoffset, iwidth, dwformat, imageSize, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCompressedTexSubImage1D")
   IF pProc THEN CALL DWORD pProc USING Proto_glCompressedTexSubImage1D(dwtarget, ilevel, xoffset, iwidth, dwformat, imageSize, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' Return a compressed texture image.
' void glGetCompressedTexImage (GLenum target, GLint level, GLvoid *img);
' ========================================================================================
DECLARE SUB Proto_glGetCompressedTexImage (BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glGetCompressedTexImage(dwtarget, lod, pimg)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetCompressedTexImage")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetCompressedTexImage(dwtarget, lod, pimg)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES

#ENDIF


#IF NOT %DEF(%GL_VERSION_1_4)
%GL_VERSION_1_4 = 1

'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' Specify pixel arithmetic for RGB and alpha components separately.
' void glBlendFuncSeparate (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
' ========================================================================================
DECLARE SUB Proto_glBlendFuncSeparate (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glBlendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBlendFuncSeparate")
   IF pProc THEN CALL DWORD pProc USING Proto_glBlendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current fog coordinates.
' void glFogCoordf (GLfloat coord);
' ========================================================================================
DECLARE SUB Proto_glFogCoordf (BYVAL SINGLE)
MACRO glFogCoordf(coord)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFogCoordf")
   IF pProc THEN CALL DWORD pProc USING Proto_glFogCoordf(coord)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current fog coordinates.
' void glFogCoordfv (const GLfloat *coord);
' ========================================================================================
DECLARE SUB Proto_glFogCoordfv (BYREF SINGLE)
MACRO glFogCoordfv(coord)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFogCoordfv")
   IF pProc THEN CALL DWORD pProc USING Proto_glFogCoordfv(coord)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current fog coordinates.
' void glFogCoordd (GLdouble coord);
' ========================================================================================
DECLARE SUB Proto_glFogCoordd (BYVAL DOUBLE)
MACRO glFogCoordd(coord)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFogCoordd")
   IF pProc THEN CALL DWORD pProc USING Proto_glFogCoordd(coord)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current fog coordinates.
' void glFogCoorddv (const GLdouble *coord);
' ========================================================================================
DECLARE SUB Proto_glFogCoorddv (BYREF DOUBLE)
MACRO glFogCoorddv(coord)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFogCoorddv")
   IF pProc THEN CALL DWORD pProc USING Proto_glFogCoorddv(coord)
END MACRO
' ========================================================================================

' ========================================================================================
' Define an array of fog coordinates
' void glFogCoordPointer (GLenum type, GLsizei stride, const GLvoid *pointer);
' ========================================================================================
DECLARE SUB Proto_glFogCoordPointer (BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glFogCoordPointer(coord)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFogCoordPointer")
   IF pProc THEN CALL DWORD pProc USING Proto_glFogCoordPointer(coord)
END MACRO
' ========================================================================================

' ========================================================================================
' Render multiple sets of primitives from array data.
' void glMultiDrawArrays (GLenum mode, GLint *first, GLsizei *count, GLsizei primcount);
' ========================================================================================
DECLARE SUB Proto_glMultiDrawArrays (BYVAL DWORD, BYREF LONG, BYREF LONG, BYVAL LONG)
MACRO glMultiDrawArrays(dwmode, ifirst, icount, primtcount)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiDrawArrays")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiDrawArrays(dwmode, ifirst, icount, primtcount)
END MACRO
' ========================================================================================

' ========================================================================================
' Render multiple sets of primitives by specifying indices of array data elements.
' void glMultiDrawElements (GLenum mode, const GLsizei *count, GLenum type,
' const GLvoid* *indices, GLsizei primcount);
' ========================================================================================
DECLARE SUB Proto_glMultiDrawElements (BYVAL DWORD, BYREF LONG, BYVAL DWORD, BYREF ANY, BYVAL LONG)
MACRO glMultiDrawElements(dwmode, icount, dwtype, indices, primcount)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiDrawElements")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiDrawElements(dwmode, icount, dwtype, indices, primcount)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify parameters for point rasterization.
' void glPointParameterf (GLenum pname, GLfloat param);
' ========================================================================================
DECLARE SUB Proto_glPointParameterf (BYVAL DWORD, BYVAL SINGLE)
MACRO glPointParameterf(pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPointParameterf")
   IF pProc THEN CALL DWORD pProc USING Proto_glPointParameterf(pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify parameters for point rasterization.
' void glPointParameterfv (GLenum pname, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glPointParameterfv (BYVAL DWORD, BYREF SINGLE)
MACRO glPointParameterfv(pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPointParameterfv")
   IF pProc THEN CALL DWORD pProc USING Proto_glPointParameterfv(pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify parameters for point rasterization.
' void glPointParameteri (GLenum pname, GLint param);
' ========================================================================================
DECLARE SUB Proto_glPointParameteri (BYVAL DWORD, BYVAL LONG)
MACRO glPointParameteri(pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPointParameteri")
   IF pProc THEN CALL DWORD pProc USING Proto_glPointParameteri(pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify parameters for point rasterization.
' void glPointParameteriv (GLenum pname, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glPointParameteriv (BYVAL DWORD, BYREF LONG)
MACRO glPointParameteriv(pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPointParameteriv")
   IF pProc THEN CALL DWORD pProc USING Proto_glPointParameteriv(pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current secondary color.
' void glSecondaryColor3b (GLbyte red, GLbyte green, GLbyte blue);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3b (BYVAL BYTE, BYVAL BYTE, BYVAL BYTE)
MACRO glSecondaryColor3b(red, green, blue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3b")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3b(red, green, blue)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current secondary color.
' void glSecondaryColor3bv (const GLbyte *v);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3bv (BYREF BYTE)
MACRO glSecondaryColor3bv(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3bv")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3bv(v)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current secondary color.
' void glSecondaryColor3d (GLdouble red, GLdouble green, GLdouble blue);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3d (BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glSecondaryColor3d(red, green, blue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3d")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3d(red, green, blue)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current secondary color.
' void glSecondaryColor3dv (const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3dv (BYREF DOUBLE)
MACRO glSecondaryColor3dv(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3dv")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3dv(v)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current secondary color.
' void glSecondaryColor3f (GLfloat red, GLfloat green, GLfloat blue);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3f (BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glSecondaryColor3f(red, green, blue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3f")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3f(red, green, blue)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current secondary color.
' void glSecondaryColor3fv (const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3fv (BYREF SINGLE)
MACRO glSecondaryColor3fv(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3fv")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3fv(v)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current secondary color.
' void glSecondaryColor3i (GLint red, GLint green, GLint blue);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3i (BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glSecondaryColor3i(red, green, blue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3i")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3i(red, green, blue)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current secondary color.
' void glSecondaryColor3iv (const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3iv (BYREF LONG)
MACRO glSecondaryColor3iv(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3iv")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3iv(v)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current secondary color.
' void glSecondaryColor3s (GLshort red, GLshort green, GLshort blue);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3s (BYVAL INTEGER, BYVAL INTEGER, BYVAL INTEGER)
MACRO glSecondaryColor3s(red, green, blue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3s")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3s(red, green, blue)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current secondary color.
' void glSecondaryColor3sv (const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3sv (BYREF INTEGER)
MACRO glSecondaryColor3sv(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3sv")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3sv(v)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current secondary color.
' void glSecondaryColor3ub (GLubyte red, GLubyte green, GLubyte blue);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3ub (BYVAL BYTE, BYVAL BYTE, BYVAL BYTE)
MACRO glSecondaryColor3ub(red, green, blue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3ub")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3ub(red, green, blue)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current secondary color.
' void glSecondaryColor3ubv (const GLubyte *v);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3ubv (BYREF BYTE)
MACRO glSecondaryColor3ubv(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3ubv")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3ubv(v)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current secondary color.
' void glSecondaryColor3ui (GLuint red, GLuint green, GLuint blue);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3ui (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glSecondaryColor3ui(red, green, blue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3ui")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3ui(red, green, blue)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current secondary color.
' void glSecondaryColor3uiv (const GLuint *v);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3uiv (BYREF DWORD)
MACRO glSecondaryColor3uiv(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3uiv")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3uiv(v)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current secondary color.
' void glSecondaryColor3us (GLushort red, GLushort green, GLushort blue);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3us (BYVAL WORD, BYVAL WORD, BYVAL WORD)
MACRO glSecondaryColor3us(red, green, blue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3us")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3us(red, green, blue)
END MACRO
' ========================================================================================

' ========================================================================================
' Set the current secondary color.
' void glSecondaryColor3usv (const GLushort *v);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3usv (BYREF WORD)
MACRO glSecondaryColor3usv(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3usv")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3usv(v)
END MACRO
' ========================================================================================

' ========================================================================================
' Define an array of secondary colors.
' void glSecondaryColorPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColorPointer (BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glSecondaryColorPointer(dwsize, dwtype, istride, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColorPointer")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColorPointer(dwsize, dwtype, istride, ppointer)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the raster position in window coordinates for pixel operations.
' void glWindowPos2d (GLdouble x, GLdouble y);
' ========================================================================================
DECLARE SUB Proto_glWindowPos2d (BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glWindowPos2d(x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos2d")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos2d(x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the raster position in window coordinates for pixel operations.
' void glWindowPos2dv (const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glWindowPos2dv (BYREF DOUBLE)
MACRO glWindowPos2dv(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos2dv")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos2dv(v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the raster position in window coordinates for pixel operations.
' void glWindowPos2f (GLfloat x, GLfloat y);
' ========================================================================================
DECLARE SUB Proto_glWindowPos2f (BYVAL SINGLE, BYVAL SINGLE)
MACRO glWindowPos2f(x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos2f")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos2f(x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the raster position in window coordinates for pixel operations.
' void glWindowPos2fv (const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glWindowPos2fv (BYREF SINGLE)
MACRO glWindowPos2fv(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos2fv")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos2fv(v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the raster position in window coordinates for pixel operations.
' void glWindowPos2i (GLint x, GLint y);
' ========================================================================================
DECLARE SUB Proto_glWindowPos2i (BYVAL LONG, BYVAL LONG)
MACRO glWindowPos2i(x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos2i")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos2i(x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the raster position in window coordinates for pixel operations.
' void glWindowPos2iv (const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glWindowPos2iv (BYREF LONG)
MACRO glWindowPos2iv(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos2iv")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos2iv(v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the raster position in window coordinates for pixel operations.
' void glWindowPos2s (GLshort x, GLshort y);
' ========================================================================================
DECLARE SUB Proto_glWindowPos2s (BYVAL INTEGER, BYVAL INTEGER)
MACRO glWindowPos2s(x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos2s")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos2s(x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the raster position in window coordinates for pixel operations.
' void glWindowPos2sv (const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glWindowPos2sv (BYREF INTEGER)
MACRO glWindowPos2sv(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos2sv")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos2sv(v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the raster position in window coordinates for pixel operations.
' void glWindowPos3d (GLdouble x, GLdouble y, GLdouble z);
' ========================================================================================
DECLARE SUB Proto_glWindowPos3d (BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glWindowPos3d(x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos3d")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos3d(x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the raster position in window coordinates for pixel operations.
' void glWindowPos3dv (const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glWindowPos3dv (BYREF DOUBLE)
MACRO glWindowPos3dv(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos3dv")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos3dv(v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the raster position in window coordinates for pixel operations.
' void glWindowPos3f (GLfloat x, GLfloat y, GLfloat z);
' ========================================================================================
DECLARE SUB Proto_glWindowPos3f (BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glWindowPos3f(x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos3f")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos3f(x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the raster position in window coordinates for pixel operations.
' void glWindowPos3fv (const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glWindowPos3fv (BYREF SINGLE)
MACRO glWindowPos3fv(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos3fv")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos3fv(v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the raster position in window coordinates for pixel operations.
' void glWindowPos3i (GLint x, GLint y, GLint z);
' ========================================================================================
DECLARE SUB Proto_glWindowPos3i (BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glWindowPos3i(x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos3i")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos3i(x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the raster position in window coordinates for pixel operations.
' void glWindowPos3iv (const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glWindowPos3iv (BYREF LONG)
MACRO glWindowPos3iv(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos3iv")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos3iv(v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the raster position in window coordinates for pixel operations.
' void glWindowPos3s (GLshort x, GLshort y, GLshort z);
' ========================================================================================
DECLARE SUB Proto_glWindowPos3s (BYVAL INTEGER, BYVAL INTEGER, BYVAL INTEGER)
MACRO glWindowPos3s(x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos3s")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos3s(x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the raster position in window coordinates for pixel operations.
' void glWindowPos3sv (const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glWindowPos3sv (BYREF INTEGER)
MACRO glWindowPos3sv(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos3sv")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos3sv(v)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES

#ENDIF


#IF NOT %DEF(%GL_VERSION_1_5)
%GL_VERSION_1_5 = 1

'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' Generate query object names
' void glGenQueries (GLsizei n, GLuint *ids);
' ========================================================================================
DECLARE SUB Proto_glGenQueries (BYVAL LONG, BYREF DWORD)
MACRO glGenQueries(n, ids)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGenQueries")
   IF pProc THEN CALL DWORD pProc USING Proto_glGenQueries(n, ids)
END MACRO
' ========================================================================================

' ========================================================================================
' Delete named query objects.
' void glDeleteQueries (GLsizei n, const GLuint *ids);
' ========================================================================================
DECLARE SUB Proto_glDeleteQueries (BYVAL LONG, BYREF DWORD)
MACRO glDeleteQueries(n, ids)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDeleteQueries")
   IF pProc THEN CALL DWORD pProc USING Proto_glDeleteQueries(n, ids)
END MACRO
' ========================================================================================

' ========================================================================================
' Determine if a name corresponds to a query object.
' GLboolean glIsQuery (GLuint id);
' ========================================================================================
DECLARE FUNCTION Proto_glIsQuery (BYVAL DWORD) AS BYTE
MACRO glIsQuery(n, ids)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glIsQuery")
   IF pProc THEN CALL DWORD pProc USING Proto_glIsQuery(n, ids)
END MACRO
' ========================================================================================

' ========================================================================================
' Delimit the boundaries of a query object.
' void glBeginQuery (GLenum target, GLuint id);
' ========================================================================================
DECLARE SUB Proto_glBeginQuery (BYVAL DWORD, BYVAL DWORD)
MACRO glBeginQuery(dwtarget, id)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBeginQuery")
   IF pProc THEN CALL DWORD pProc USING Proto_glBeginQuery(dwtarget, id)
END MACRO
' ========================================================================================

' ========================================================================================
' Delimit the boundaries of a query object.
' void glEndQuery (GLenum target);
' ========================================================================================
DECLARE SUB Proto_glEndQuery (BYVAL DWORD)
MACRO glEndQuery(dwtarget)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glEndQuery")
   IF pProc THEN CALL DWORD pProc USING Proto_glEndQuery(dwtarget)
END MACRO
' ========================================================================================

' ========================================================================================
' Return parameters of a query object target.
' void glGetQueryiv (GLenum target, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetQueryiv (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetQueryiv(dwtarget, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetQueryiv")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetQueryiv(dwtarget, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' Return parameters of a query object.
' void glGetQueryObjectiv (GLuint id, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetQueryObjectiv (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetQueryObjectiv(id, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetQueryObjectiv")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetQueryObjectiv(id, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' Return parameters of a query object.
' void glGetQueryObjectuiv (GLuint id, GLenum pname, GLuint *params);
' ========================================================================================
DECLARE SUB Proto_glGetQueryObjectuiv (BYVAL DWORD, BYVAL DWORD, BYREF DWORD)
MACRO glGetQueryObjectuiv(id, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetQueryObjectuiv")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetQueryObjectuiv(id, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' Bind a named buffer to a target.
' void glBindBuffer (GLenum target, GLuint buffer);
' ========================================================================================
DECLARE SUB Proto_glBindBuffer (BYVAL DWORD, BYVAL DWORD)
MACRO glBindBuffer(dwtarget, buffer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBindBuffer")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindBuffer(dwtarget, buffer)
END MACRO
' ========================================================================================

' ========================================================================================
' Delete named buffer objects.
' void glDeleteBuffers (GLsizei n, const GLuint *buffers);
' ========================================================================================
DECLARE SUB Proto_glDeleteBuffers (BYVAL LONG, BYREF DWORD)
MACRO glDeleteBuffers(n, buffers)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDeleteBuffers")
   IF pProc THEN CALL DWORD pProc USING Proto_glDeleteBuffers(n, buffers)
END MACRO
' ========================================================================================

' ========================================================================================
' Generate buffer object names.
' void glGenBuffers (GLsizei n, GLuint *buffers);
' ========================================================================================
DECLARE SUB Proto_glGenBuffers (BYVAL LONG, BYREF DWORD)
MACRO glGenBuffers(n, buffers)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGenBuffers")
   IF pProc THEN CALL DWORD pProc USING Proto_glGenBuffers(n, buffers)
END MACRO
' ========================================================================================

' ========================================================================================
' Determine if a name corresponds to a buffer object.
' GLboolean glIsBuffer (GLuint buffer);
' ========================================================================================
DECLARE FUNCTION Proto_glIsBuffer (BYVAL DWORD) AS BYTE
MACRO FUNCTION glIsBuffer(buffer)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glIsBuffer")
   IF pProc THEN CALL DWORD pProc USING Proto_glIsBuffer(buffer) TO bRes
END MACRO = bRes
' ========================================================================================

' ========================================================================================
' Creates and initializes the data store of a buffer object..
' void glBufferData (GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage);
' ========================================================================================
DECLARE SUB Proto_glBufferData (BYVAL DWORD, BYVAL DWORD, BYREF ANY, BYVAL DWORD)
MACRO glBufferData(dwtarget, dwsize, pdata, dwusage)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBufferData")
   IF pProc THEN CALL DWORD pProc USING Proto_glBufferData(dwtarget, dwsize, pdata, dwusage)
END MACRO
' ========================================================================================

' ========================================================================================
' Modifies some or all of the data contained in a buffer object's data store.
' void glBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data);
' ========================================================================================
DECLARE SUB Proto_glBufferSubData (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glBufferSubData(dwtarget, dwoffset, dwsize, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBufferSubData")
   IF pProc THEN CALL DWORD pProc USING Proto_glBufferSubData(dwtarget, dwoffset, dwsize, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' Returns a subset of a buffer object's data store.
' void glGetBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data);
' ========================================================================================
DECLARE SUB Proto_glGetBufferSubData (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glGetBufferSubData(dwtarget, dwoffset, dwsize, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetBufferSubData")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetBufferSubData(dwtarget, dwoffset, dwsize, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' Map a buffer object's data store.
' GLvoid* glMapBuffer (GLenum target, GLenum access);
' ========================================================================================
DECLARE FUNCTION Proto_glMapBuffer (BYVAL DWORD, BYVAL DWORD) AS DWORD
MACRO FUNCTION glMapBuffer(dwtarget, dwaccess)
   MACROTEMP pProc, dwRes
   LOCAL pProc, dwRes AS DWORD
   pProc = wglGetProcAddress("glMapBuffer")
   IF pProc THEN CALL DWORD pProc USING Proto_glMapBuffer(dwtarget, dwaccess) TO dwRes
END MACRO = dwRes
' ========================================================================================

' ========================================================================================
' Unmaps a buffer object's data store.
' GLboolean glUnmapBuffer (GLenum target);
' ========================================================================================
DECLARE FUNCTION Proto_glUnmapBuffer (BYVAL DWORD) AS BYTE
MACRO FUNCTION glUnmapBuffer(dwtarget)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glUnmapBuffer")
   IF pProc THEN CALL DWORD pProc USING Proto_glUnmapBuffer(dwtarget) TO bRes
END MACRO = bRes
' ========================================================================================

' ========================================================================================
' Return parameters of a buffer object.
' void glGetBufferParameteriv (GLenum target, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetBufferParameteriv (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetBufferParameteriv(dwtarget, dwvalue, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetBufferParameteriv")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetBufferParameteriv(dwtarget, dwvalue, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' Return the pointer to a mapped buffer object's data store.
' void glGetBufferPointerv (GLenum target, GLenum pname, GLvoid* *params);
' ========================================================================================
DECLARE SUB Proto_glGetBufferPointerv (BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glGetBufferPointerv(dwtarget, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetBufferPointerv")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetBufferPointerv(dwtarget, pname, params)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES

#ENDIF


#IF NOT %DEF(%GL_VERSION_2_0)
%GL_VERSION_2_0 = 1

'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' Set the RGB blend equation and the alpha blend equation separately.
' void glBlendEquationSeparate (GLenum modeRGB, GLenum modeAlpha);
' ========================================================================================
DECLARE SUB Proto_glBlendEquationSeparate (BYVAL DWORD, BYVAL DWORD)
MACRO glBlendEquationSeparate(modeRGB, modeAlpha)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBlendEquationSeparate")
   IF pProc THEN CALL DWORD pProc USING Proto_glBlendEquationSeparate(modeRGB, modeAlpha)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies a list of color buffers to be drawn into
' void glDrawBuffers (GLsizei n, const GLenum *bufs);
' ========================================================================================
DECLARE SUB Proto_glDrawBuffers (BYVAL LONG, BYREF DWORD)
MACRO glDrawBuffers(n, bufs)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDrawBuffers")
   IF pProc THEN CALL DWORD pProc USING Proto_glDrawBuffers(n, bufs)
END MACRO
' ========================================================================================

' ========================================================================================
' Set front and/or back stencil test actions.
' void glStencilOpSeparate (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
' ========================================================================================
DECLARE SUB Proto_glStencilOpSeparate (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glStencilOpSeparate(dwface, sfail, dpfail, dppass)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glStencilOpSeparate")
   IF pProc THEN CALL DWORD pProc USING Proto_glStencilOpSeparate(dwface, sfail, dpfail, dppass)
END MACRO
' ========================================================================================

' ========================================================================================
' Set front and/or back function and reference value for stencil testing.
' void glStencilFuncSeparate (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
' ========================================================================================
DECLARE SUB Proto_glStencilFuncSeparate (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD)
MACRO glStencilFuncSeparate(dwface, dwfunc, iref, dwmask)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glStencilFuncSeparate")
   IF pProc THEN CALL DWORD pProc USING Proto_glStencilFuncSeparate(dwface, dwfunc, iref, dwmask)
END MACRO
' ========================================================================================

' ========================================================================================
' Control the front and/or back writing of individual bits in the stencil planes.
' void glStencilMaskSeparate (GLenum face, GLuint mask);
' ========================================================================================
DECLARE SUB Proto_glStencilMaskSeparate (BYVAL DWORD,BYVAL DWORD)
MACRO glStencilMaskSeparate(dwface, dwmask)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glStencilMaskSeparate")
   IF pProc THEN CALL DWORD pProc USING Proto_glStencilMaskSeparate(dwface, dwmask)
END MACRO
' ========================================================================================

' ========================================================================================
' Attaches a shader object to a program object
' void glAttachShader (GLuint program, GLuint shader);
' ========================================================================================
DECLARE SUB Proto_glAttachShader (BYVAL DWORD, BYVAL DWORD)
MACRO glAttachShader(dwprogram, dwshader)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glAttachShader")
   IF pProc THEN CALL DWORD pProc USING Proto_glAttachShader(dwprogram, dwshader)
END MACRO
' ========================================================================================

' ========================================================================================
' Associates a generic vertex attribute index with a named attribute variable.
' void glBindAttribLocation (GLuint program, GLuint index, const GLchar *name);
' ========================================================================================
DECLARE SUB Proto_glBindAttribLocation (BYVAL DWORD, BYVAL DWORD, BYREF ASCIIZ)
MACRO glBindAttribLocation(dwprogram, dwindex, szname)
   MACROTEMP pProc, strname
   LOCAL pProc AS DWORD, strname AS STRING
   strname = szname
   pProc = wglGetProcAddress("glBindAttribLocation")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindAttribLocation(dwprogram, dwindex, BYCOPY strname)
END MACRO
' ========================================================================================

' ========================================================================================
' Compiles a shader object.
' void glCompileShader (GLuint shader);
' ========================================================================================
DECLARE SUB Proto_glCompileShader (BYVAL DWORD)
MACRO glCompileShader(dwshader)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCompileShader")
   IF pProc THEN CALL DWORD pProc USING Proto_glCompileShader(dwshader)
END MACRO
' ========================================================================================

' ========================================================================================
' Creates a program object.
' GLuint glCreateProgram (void);
' ========================================================================================
DECLARE FUNCTION Proto_glCreateProgram () AS DWORD
MACRO FUNCTION glCreateProgram
   MACROTEMP pProc, dwRes
   LOCAL pProc, dwRes AS DWORD
   pProc = wglGetProcAddress("glCreateProgram")
   IF pProc THEN CALL DWORD pProc USING Proto_glCreateProgram() TO dwRes
END MACRO = dwRes
' ========================================================================================

' ========================================================================================
' Creates a shader object
' GLAPI GLuint APIENTRY glCreateShader (GLenum);
' typedef GLuint (APIENTRYP PFNGLCREATESHADERPROC) (GLenum type);
' ========================================================================================
DECLARE FUNCTION Proto_glCreateShader (BYVAL DWORD) AS DWORD
MACRO FUNCTION glCreateShader(dwshadertype)
   MACROTEMP pProc, dwRes
   LOCAL pProc, dwRes AS DWORD
   pProc = wglGetProcAddress("glCreateShader")
   IF pProc THEN CALL DWORD pProc USING Proto_glCreateShader(dwshadertype) TO dwRes
END MACRO = dwRes
' ========================================================================================

' ========================================================================================
' Deletes a program object.
' void glDeleteProgram (GLuint program);
' ========================================================================================
DECLARE SUB Proto_glDeleteProgram (BYVAL DWORD)
MACRO glDeleteProgram(dwprogram)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDeleteProgram")
   IF pProc THEN CALL DWORD pProc USING Proto_glDeleteProgram(dwprogram)
END MACRO
' ========================================================================================

' ========================================================================================
' Deletes a shader object.
' GLAPI void APIENTRY glDeleteShader (GLuint);
' typedef void (APIENTRYP PFNGLDELETESHADERPROC) (GLuint shader);
' ========================================================================================
DECLARE SUB Proto_glDeleteShader (BYVAL DWORD)
MACRO glDeleteShader(dwshader)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDeleteShader")
   IF pProc THEN CALL DWORD pProc USING Proto_glDeleteShader(dwshader)
END MACRO
' ========================================================================================

' ========================================================================================
' Detaches a shader object from a program object to which it is attached.
' void glDetachShader (GLuint program, GLuint shader);
' ========================================================================================
DECLARE SUB Proto_glDetachShader (BYVAL DWORD, BYVAL DWORD)
MACRO glDetachShader(dwprogram, dwshader)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDetachShader")
   IF pProc THEN CALL DWORD pProc USING Proto_glDetachShader(dwprogram, dwshader)
END MACRO
' ========================================================================================

' ========================================================================================
' Disable a generic vertex attribute array.
' void glDisableVertexAttribArray (GLuint index);
' ========================================================================================
DECLARE SUB Proto_glDisableVertexAttribArray (BYVAL DWORD)
MACRO glDisableVertexAttribArray(dwindex)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDisableVertexAttribArray")
   IF pProc THEN CALL DWORD pProc USING Proto_glDisableVertexAttribArray(dwindex)
END MACRO
' ========================================================================================

' ========================================================================================
' Enable a generic vertex attribute array.
' void glEnableVertexAttribArray (GLuint index);
' ========================================================================================
DECLARE SUB Proto_glEnableVertexAttribArray (BYVAL DWORD)
MACRO glEnableVertexAttribArray(dwindex)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glEnableVertexAttribArray")
   IF pProc THEN CALL DWORD pProc USING Proto_glEnableVertexAttribArray(dwindex)
END MACRO
' ========================================================================================

' ========================================================================================
' Returns information about an active attribute variable for the specified program object.
' void glGetActiveAttrib (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length,
' GLint *size, GLenum *type, GLchar *name);
' ========================================================================================
DECLARE SUB Proto_glGetActiveAttrib (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYREF LONG, BYREF LONG, BYREF DWORD, BYREF ASCIIZ)
MACRO glGetActiveAttrib(dwprogram, dwindex, bufSize, ilength, isize, dwtype, szname)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetActiveAttrib")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetActiveAttrib(dwprogram, dwindex, bufSize, ilength, isize, dwtype, szname)
END MACRO
' ========================================================================================

' ========================================================================================
' Returns information about an active uniform variable for the specified program object.
' void glGetActiveUniform (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length,
' GLint *size, GLenum *type, GLchar *name);
' ========================================================================================
DECLARE SUB Proto_glGetActiveUniform (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYREF LONG, BYREF LONG, BYREF DWORD, BYREF ASCIIZ)
MACRO glGetActiveUniform(dwprogram, dwindex, bufSize, ilength, isize, dwtype, szname)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetActiveUniform")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetActiveUniform(dwprogram, dwindex, bufSize, ilength, isize, dwtype, szname)
END MACRO
' ========================================================================================

' ========================================================================================
' Returns the handles of the shader objects attached to a program object.
' void glGetAttachedShaders (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj);
' ========================================================================================
DECLARE SUB Proto_glGetAttachedShaders (BYVAL DWORD, BYVAL LONG, BYREF LONG, BYREF DWORD)
MACRO glGetAttachedShaders(dwprogram, imaxcount, icount, dwshaders)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetAttachedShaders")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetAttachedShaders(dwprogram, imaxcount, icount, dwshaders)
END MACRO
' ========================================================================================

' ========================================================================================
' Returns the location of an attribute variable.
' GLint glGetAttribLocation (GLuint program, const GLchar *name);
' ========================================================================================
DECLARE FUNCTION Proto_glGetAttribLocation (BYVAL DWORD, BYREF ASCIIZ) AS LONG
MACRO FUNCTION glGetAttribLocation(dwprogram, szname)
   MACROTEMP pProc, lRes, strname
   LOCAL pProc AS DWORD, lRes AS LONG, strname AS STRING
   strname = szname
   pProc = wglGetProcAddress("glGetAttribLocation")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetAttribLocation(dwprogram, BYCOPY strname) TO lRes
END MACRO = lRes
' ========================================================================================

' ========================================================================================
' Returns a parameter from a program object.
' void glGetProgramiv (GLuint program, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetProgramiv (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetProgramiv(dwprogram, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetProgramiv")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetProgramiv(dwprogram, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' Returns the information log for a program object.
' void glGetProgramInfoLog (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
' ========================================================================================
DECLARE SUB Proto_glGetProgramInfoLog (BYVAL DWORD, BYVAL LONG, BYREF LONG, BYREF ANY)
MACRO glGetProgramInfoLog(dwprogram, imaxLength, ilength, infoLog)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetProgramInfoLog")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetProgramInfoLog(dwprogram, imaxLength, ilength, infoLog)
END MACRO
' ========================================================================================

' ========================================================================================
' Returns a parameter from a shader object.
' void glGetShaderiv (GLuint shader, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetShaderiv (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetShaderiv(dwshader, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetShaderiv")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetShaderiv(dwshader, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' Returns the information log for a shader object.
' void glGetShaderInfoLog (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
' ========================================================================================
DECLARE SUB Proto_glGetShaderInfoLog (BYVAL DWORD, BYVAL LONG, BYREF LONG, BYREF ASCIIZ)
MACRO glGetShaderInfoLog(dwprogram, imaxLength, ilength, infoLog)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetShaderInfoLog")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetShaderInfoLog(dwprogram, imaxLength, ilength, infoLog)
END MACRO
' ========================================================================================

' ========================================================================================
' Returns the source code string from a shader object.
' void glGetShaderSource (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
' ========================================================================================
DECLARE SUB Proto_glGetShaderSource (BYVAL DWORD, BYVAL LONG, BYREF LONG, BYREF ASCIIZ)
MACRO glGetShaderSource(dwshader, bufSize, ilength, szsource)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetShaderSource")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetShaderSource(dwshader, bufSize, ilength, szsource)
END MACRO
' ========================================================================================

' ========================================================================================
' Returns the location of a uniform variable.
' GLint glGetUniformLocation (GLuint program, const GLchar *name);
' ========================================================================================
DECLARE FUNCTION Proto_glGetUniformLocation (BYVAL DWORD, BYREF ASCIIZ) AS LONG
MACRO FUNCTION glGetUniformLocation(dwprogram, szname)
   MACROTEMP pProc, lRes, strname
   LOCAL pProc AS DWORD, lRes AS LONG, strname AS STRING
   strname = szname
   pProc = wglGetProcAddress("glGetUniformLocation")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetUniformLocation(dwprogram, BYCOPY strname) TO lRes
END MACRO = lRes
' ========================================================================================

' ========================================================================================
' Returns the value of a uniform variable.
' void glGetUniformfv (GLuint program, GLint location, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetUniformfv (BYVAL DWORD, BYVAL LONG, BYREF SINGLE)
MACRO glGetUniformfv(dwprogram, ilocation, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetUniformfv")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetUniformfv(dwprogram, ilocation, params)
END MACRO
' ========================================================================================

' ========================================================================================
' Returns the value of a uniform variable.
' void glGetUniformiv (GLuint program, GLint location, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetUniformiv (BYVAL DWORD, BYVAL LONG, BYREF LONG)
MACRO glGetUniformiv(dwprogram, ilocation, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetUniformiv")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetUniformiv(dwprogram, ilocation, params)
END MACRO
' ========================================================================================

' ========================================================================================
' Return a generic vertex attribute parameter.
' void glGetVertexAttribdv (GLuint index, GLenum pname, GLdouble *params);
' ========================================================================================
DECLARE SUB Proto_glGetVertexAttribdv (BYVAL DWORD, BYVAL DWORD, BYREF DOUBLE)
MACRO glGetVertexAttribdv(dwindex, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetVertexAttribdv")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetVertexAttribdv(dwindex, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' Return a generic vertex attribute parameter.
' void glGetVertexAttribfv (GLuint index, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetVertexAttribfv (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetVertexAttribfv(dwindex, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetVertexAttribfv")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetVertexAttribfv(dwindex, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' Return a generic vertex attribute parameter.
' void glGetVertexAttribiv (GLuint index, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetVertexAttribiv (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetVertexAttribiv(dwindex, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetVertexAttribiv")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetVertexAttribiv(dwindex, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' Return a generic vertex attribute parameter.
' void glGetVertexAttribPointerv (GLuint index, GLenum pname, GLvoid* *pointer);
' ========================================================================================
DECLARE SUB Proto_glGetVertexAttribPointerv (BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glGetVertexAttribPointerv(dwindex, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetVertexAttribPointerv")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetVertexAttribPointerv(dwindex, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' Determines if a name corresponds to a program object.
' GLboolean glIsProgram (GLuint program);
' ========================================================================================
DECLARE FUNCTION Proto_glIsProgram (BYVAL DWORD) AS BYTE
MACRO FUNCTION glIsProgram(dwprogram)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glIsProgram")
   IF pProc THEN CALL DWORD pProc USING Proto_glIsProgram(dwprogram) TO bRes
END MACRO = bRes
' ========================================================================================

' ========================================================================================
' Determines if a name corresponds to a shader object.
' GLAPI GLboolean APIENTRY glIsShader (GLuint);
' typedef GLboolean (APIENTRYP PFNGLISSHADERPROC) (GLuint shader);
' ========================================================================================
DECLARE FUNCTION Proto_glIsShader (BYVAL DWORD) AS BYTE
MACRO FUNCTION glIsShader(dwshader)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glIsShader")
   IF pProc THEN CALL DWORD pProc USING Proto_glIsShader(dwshader) TO bRes
END MACRO = bRes
' ========================================================================================

' ========================================================================================
' Links a program object.
' GLAPI void APIENTRY glLinkProgram (GLuint);
' typedef void (APIENTRYP PFNGLLINKPROGRAMPROC) (GLuint program);
' ========================================================================================
DECLARE SUB Proto_glLinkProgram (BYVAL DWORD)
MACRO glLinkProgram(dwprogram)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glLinkProgram")
   IF pProc THEN CALL DWORD pProc USING Proto_glLinkProgram(dwprogram)
END MACRO
' ========================================================================================

' ========================================================================================
' Replaces the source code in a shader object.
' void glShaderSource (GLuint shader, GLsizei count, const GLchar* *string, const GLint *length);
' ========================================================================================
DECLARE SUB Proto_glShaderSource (BYVAL DWORD, BYVAL LONG, BYREF ANY, BYVAL LONG)
MACRO glShaderSource(dwshader, icount, szsource, ilength)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glShaderSource")
   IF pProc THEN CALL DWORD pProc USING Proto_glShaderSource(dwshader, icount, szsource, ilength)
END MACRO
' ========================================================================================

' ========================================================================================
' Installs a program object as part of current rendering state.
' void glUseProgram (GLuint program);
' ========================================================================================
DECLARE SUB Proto_glUseProgram (BYVAL DWORD)
MACRO glUseProgram(program)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUseProgram")
   IF pProc THEN CALL DWORD pProc USING Proto_glUseProgram(program)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the value of a uniform variable for the current program object.
' void glUniform1f (GLint location, GLfloat v0);
' ========================================================================================
DECLARE SUB Proto_glUniform1f (BYVAL LONG, BYVAL SINGLE)
MACRO glUniform1f(ilocation, v0)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform1f")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform1f(ilocation, v0)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the value of a uniform variable for the current program object.
' void glUniform2f (GLint location, GLfloat v0, GLfloat v1);
' ========================================================================================
DECLARE SUB Proto_glUniform2f (BYVAL LONG, BYVAL SINGLE, BYVAL SINGLE)
MACRO glUniform2f(ilocation, v0, v1)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform2f")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform2f(ilocation, v0, v1)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the value of a uniform variable for the current program object.
' void glUniform3f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
' ========================================================================================
DECLARE SUB Proto_glUniform3f (BYVAL LONG, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glUniform3f(ilocation, v0, v1, v2)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform3f")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform3f(ilocation, v0, v1, v2)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the value of a uniform variable for the current program object.
' void glUniform4f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
' ========================================================================================
DECLARE SUB Proto_glUniform4f (BYVAL LONG, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glUniform4f(ilocation, v0, v1, v2, v3)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform4f")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform4f(ilocation, v0, v1, v2, v3)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the value of a uniform variable for the current program object.
' void glUniform1i (GLint location, GLint v0);
' ========================================================================================
DECLARE SUB Proto_glUniform1i (BYVAL LONG, BYVAL LONG)
MACRO glUniform1i(ilocation, v0)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform1i")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform1i(ilocation, v0)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the value of a uniform variable for the current program object.
' void glUniform2i (GLint location, GLint v0, GLint v1);
' ========================================================================================
DECLARE SUB Proto_glUniform2i (BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glUniform2i(ilocation, v0, v1)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform2i")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform2i(ilocation, v0, v1)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the value of a uniform variable for the current program object.
' void glUniform3i (GLint location, GLint v0, GLint v1, GLint v2);
' ========================================================================================
DECLARE SUB Proto_glUniform3i (BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glUniform3i(ilocation, v0, v1, v2)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform3i")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform3i(ilocation, v0, v1, v2)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the value of a uniform variable for the current program object.
' void glUniform4i (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
' ========================================================================================
DECLARE SUB Proto_glUniform4i (BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glUniform4i(ilocation, v0, v1, v2, v3)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform4i")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform4i(ilocation, v0, v1, v2, v3)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the value of a uniform variable for the current program object.
' void glUniform1fv (GLint location, GLsizei count, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glUniform1fv (BYVAL LONG, BYVAL LONG, BYREF SINGLE)
MACRO glUniform1fv(ilocation, icount, fvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform1fv")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform1fv(ilocation, icount, fvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the value of a uniform variable for the current program object.
' void glUniform2fv (GLint location, GLsizei count, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glUniform2fv (BYVAL LONG, BYVAL LONG, BYREF SINGLE)
MACRO glUniform2fv(ilocation, icount, fvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform2fv")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform2fv(ilocation, icount, fvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the value of a uniform variable for the current program object.
' void glUniform3fv (GLint location, GLsizei count, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glUniform3fv (BYVAL LONG, BYVAL LONG, BYREF SINGLE)
MACRO glUniform3fv(ilocation, icount, fvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform3fv")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform3fv(ilocation, icount, fvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the value of a uniform variable for the current program object.
' void glUniform4fv (GLint location, GLsizei count, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glUniform4fv (BYVAL LONG, BYVAL LONG, BYREF SINGLE)
MACRO glUniform4fv(ilocation, icount, fvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform4fv")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform4fv(ilocation, icount, fvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the value of a uniform variable for the current program object.
' void glUniform1iv (GLint location, GLsizei count, const GLint *value);
' ========================================================================================
DECLARE SUB Proto_glUniform1iv (BYVAL LONG, BYVAL LONG, BYREF LONG)
MACRO glUniform1iv(ilocation, icount, fvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform1iv")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform1iv(ilocation, icount, fvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the value of a uniform variable for the current program object.
' void glUniform2iv (GLint location, GLsizei count, const GLint *value);
' ========================================================================================
DECLARE SUB Proto_glUniform2iv (BYVAL LONG, BYVAL LONG, BYREF LONG)
MACRO glUniform2iv(ilocation, icount, fvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform2iv")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform2iv(ilocation, icount, fvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the value of a uniform variable for the current program object.
' GLAPI void APIENTRY glUniform3iv (GLint, GLsizei, const GLint *);
' typedef void (APIENTRYP PFNGLUNIFORM3IVPROC) (GLint location, GLsizei count, const GLint *value);
' ========================================================================================
DECLARE SUB Proto_glUniform3iv (BYVAL LONG, BYVAL LONG, BYREF LONG)
MACRO glUniform3iv(ilocation, icount, ivalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform3iv")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform3iv(ilocation, icount, ivalue)
END MACRO
' ========================================================================================

' ========================================================================================
' Specify the value of a uniform variable for the current program object.
' void glUniform4iv (GLint location, GLsizei count, const GLint *value);
' ========================================================================================
DECLARE SUB Proto_glUniform4iv (BYVAL LONG, BYVAL LONG, BYREF LONG)
MACRO glUniform4iv(ilocation, icount, ivalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform4iv")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform4iv(ilocation, icount, ivalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniformMatrix2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glUniformMatrix2fv (BYVAL LONG, BYVAL LONG, BYVAL BYTE, BYREF SINGLE)
MACRO glUniformMatrix2fv(ilocation, icount, btranspose, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniformMatrix2fv")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniformMatrix2fv(ilocation, icount, btranspose, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniformMatrix3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glUniformMatrix3fv (BYVAL LONG, BYVAL LONG, BYVAL BYTE, BYREF SINGLE)
MACRO glUniformMatrix3fv(ilocation, icount, btranspose, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniformMatrix3fv")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniformMatrix3fv(ilocation, icount, btranspose, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniformMatrix4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glUniformMatrix4fv (BYVAL LONG, BYVAL LONG, BYVAL BYTE, BYREF SINGLE)
MACRO glUniformMatrix4fv(ilocation, icount, btranspose, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniformMatrix4fv")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniformMatrix4fv(ilocation, icount, btranspose, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Validates a program object.
' void glValidateProgram (GLuint program);
' ========================================================================================
DECLARE SUB Proto_glValidateProgram (BYVAL DWORD)
MACRO glValidateProgram(dwprogram)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glValidateProgram")
   IF pProc THEN CALL DWORD pProc USING Proto_glValidateProgram(dwprogram)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib1d (GLuint index, GLdouble x);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib1d (BYVAL DWORD, BYVAL DOUBLE)
MACRO glVertexAttrib1d(dwindex, x)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib1d")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib1d(dwindex, x)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib1dv (GLuint index, const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib1dv (BYVAL DWORD, BYREF DOUBLE)
MACRO glVertexAttrib1dv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib1dv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib1dv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib1f (GLuint index, GLfloat x);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib1f (BYVAL DWORD, BYVAL SINGLE)
MACRO glVertexAttrib1f(dwindex, v0)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib1f")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib1f(dwindex, v0)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib1fv (GLuint index, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib1fv (BYVAL DWORD, BYREF SINGLE)
MACRO glVertexAttrib1fv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib1fv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib1fv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' GLAPI void APIENTRY glVertexAttrib1s (GLuint, GLshort);
' typedef void (APIENTRYP PFNGLVERTEXATTRIB1SPROC) (GLuint index, GLshort x);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib1s (BYVAL DWORD, BYVAL INTEGER)
MACRO glVertexAttrib1s(dwindex, v0)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib1s")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib1s(dwindex, v0)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib1sv (GLuint index, const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib1sv (BYVAL DWORD, BYREF INTEGER)
MACRO glVertexAttrib1sv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib1sv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib1sv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib2d (GLuint index, GLdouble x, GLdouble y);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib2d (BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glVertexAttrib2d(dwindex, v0, v1)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib2d")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib2d(dwindex, v0, v1)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib2dv (GLuint index, const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib2dv (BYVAL DWORD, BYREF DOUBLE)
MACRO glVertexAttrib2dv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib2dv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib2dv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib2f (GLuint index, GLfloat x, GLfloat y);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib2f (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE)
MACRO glVertexAttrib2f(dwindex, v0, v1)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib2f")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib2f(dwindex, v0, v1)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib2fv (GLuint index, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib2fv (BYVAL DWORD, BYREF SINGLE)
MACRO glVertexAttrib2fv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib2fv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib2fv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib2s (GLuint index, GLshort x, GLshort y);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib2s (BYVAL DWORD, BYVAL INTEGER, BYVAL INTEGER)
MACRO glVertexAttrib2s(dwindex, v0, v1)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib2s")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib2s(dwindex, v0, v1)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib2sv (GLuint index, const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib2sv (BYVAL DWORD, BYREF INTEGER)
MACRO glVertexAttrib2sv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib2sv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib2sv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib3d (GLuint index, GLdouble x, GLdouble y, GLdouble z);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib3d (BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glVertexAttrib3d(dwindex, v0, v1, v2)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib3d")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib3d(dwindex, v0, v1, v2)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib3dv (GLuint index, const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib3dv (BYVAL DWORD, BYREF DOUBLE)
MACRO glVertexAttrib3dv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib3dv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib3dv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib3f (GLuint index, GLfloat x, GLfloat y, GLfloat z);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib3f (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glVertexAttrib3f(dwindex, v0, v1, v2)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib3f")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib3f(dwindex, v0, v1, v2)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib3fv (GLuint index, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib3fv (BYVAL DWORD, BYREF SINGLE)
MACRO glVertexAttrib3fv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib3fv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib3fv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib3s (GLuint index, GLshort x, GLshort y, GLshort z);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib3s (BYVAL DWORD, BYVAL INTEGER, BYVAL INTEGER, BYVAL INTEGER)
MACRO glVertexAttrib3s(dwindex, v0, v1, v2)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib3s")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib3s(dwindex, v0, v1, v2)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib3sv (GLuint index, const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib3sv (BYVAL DWORD, BYREF INTEGER)
MACRO glVertexAttrib3sv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib3sv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib3sv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib4Nbv (GLuint index, const GLbyte *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4Nbv (BYVAL DWORD, BYREF BYTE)
MACRO glVertexAttrib4Nbv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4Nbv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4Nbv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib4Niv (GLuint index, const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4Niv (BYVAL DWORD, BYREF LONG)
MACRO glVertexAttrib4Niv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4Nbv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4Nbv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib4Nsv (GLuint index, const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4Nsv (BYVAL DWORD, BYREF INTEGER)
MACRO glVertexAttrib4Nsv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4Nsv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4Nsv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib4Nub (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4Nub (BYVAL DWORD, BYVAL BYTE, BYVAL BYTE, BYVAL BYTE, BYVAL BYTE)
MACRO glVertexAttrib4Nub(dwindex, v0, v1, v2, v3)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4Nub")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4Nub(dwindex, v0, v1, v2, v3)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib4Nubv (GLuint index, const GLubyte *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4Nubv (BYVAL DWORD, BYREF BYTE)
MACRO glVertexAttrib4Nubv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4Nubv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4Nubv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib4Nuiv (GLuint index, const GLuint *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4Nuiv (BYVAL DWORD, BYREF DWORD)
MACRO glVertexAttrib4Nuiv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4Nuiv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4Nuiv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib4Nusv (GLuint index, const GLushort *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4Nusv (BYVAL DWORD, BYREF WORD)
MACRO glVertexAttrib4Nusv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4Nusv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4Nusv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib4bv (GLuint index, const GLbyte *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4bv (BYVAL DWORD, BYREF BYTE)
MACRO glVertexAttrib4bv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4bv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4bv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4d (BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glVertexAttrib4d(dwindex, v0, v1, v2, v3)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4d")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4d(dwindex, v0, v1, v2, v3)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib4dv (GLuint index, const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4dv (BYVAL DWORD, BYREF DOUBLE)
MACRO glVertexAttrib4dv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4dv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4dv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib4f (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4f (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glVertexAttrib4f(dwindex, v0, v1, v2, v3)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4f")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4f(dwindex, v0, v1, v2, v3)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' GLAPI void APIENTRY glVertexAttrib4fv (GLuint, const GLfloat *);
' typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVPROC) (GLuint index, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4fv (BYVAL DWORD, BYREF SINGLE)
MACRO glVertexAttrib4fv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4fv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4fv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib4iv (GLuint index, const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4iv (BYVAL DWORD, BYREF LONG)
MACRO glVertexAttrib4iv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4iv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4iv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib4s (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4s (BYVAL DWORD, BYVAL INTEGER, BYVAL INTEGER, BYVAL INTEGER, BYVAL INTEGER)
MACRO glVertexAttrib4s(dwindex, v0, v1, v2, v3)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4s")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4s(dwindex, v0, v1, v2, v3)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib4sv (GLuint index, const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4sv (BYVAL DWORD, BYREF INTEGER)
MACRO glVertexAttrib4sv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4sv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4sv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib4ubv (GLuint index, const GLubyte *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4ubv (BYVAL DWORD, BYREF BYTE)
MACRO glVertexAttrib4ubv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4ubv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4ubv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib4uiv (GLuint index, const GLuint *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4uiv (BYVAL DWORD, BYREF DWORD)
MACRO glVertexAttrib4uiv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4uiv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4uiv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttrib4usv (GLuint index, const GLushort *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4usv (BYVAL DWORD, BYREF WORD)
MACRO glVertexAttrib4usv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4usv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4usv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' Specifies the value of a generic vertex attribute.
' void glVertexAttribPointer (GLuint index, GLint size, GLenum type, GLboolean normalized,
' GLsizei stride, const GLvoid *pointer);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribPointer (BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL BYTE, BYVAL LONG, BYREF ANY)
MACRO glVertexAttribPointer(dwindex, dwsize, dwtype, bnormalized, istride, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribPointer")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribPointer(dwindex, dwsize, dwsize, dwtype, bnormalized, istride, ppointer)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES

#ENDIF

#IF NOT %DEF(%GL_VERSION_2_1)
%GL_VERSION_2_1 = 1

'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glUniformMatrix2x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glUniformMatrix2x3fv (BYVAL LONG, BYVAL LONG, BYVAL BYTE, BYREF SINGLE)
MACRO glUniformMatrix2x3fv(ilocation, icount, btranspose, fvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniformMatrix2x3fv")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniformMatrix2x3fv(ilocation, icount, btranspose, fvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniformMatrix3x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glUniformMatrix3x2fv (BYVAL LONG, BYVAL LONG, BYVAL BYTE, BYREF SINGLE)
MACRO glUniformMatrix3x2fv(ilocation, icount, btranspose, fvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniformMatrix3x2fv")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniformMatrix3x2fv(ilocation, icount, btranspose, fvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniformMatrix2x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glUniformMatrix2x4fv (BYVAL LONG, BYVAL LONG, BYVAL BYTE, BYREF SINGLE)
MACRO glUniformMatrix2x4fv(ilocation, icount, btranspose, fvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniformMatrix2x4fv")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniformMatrix2x4fv(ilocation, icount, btranspose, fvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniformMatrix4x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glUniformMatrix4x2fv (BYVAL LONG, BYVAL LONG, BYVAL BYTE, BYREF SINGLE)
MACRO glUniformMatrix4x2fv(ilocation, icount, btranspose, fvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniformMatrix4x2fv")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniformMatrix4x2fv(ilocation, icount, btranspose, fvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniformMatrix3x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glUniformMatrix3x4fv (BYVAL LONG, BYVAL LONG, BYVAL BYTE, BYREF SINGLE)
MACRO glUniformMatrix3x4fv(ilocation, icount, btranspose, fvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniformMatrix3x4fv")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniformMatrix3x4fv(ilocation, icount, btranspose, fvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniformMatrix4x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glUniformMatrix4x3fv (BYVAL LONG, BYVAL LONG, BYVAL BYTE, BYREF SINGLE)
MACRO glUniformMatrix4x3fv(ilocation, icount, btranspose, fvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniformMatrix4x3fv")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniformMatrix4x3fv(ilocation, icount, btranspose, fvalue)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES

#ENDIF

#IF NOT %DEF(%GL_VERSION_3_0)
%GL_VERSION_3_0 = 1
'/* OpenGL 3.0 also reuses entry points from these extensions: */
'/* ARB_framebuffer_object */
'/* ARB_map_buffer_range */
'/* ARB_vertex_array_object */
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glColorMaski (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
' ========================================================================================
DECLARE SUB Proto_glColorMaski (BYVAL DWORD, BYVAL BYTE, BYVAL BYTE, BYVAL BYTE, BYVAL BYTE)
MACRO glColorMaski(dwindex, r, g, b, a)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glColorMaski")
   IF pProc THEN CALL DWORD pProc USING Proto_glColorMaski(dwindex, r, g, b, a)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetBooleani_v (GLenum target, GLuint index, GLboolean *data);
' ========================================================================================
DECLARE SUB Proto_glGetBooleani_v (BYVAL DWORD, BYVAL DWORD, BYREF BYTE)
MACRO glGetBooleani_v(dwtarget, dwindex, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetBooleani_v")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetBooleani_v(dwtarget, dwindex, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetIntegeri_v (GLenum target, GLuint index, GLint *data);
' ========================================================================================
DECLARE SUB Proto_glGetIntegeri_v (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetIntegeri_v(dwtarget, dwindex, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetIntegeri_v")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetIntegeri_v(dwtarget, dwindex, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' void glEnablei (GLenum target, GLuint index);
' ========================================================================================
DECLARE SUB Proto_glEnablei (BYVAL DWORD, BYVAL DWORD)
MACRO glEnablei(dwtarget, dwindex)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glEnablei")
   IF pProc THEN CALL DWORD pProc USING Proto_glEnablei(dwtarget, dwindex)
END MACRO
' ========================================================================================

' ========================================================================================
' void glDisablei (GLenum target, GLuint index);
' ========================================================================================
DECLARE SUB Proto_glDisablei (BYVAL DWORD, BYVAL DWORD)
MACRO glDisablei(dwtarget, dwindex)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDisablei")
   IF pProc THEN CALL DWORD pProc USING Proto_glDisablei(dwtarget, dwindex)
END MACRO
' ========================================================================================

' ========================================================================================
' GLboolean glIsEnabledi (GLenum target, GLuint index);
' ========================================================================================
DECLARE FUNCTION Proto_glIsEnabledi (BYVAL DWORD, BYVAL DWORD) AS BYTE
MACRO FUNCTION glIsEnabledi(dwtarget, dwindex)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glIsEnabledi")
   IF pProc THEN CALL DWORD pProc USING Proto_glIsEnabledi(dwtarget, dwindex) TO bRes
END MACRO = bRes
' ========================================================================================

' ========================================================================================
' void glBeginTransformFeedback (GLenum primitiveMode);
' ========================================================================================
DECLARE SUB Proto_glBeginTransformFeedback (BYVAL DWORD)
MACRO glBeginTransformFeedback(primitiveMode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBeginTransformFeedback")
   IF pProc THEN CALL DWORD pProc USING Proto_glBeginTransformFeedback(primitiveMode)
END MACRO
' ========================================================================================

' ========================================================================================
' void glEndTransformFeedback (void);
' ========================================================================================
DECLARE SUB Proto_glEndTransformFeedback
MACRO glEndTransformFeedback
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glEndTransformFeedback")
   IF pProc THEN CALL DWORD pProc USING Proto_glEndTransformFeedback
END MACRO
' ========================================================================================

' ========================================================================================
' void glBindBufferRange (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
' ========================================================================================
DECLARE SUB Proto_glBindBufferRange (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glBindBufferRange(dwtarget, dwindex, buffer, dwoffset, dwsize)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBindBufferRange")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindBufferRange(dwtarget, dwindex, buffer, dwoffset, dwsize)
END MACRO
' ========================================================================================

' ========================================================================================
' void glBindBufferBase (GLenum target, GLuint index, GLuint buffer);
' ========================================================================================
DECLARE SUB Proto_glBindBufferBase (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glBindBufferBase(dwtarget, dwindex, buffer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBindBufferBase")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindBufferBase(dwtarget, dwindex, buffer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTransformFeedbackVaryings (GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode);
' ========================================================================================
DECLARE SUB Proto_glTransformFeedbackVaryings (BYVAL DWORD, BYVAL LONG, BYREF LONG, BYVAL DWORD)
MACRO glTransformFeedbackVaryings(dwprogram, icount, plocations, bufferMode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTransformFeedbackVaryings")
   IF pProc THEN CALL DWORD pProc USING Proto_glTransformFeedbackVaryings(dwprogram, icount, plocations, bufferMode)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetTransformFeedbackVarying (GLuint program, GLuint index, GLint *location);
' ========================================================================================
DECLARE SUB Proto_glGetTransformFeedbackVarying (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetTransformFeedbackVarying(dwprogram, dwindex, plocation)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetTransformFeedbackVarying")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetTransformFeedbackVarying(dwprogram, dwindex, plocation)
END MACRO
' ========================================================================================

' ========================================================================================
' void glClampColor (GLenum target, GLenum clamp);
' ========================================================================================
DECLARE SUB Proto_glClampColor (BYVAL DWORD, BYVAL DWORD)
MACRO glClampColor(dwtarget, dwclamp)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glClampColor")
   IF pProc THEN CALL DWORD pProc USING Proto_glClampColor(dwtarget, dwclamp)
END MACRO
' ========================================================================================

' ========================================================================================
' void glBeginConditionalRender (GLuint id, GLenum mode);
' ========================================================================================
DECLARE SUB Proto_glBeginConditionalRender (BYVAL DWORD, BYVAL DWORD)
MACRO glBeginConditionalRender(dwid, dwmode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBeginConditionalRender")
   IF pProc THEN CALL DWORD pProc USING Proto_glBeginConditionalRender(dwid, dwmode)
END MACRO
' ========================================================================================

' ========================================================================================
' void glEndConditionalRender (void);
' ========================================================================================
DECLARE SUB Proto_glEndConditionalRender
MACRO glEndConditionalRender
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glEndConditionalRender")
   IF pProc THEN CALL DWORD pProc USING Proto_glEndConditionalRender
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI1i (GLuint index, GLint x);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI1i (BYVAL DWORD, BYVAL LONG)
MACRO glVertexAttribI1i(dwindex, x)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI1i")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI1i(dwindex, x)
END MACRO
' ========================================================================================

' ========================================================================================
' GLAPI void APIENTRY glVertexAttribI2i (GLuint, GLint, GLint);
' typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IPROC) (GLuint index, GLint x, GLint y);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI2i (BYVAL DWORD, BYVAL LONG, BYVAL LONG)
MACRO glVertexAttribI2i(dwindex, x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI2i")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI2i(dwindex, x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI3i (GLuint index, GLint x, GLint y, GLint z);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI3i (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glVertexAttribI3i(dwindex, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI3i")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI3i(dwindex, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI4i (GLuint index, GLint x, GLint y, GLint z, GLint w);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI4i (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glVertexAttribI4i(dwindex, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI4i")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI4i(dwindex, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI1ui (GLuint index, GLuint x);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI1ui (BYVAL DWORD, BYVAL DWORD)
MACRO glVertexAttribI1ui(dwindex, x)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI1ui")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI1ui(dwindex, x)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI2ui (GLuint index, GLuint x, GLuint y);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI2ui (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glVertexAttribI2ui(dwindex, x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI2ui")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI2ui(dwindex, x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI3ui (GLuint index, GLuint x, GLuint y, GLuint z);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI3ui (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glVertexAttribI3ui(dwindex, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI3ui")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI3ui(dwindex, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI4ui (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI4ui (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glVertexAttribI4ui(dwindex, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI4ui")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI4ui(dwindex, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI1iv (GLuint index, const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI1iv (BYVAL DWORD, BYREF LONG)
MACRO glVertexAttribI1iv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI1iv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI1iv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI2iv (GLuint index, const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI2iv (BYVAL DWORD, BYREF LONG)
MACRO glVertexAttribI2iv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI2iv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI2iv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI3iv (GLuint index, const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI3iv (BYVAL DWORD, BYREF LONG)
MACRO glVertexAttribI3iv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI3iv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI3iv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI4iv (GLuint index, const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI4iv (BYVAL DWORD, BYREF LONG)
MACRO glVertexAttribI4iv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI4iv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI4iv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI1uiv (GLuint index, const GLuint *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI1uiv (BYVAL DWORD, BYREF DWORD)
MACRO glVertexAttribI1uiv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI1uiv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI1uiv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI2uiv (GLuint index, const GLuint *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI2uiv (BYVAL DWORD, BYREF DWORD)
MACRO glVertexAttribI2uiv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI2uiv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI2uiv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI3uiv (GLuint index, const GLuint *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI3uiv (BYVAL DWORD, BYREF DWORD)
MACRO glVertexAttribI3uiv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI3uiv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI3uiv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI4uiv (GLuint index, const GLuint *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI4uiv (BYVAL DWORD, BYREF DWORD)
MACRO glVertexAttribI4uiv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI4uiv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI4uiv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI4bv (GLuint index, const GLbyte *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI4bv (BYVAL DWORD, BYREF BYTE)
MACRO glVertexAttribI4bv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI4bv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI4bv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI4sv (GLuint index, const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI4sv (BYVAL DWORD, BYREF INTEGER)
MACRO glVertexAttribI4sv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI4sv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI4sv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI4ubv (GLuint index, const GLubyte *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI4ubv (BYVAL DWORD, BYREF BYTE)
MACRO glVertexAttribI4ubv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI4ubv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI4ubv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI4usv (GLuint index, const GLushort *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI4usv (BYVAL DWORD, BYREF WORD)
MACRO glVertexAttribI4usv(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI4usv")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI4usv(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribIPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribIPointer (BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glVertexAttribIPointer(dwindex, isize, dwtype, istride, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribIPointer")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribIPointer(dwindex, isize, dwtype, istride, ppointer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetVertexAttribIiv (GLuint index, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetVertexAttribIiv (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetVertexAttribIiv(dwindex, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetVertexAttribIiv")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetVertexAttribIiv(dwindex, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetVertexAttribIuiv (GLuint index, GLenum pname, GLuint *params);
' ========================================================================================
DECLARE SUB Proto_glGetVertexAttribIuiv (BYVAL DWORD, BYVAL DWORD, BYREF DWORD)
MACRO glGetVertexAttribIuiv(dwindex, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetVertexAttribIuiv")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetVertexAttribIuiv(dwindex, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetUniformuiv (GLuint program, GLint location, GLuint *params);
' ========================================================================================
DECLARE SUB Proto_glGetUniformuiv (BYVAL DWORD, BYVAL LONG, BYREF DWORD)
MACRO glGetUniformuiv(dwprogran, ilocation, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetUniformuiv")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetUniformuiv(dwprogran, ilocation, params)
END MACRO
' ========================================================================================

' ========================================================================================
' void glBindFragDataLocation (GLuint program, GLuint color, const GLchar *name);
' ========================================================================================
DECLARE SUB Proto_glBindFragDataLocation (BYVAL DWORD, BYVAL DWORD, BYREF ASCIIZ)
MACRO glBindFragDataLocation(dwprogran, dwcolor, szname)
   MACROTEMP pProc, strname
   LOCAL pProc AS DWORD, strname AS STRING
   strname = szname
   pProc = wglGetProcAddress("glBindFragDataLocation")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindFragDataLocation(dwprogran, dwcolor, BYCOPY strname)
END MACRO
' ========================================================================================

' ========================================================================================
' GLint glGetFragDataLocation (GLuint program, const GLchar *name);
' ========================================================================================
DECLARE FUNCTION Proto_glGetFragDataLocation (BYVAL DWORD, BYREF ASCIIZ) AS LONG
MACRO FUNCTION glGetFragDataLocation(dwprogran, szname)
   MACROTEMP pProc, lRes, strname
   LOCAL pProc AS DWORD, lRes AS LONG, strname AS STRING
   strname = szname
   pProc = wglGetProcAddress("glGetFragDataLocation")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetFragDataLocation(dwprogran, BYCOPY strname) TO lRes
END MACRO = lRes
' ========================================================================================

' ========================================================================================
' void glUniform1ui (GLint location, GLuint v0);
' ========================================================================================
DECLARE SUB Proto_glUniform1ui (BYVAL LONG, BYVAL DWORD)
MACRO glUniform1ui(ilocation, v0)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform1ui")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform1ui(ilocation, v0)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform2ui (GLint location, GLuint v0, GLuint v1);
' ========================================================================================
DECLARE SUB Proto_glUniform2ui (BYVAL LONG, BYVAL DWORD, BYVAL DWORD)
MACRO glUniform2ui(ilocation, v0, v1)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform2ui")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform2ui(ilocation, v0, v1)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform3ui (GLint location, GLuint v0, GLuint v1, GLuint v2);
' ========================================================================================
DECLARE SUB Proto_glUniform3ui (BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glUniform3ui(ilocation, v0, v1, v2)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform3ui")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform3ui(ilocation, v0, v1, v2)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform4ui (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
' ========================================================================================
DECLARE SUB Proto_glUniform4ui (BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glUniform4ui(ilocation, v0, v1, v2, v3)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform4ui")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform4ui(ilocation, v0, v1, v2, v3)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform1uiv (GLint location, GLsizei count, const GLuint *value);
' ========================================================================================
DECLARE SUB Proto_glUniform1uiv (BYVAL LONG, BYVAL LONG, BYREF DWORD)
MACRO glUniform1uiv(ilocation, icount, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform1uiv")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform1uiv(ilocation, icount, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform2uiv (GLint location, GLsizei count, const GLuint *value);
' ========================================================================================
DECLARE SUB Proto_glUniform2uiv (BYVAL LONG, BYVAL LONG, BYREF DWORD)
MACRO glUniform2uiv(ilocation, icount, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform2uiv")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform2uiv(ilocation, icount, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform3uiv (GLint location, GLsizei count, const GLuint *value);
' ========================================================================================
DECLARE SUB Proto_glUniform3uiv (BYVAL LONG, BYVAL LONG, BYREF DWORD)
MACRO glUniform3uiv(ilocation, icount, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform3uiv")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform3uiv(ilocation, icount, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform4uiv (GLint location, GLsizei count, const GLuint *value);
' ========================================================================================
DECLARE SUB Proto_glUniform4uiv (BYVAL LONG, BYVAL LONG, BYREF DWORD)
MACRO glUniform4uiv(ilocation, icount, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform4uiv")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform4uiv(ilocation, icount, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexParameterIiv (GLenum target, GLenum pname, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glTexParameterIiv (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glTexParameterIiv(dwtarget, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexParameterIiv")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexParameterIiv(dwtarget, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexParameterIuiv (GLenum target, GLenum pname, const GLuint *params);
' ========================================================================================
DECLARE SUB Proto_glTexParameterIuiv (BYVAL DWORD, BYVAL DWORD, BYREF DWORD)
MACRO glTexParameterIuiv(dwtarget, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexParameterIuiv")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexParameterIuiv(dwtarget, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetTexParameterIiv (GLenum target, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetTexParameterIiv (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetTexParameterIiv(dwtarget, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetTexParameterIiv")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetTexParameterIiv(dwtarget, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetTexParameterIuiv (GLenum target, GLenum pname, GLuint *params);
' ========================================================================================
DECLARE SUB Proto_glGetTexParameterIuiv (BYVAL DWORD, BYVAL DWORD, BYREF DWORD)
MACRO glGetTexParameterIuiv(dwtarget, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetTexParameterIuiv")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetTexParameterIuiv(dwtarget, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' void glClearBufferiv (GLenum buffer, const GLint *value);
' ========================================================================================
DECLARE SUB Proto_glClearBufferiv (BYVAL DWORD, BYREF LONG)
MACRO glClearBufferiv(dwbuffer, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glClearBufferiv")
   IF pProc THEN CALL DWORD pProc USING Proto_glClearBufferiv(dwbuffer, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glClearBufferuiv (GLenum buffer, const GLuint *value);
' ========================================================================================
DECLARE SUB Proto_glClearBufferuiv (BYVAL DWORD, BYREF DWORD)
MACRO glClearBufferuiv(dwbuffer, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glClearBufferuiv")
   IF pProc THEN CALL DWORD pProc USING Proto_glClearBufferuiv(dwbuffer, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glClearBufferfv (GLenum buffer, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glClearBufferfv (BYVAL DWORD, BYREF SINGLE)
MACRO glClearBufferfv(dwbuffer, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glClearBufferfv")
   IF pProc THEN CALL DWORD pProc USING Proto_glClearBufferfv(dwbuffer, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glClearBufferfi (GLenum buffer, GLfloat depth, GLint stencil);
' ========================================================================================
DECLARE SUB Proto_glClearBufferfi (BYVAL DWORD, BYVAL SINGLE, BYVAL LONG)
MACRO glClearBufferfi(dwbuffer, fdepth, istencil)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glClearBufferfi")
   IF pProc THEN CALL DWORD pProc USING Proto_glClearBufferfi(dwbuffer, fdepth, istencil)
END MACRO
' ========================================================================================

' ========================================================================================
' const GLubyte * glGetStringi (GLenum name, GLuint index);
' ========================================================================================
DECLARE FUNCTION Proto_glGetStringi (BYVAL DWORD, BYVAL DWORD) AS DWORD
MACRO FUNCTION glGetStringi(szname, dwindex)
   MACROTEMP pProc, dwRes
   LOCAL pProc, dwRes AS DWORD
   pProc = wglGetProcAddress("glGetStringi")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetStringi(szname, dwindex)
END MACRO = dwRes
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF

#IF NOT %DEF(%GL_ARB_multitexture)
%GL_ARB_multitexture  = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' Select active texture unit.
' void glActiveTextureARB (GLenum texture);
' ========================================================================================
DECLARE SUB Proto_glActiveTextureARB (BYVAL DWORD)
MACRO glActiveTextureARB(dwtexture)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glActiveTextureARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glActiveTextureARB(dwtexture)
END MACRO
' ========================================================================================

' ========================================================================================
' Select active texture unit.
' void glClientActiveTextureARB (GLenum texture);
' ========================================================================================
DECLARE SUB Proto_glClientActiveTextureARB (BYVAL DWORD)
MACRO glClientActiveTextureARB(dwtexture)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glClientActiveTextureARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glClientActiveTextureARB(dwtexture)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord1dARB (GLenum target, GLdouble s);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord1dARB (BYVAL DWORD, BYVAL DOUBLE)
MACRO glMultiTexCoord1dARB(dwunit, s)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord1dARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord1dARB(dwunit, s)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord1dvARB (GLenum target, const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord1dvARB (BYVAL DWORD, BYREF DOUBLE)
MACRO glMultiTexCoord1dvARB(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord1dvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord1dvARB(dwtarget, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord1fARB (GLenum target, GLfloat s);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord1fARB (BYVAL DWORD, BYVAL SINGLE)
MACRO glMultiTexCoord1fARB(dwtarget, s)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord1fARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord1fARB(dwtarget, s)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord1fvARB (GLenum target, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord1fvARB (BYVAL DWORD, BYREF SINGLE)
MACRO glMultiTexCoord1fvARB(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord1fvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord1fvARB(dwtarget, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord1iARB (GLenum target, GLint s);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord1iARB (BYVAL DWORD, BYVAL LONG)
MACRO glMultiTexCoord1iARB(dwtarget, s)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord1iARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord1iARB(dwtarget, s)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord1ivARB (GLenum target, const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord1ivARB (BYVAL DWORD, BYREF LONG)
MACRO glMultiTexCoord1ivARB(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord1ivARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord1ivARB(dwtarget, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord1sARB (GLenum target, GLshort s);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord1sARB (BYVAL DWORD, BYVAL INTEGER)
MACRO glMultiTexCoord1sARB(dwtarget, s)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord1sARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord1sARB(dwtarget, s)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord1svARB (GLenum target, const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord1svARB (BYVAL DWORD, BYREF INTEGER)
MACRO glMultiTexCoord1svARB(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord1svARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord1svARB(dwtarget, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord2dARB (GLenum target, GLdouble s, GLdouble t);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord2dARB (BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glMultiTexCoord2dARB(dwtarget, s, t)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord2dARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord2dARB(dwtarget, s, t)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord2dvARB (GLenum target, const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord2dvARB (BYVAL DWORD, BYREF DOUBLE)
MACRO glMultiTexCoord2dvARB(dwtarget, s, t)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord2dvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord2dvARB(dwtarget, s, t)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord2fARB (GLenum target, GLfloat s, GLfloat t);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord2fARB (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE)
MACRO glMultiTexCoord2fARB(dwtarget, s, t)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord2fARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord2fARB(dwtarget, s, t)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord2fvARB (GLenum target, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord2fvARB (BYVAL DWORD, BYREF SINGLE)
MACRO glMultiTexCoord2fvARB(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord2fvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord2fvARB(dwtarget, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord2iARB (GLenum target, GLint s, GLint t);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord2iARB (BYVAL DWORD, BYVAL LONG, BYVAL LONG)
MACRO glMultiTexCoord2iARB(dwtarget, s, t)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord2iARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord2iARB(dwtarget, s, t)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord2ivARB (GLenum target, const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord2ivARB (BYVAL DWORD, BYREF LONG)
MACRO glMultiTexCoord2ivARB(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord2ivARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord2ivARB(dwtarget, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord2sARB (GLenum target, GLshort s, GLshort t);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord2sARB (BYVAL DWORD, BYVAL INTEGER, BYVAL INTEGER)
MACRO glMultiTexCoord2sARB(dwtarget, s, t)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord2sARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord2sARB(dwtarget, s, t)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord2svARB (GLenum target, const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord2svARB (BYVAL DWORD, BYREF INTEGER)
MACRO glMultiTexCoord2svARB(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord2svARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord2svARB(dwtarget, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord3dARB (GLenum target, GLdouble s, GLdouble t, GLdouble r);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord3dARB (BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glMultiTexCoord3dARB(dwtarget, s, t, u)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord3dARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord3dARB(dwtarget, s, t, u)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord3dvARB (GLenum target, const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord3dvARB (BYVAL DWORD, BYREF DOUBLE)
MACRO glMultiTexCoord3dvARB(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord3dvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord3dvARB(dwtarget, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord3fARB (GLenum target, GLfloat s, GLfloat t, GLfloat r);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord3fARB (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glMultiTexCoord3fARB(dwtarget, s, t, u)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord3fARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord3fARB(dwtarget, s, t, u)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord3fvARB (GLenum target, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord3fvARB (BYVAL DWORD, BYREF SINGLE)
MACRO glMultiTexCoord3fvARB(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord3fvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord3fvARB(dwtarget, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord3iARB (GLenum target, GLint s, GLint t, GLint r);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord3iARB (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glMultiTexCoord3iARB(dwtarget, s, t, u)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord3iARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord3iARB(dwtarget, s, t, u)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord3ivARB (GLenum target, const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord3ivARB (BYVAL DWORD, BYREF LONG)
MACRO glMultiTexCoord3ivARB(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord3ivARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord3ivARB(dwtarget, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord3sARB (GLenum target, GLshort s, GLshort t, GLshort r);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord3sARB (BYVAL DWORD, BYVAL INTEGER, BYVAL INTEGER, BYVAL INTEGER)
MACRO glMultiTexCoord3sARB(dwtarget, s, t, u)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord3sARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord3sARB(dwtarget, s, t, u)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord3svARB (GLenum target, const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord3svARB (BYVAL DWORD, BYREF INTEGER)
MACRO glMultiTexCoord3svARB(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord3svARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord3svARB(dwtarget, v)
END MACRO
' ========================================================================================

' ========================================================================================
' GLAPI void APIENTRY glMultiTexCoord4dARB (GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
' typedef void (APIENTRYP PFNGLMULTITEXCOORD4DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord4dARB (BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glMultiTexCoord4dARB(dwtarget, s, t, u, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord4dARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord4dARB(dwtarget, s, t, u, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord4dvARB (GLenum target, const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord4dvARB (BYVAL DWORD, BYREF DOUBLE)
MACRO glMultiTexCoord4dvARB(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord4dvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord4dvARB(dwtarget, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord4fARB (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord4fARB (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glMultiTexCoord4fARB(dwtarget, s, t, u, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord4fARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord4fARB(dwtarget, s, t, u, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord4fvARB (GLenum target, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord4fvARB (BYVAL DWORD, BYREF SINGLE)
MACRO glMultiTexCoord4fvARB(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord4fvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord4fvARB(dwtarget, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord4iARB (GLenum target, GLint s, GLint t, GLint r, GLint q);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord4iARB (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glMultiTexCoord4iARB(dwtarget, s, t, u, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord4iARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord4iARB(dwtarget, s, t, u, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord4ivARB (GLenum target, const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord4ivARB (BYVAL DWORD, BYREF LONG)
MACRO glMultiTexCoord4ivARB(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord4ivARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord4ivARB(dwtarget, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord4sARB (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord4sARB (BYVAL DWORD, BYVAL INTEGER, BYVAL INTEGER, BYVAL INTEGER, BYVAL INTEGER)
MACRO glMultiTexCoord4sARB(dwtarget, s, t, u, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord4sARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord4sARB(dwtarget, s, t, u, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord4svARB (GLenum target, const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord4svARB (BYVAL DWORD, BYREF INTEGER)
MACRO glMultiTexCoord4svARB(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord4svARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord4svARB(dwtarget, v)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_ARB_transpose_matrix)
%GL_ARB_transpose_matrix = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glLoadTransposeMatrixfARB (const GLfloat *m);
' ========================================================================================
DECLARE SUB Proto_glLoadTransposeMatrixfARB (BYREF SINGLE)
MACRO glLoadTransposeMatrixfARB(m)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glLoadTransposeMatrixfARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glLoadTransposeMatrixfARB(m)
END MACRO
' ========================================================================================

' ========================================================================================
' void glLoadTransposeMatrixdARB (const GLdouble *m);
' ========================================================================================
DECLARE SUB Proto_glLoadTransposeMatrixdARB (BYREF DOUBLE)
MACRO glLoadTransposeMatrixdARB(m)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glLoadTransposeMatrixdARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glLoadTransposeMatrixdARB(m)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultTransposeMatrixfARB (const GLfloat *m);
' ========================================================================================
DECLARE SUB Proto_glMultTransposeMatrixfARB (BYREF SINGLE)
MACRO glMultTransposeMatrixfARB(m)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultTransposeMatrixfARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultTransposeMatrixfARB(m)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultTransposeMatrixdARB (const GLdouble *m);
' ========================================================================================
DECLARE SUB Proto_glMultTransposeMatrixdARB (BYREF DOUBLE)
MACRO glMultTransposeMatrixdARB(m)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultTransposeMatrixdARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultTransposeMatrixdARB(m)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_ARB_multisample)
%GL_ARB_multisample = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glSampleCoverageARB (GLclampf value, GLboolean invert);
' ========================================================================================
DECLARE SUB Proto_glSampleCoverageARB (BYVAL SINGLE, BYVAL BYTE)
MACRO glSampleCoverageARB(fvalue, binvert)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSampleCoverageARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glSampleCoverageARB(fvalue, binvert)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF

#IF NOT %DEF(%GL_ARB_texture_env_add)
%GL_ARB_texture_env_add = 1
#ENDIF

#IF NOT %DEF(%GL_ARB_texture_cube_map)
%GL_ARB_texture_cube_map = 1
#ENDIF

#IF NOT %DEF(%GL_ARB_texture_compression)
%GL_ARB_texture_compression = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glCompressedTexImage3DARB (GLenum target, GLint level, GLenum internalformat,
' GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
' ========================================================================================
DECLARE SUB Proto_glCompressedTexImage3DARB (BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYREF ANY)
MACRO glCompressedTexImage3DARB(dwtarget, ilevel, internalformat, iwidth, iheight, idepth, iborder, imageSize, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCompressedTexImage3DARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glCompressedTexImage3DARB(dwtarget, ilevel, internalformat, iwidth, iheight, idepth, iborder, imageSize, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCompressedTexImage2DARB (GLenum target, GLint level, GLenum internalformat,
' GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
' ========================================================================================
DECLARE SUB Proto_glCompressedTexImage2DARB (BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYREF ANY)
MACRO glCompressedTexImage2DARB(dwtarget, ilevel, internalformat, iwidth, iheight, iborder, imageSize, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCompressedTexImage2DARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glCompressedTexImage2DARB(dwtarget, ilevel, internalformat, iwidth, iheight, iborder, imageSize, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' GLAPI void APIENTRY glCompressedTexImage1DARB (GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const GLvoid *);
' void glCompressedTexImage1DARB (GLenum target, GLint level, GLenum internalformat,
' GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
' ========================================================================================
DECLARE SUB Proto_glCompressedTexImage1DARB (BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYREF ANY)
MACRO glCompressedTexImage1DARB(dwtarget, ilevel, internalformat, iwidth, iborder, imageSize, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCompressedTexImage1DARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glCompressedTexImage1DARB(dwtarget, ilevel, internalformat, iwidth, iborder, imageSize, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCompressedTexSubImage3DARB (GLenum target, GLint level, GLint xoffset,
' GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
' ========================================================================================
DECLARE SUB Proto_glCompressedTexSubImage3DARB (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glCompressedTexSubImage3DARB(dwtarget, ilevel, xoffset, yoffset, zoffset, iwidth, iheight, idepth, dwformat, imageSize, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCompressedTexSubImage3DARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glCompressedTexSubImage3DARB(dwtarget, ilevel, xoffset, yoffset, zoffset, iwidth, iheight, idepth, dwformat, imageSize, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCompressedTexSubImage2DARB (GLenum target, GLint level, GLint xoffset,
' GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
' ========================================================================================
DECLARE SUB Proto_glCompressedTexSubImage2DARB (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glCompressedTexSubImage2DARB(dwtarget, ilevel, xoffset, yoffset, iwidth, iheight, dwformat, imageSize, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCompressedTexSubImage2DARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glCompressedTexSubImage2DARB(dwtarget, ilevel, xoffset, yoffset, iwidth, iheight, dwformat, imageSize, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCompressedTexSubImage1DARB (GLenum target, GLint level, GLint xoffset,
' GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
' ========================================================================================
DECLARE SUB Proto_glCompressedTexSubImage1DARB (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glCompressedTexSubImage1DARB(dwtarget, ilevel, xoffset, iwidth, dwformat, imageSize, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCompressedTexSubImage1DARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glCompressedTexSubImage1DARB(dwtarget, ilevel, xoffset, iwidth, dwformat, imageSize, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetCompressedTexImageARB (GLenum target, GLint level, GLvoid *img);
' ========================================================================================
DECLARE SUB Proto_glGetCompressedTexImageARB (BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glGetCompressedTexImageARB(dwtarget, ilevel, pimg)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetCompressedTexImageARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetCompressedTexImageARB(dwtarget, ilevel, pimg)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF

#IF NOT %DEF(%GL_ARB_texture_border_clamp)
%GL_ARB_texture_border_clamp = 1
#ENDIF

#IF NOT %DEF(%GL_ARB_point_parameters)
%GL_ARB_point_parameters = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glPointParameterfARB (GLenum pname, GLfloat param);
' ========================================================================================
DECLARE SUB Proto_glPointParameterfARB (BYVAL DWORD, BYVAL SINGLE)
MACRO glPointParameterfARB(pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPointParameterfARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glPointParameterfARB(pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' GLAPI void APIENTRY glPointParameterfvARB (GLenum, const GLfloat *);
' typedef void (APIENTRYP PFNGLPOINTPARAMETERFVARBPROC) (GLenum pname, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glPointParameterfvARB (BYVAL DWORD, BYREF SINGLE)
MACRO glPointParameterfvARB(pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPointParameterfvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glPointParameterfvARB(pname, params)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_ARB_vertex_blend)
%GL_ARB_vertex_blend = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glWeightbvARB (GLint size, const GLbyte *weights);
' ========================================================================================
DECLARE SUB Proto_glWeightbvARB (BYVAL LONG, BYREF BYTE)
MACRO glWeightbvARB(isize, pweights)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWeightbvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glWeightbvARB(isize, pweights)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWeightsvARB (GLint size, const GLshort *weights);
' ========================================================================================
DECLARE SUB Proto_glWeightsvARB (BYVAL LONG, BYREF INTEGER)
MACRO glWeightsvARB(isize, pweights)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWeightsvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glWeightsvARB(isize, pweights)
END MACRO
' ========================================================================================

' ========================================================================================
' GLAPI void APIENTRY glWeightivARB (GLint, const GLint *);
' typedef void (APIENTRYP PFNGLWEIGHTIVARBPROC) (GLint size, const GLint *weights);
' ========================================================================================
DECLARE SUB Proto_glWeightivARB (BYVAL LONG, BYREF LONG)
MACRO glWeightivARB(isize, pweights)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWeightivARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glWeightivARB(isize, pweights)
END MACRO
' ========================================================================================

' ========================================================================================
' GLAPI void APIENTRY glWeightfvARB (GLint, const GLfloat *);
' typedef void (APIENTRYP PFNGLWEIGHTFVARBPROC) (GLint size, const GLfloat *weights);
' ========================================================================================
DECLARE SUB Proto_glWeightfvARB (BYVAL LONG, BYREF SINGLE)
MACRO glWeightfvARB(isize, pweights)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWeightfvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glWeightfvARB(isize, pweights)
END MACRO
' ========================================================================================

' ========================================================================================
' GLAPI void APIENTRY glWeightdvARB (GLint, const GLdouble *);
' typedef void (APIENTRYP PFNGLWEIGHTDVARBPROC) (GLint size, const GLdouble *weights);
' ========================================================================================
DECLARE SUB Proto_glWeightdvARB (BYVAL LONG, BYREF DOUBLE)
MACRO glWeightdvARB(isize, pweights)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWeightdvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glWeightdvARB(isize, pweights)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWeightubvARB (GLint size, const GLubyte *weights);
' ========================================================================================
DECLARE SUB Proto_glWeightubvARB (BYVAL LONG, BYREF BYTE)
MACRO glWeightubvARB(isize, pweights)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWeightubvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glWeightubvARB(isize, pweights)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWeightusvARB (GLint size, const GLushort *weights);
' ========================================================================================
DECLARE SUB Proto_glWeightusvARB (BYVAL LONG, BYREF WORD)
MACRO glWeightusvARB(isize, pweights)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWeightusvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glWeightusvARB(isize, pweights)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWeightuivARB (GLint size, const GLuint *weights);
' ========================================================================================
DECLARE SUB Proto_glWeightuivARB (BYVAL LONG, BYREF DWORD)
MACRO glWeightuivARB(n, pids)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWeightuivARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glWeightuivARB(n, pids)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWeightPointerARB (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
' ========================================================================================
DECLARE SUB Proto_glWeightPointerARB (BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glWeightPointerARB(isize, dwtype, istride, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWeightPointerARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glWeightPointerARB(isize, dwtype, istride, ppointer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexBlendARB (GLint count);
' ========================================================================================
DECLARE SUB Proto_glVertexBlendARB (BYVAL LONG)
MACRO glVertexBlendARB(icount)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexBlendARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexBlendARB(icount)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_ARB_matrix_palette)
%GL_ARB_matrix_palette = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glCurrentPaletteMatrixARB (GLint index);
' ========================================================================================
DECLARE SUB Proto_glCurrentPaletteMatrixARB (BYVAL LONG)
MACRO glCurrentPaletteMatrixARB(index)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCurrentPaletteMatrixARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glCurrentPaletteMatrixARB(index)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMatrixIndexubvARB (GLint size, const GLubyte *indices);
' ========================================================================================
DECLARE SUB Proto_glMatrixIndexubvARB (BYVAL LONG, BYREF BYTE)
MACRO glMatrixIndexubvARB(isize, pindices)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMatrixIndexubvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMatrixIndexubvARB(isize, pindices)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMatrixIndexusvARB (GLint size, const GLushort *indices);
' ========================================================================================
DECLARE SUB Proto_glMatrixIndexusvARB (BYVAL LONG, BYREF WORD)
MACRO glMatrixIndexusvARB(isize, pindices)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMatrixIndexusvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMatrixIndexusvARB(isize, pindices)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMatrixIndexuivARB (GLint size, const GLuint *indices);
' ========================================================================================
DECLARE SUB Proto_glMatrixIndexuivARB (BYVAL LONG, BYREF DWORD)
MACRO glMatrixIndexuivARB(isize, pindices)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMatrixIndexuivARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMatrixIndexuivARB(isize, pindices)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMatrixIndexPointerARB (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
' ========================================================================================
DECLARE SUB Proto_glMatrixIndexPointerARB (BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glMatrixIndexPointerARB(isize, dwtype, istride, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMatrixIndexPointerARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMatrixIndexPointerARB(isize, dwtype, istride, ppointer)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF

#IF NOT %DEF(%GL_ARB_texture_env_combine)
%GL_ARB_texture_env_combine = 1
#ENDIF

#IF NOT %DEF(%GL_ARB_texture_env_crossbar)
%GL_ARB_texture_env_crossbar = 1
#ENDIF

#IF NOT %DEF(%GL_ARB_texture_env_dot3)
%GL_ARB_texture_env_dot3 = 1
#ENDIF

#IF NOT %DEF(%GL_ARB_texture_mirrored_repeat)
%GL_ARB_texture_mirrored_repeat = 1
#ENDIF

#IF NOT %DEF(%GL_ARB_depth_texture)
%GL_ARB_depth_texture = 1
#ENDIF

#IF NOT %DEF(%GL_ARB_shadow)
%GL_ARB_shadow = 1
#ENDIF

#IF NOT %DEF(%GL_ARB_shadow_ambient)
%GL_ARB_shadow_ambient = 1
#ENDIF

#IF NOT %DEF(%GL_ARB_window_pos)
%GL_ARB_window_pos = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glWindowPos2dARB (GLdouble x, GLdouble y);
' ========================================================================================
DECLARE SUB Proto_glWindowPos2dARB (BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glWindowPos2dARB(x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos2dARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos2dARB(x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos2dvARB (const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glWindowPos2dvARB (BYREF DOUBLE)
MACRO glWindowPos2dvARB(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos2dvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos2dvARB(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos2fARB (GLfloat x, GLfloat y);
' ========================================================================================
DECLARE SUB Proto_glWindowPos2fARB (BYVAL SINGLE, BYVAL SINGLE)
MACRO glWindowPos2fARB(x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos2fARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos2fARB(x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos2fvARB (const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glWindowPos2fvARB (BYREF SINGLE)
MACRO glWindowPos2fvARB(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos2fvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos2fvARB(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos2iARB (GLint x, GLint y);
' ========================================================================================
DECLARE SUB Proto_glWindowPos2iARB (BYVAL LONG, BYVAL LONG)
MACRO glWindowPos2iARB(x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos2iARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos2iARB(x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos2ivARB (const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glWindowPos2ivARB (BYREF LONG)
MACRO glWindowPos2ivARB(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos2ivARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos2ivARB(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos2sARB (GLshort x, GLshort y);
' ========================================================================================
DECLARE SUB Proto_glWindowPos2sARB (BYVAL INTEGER, BYVAL INTEGER)
MACRO glWindowPos2sARB(x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos2sARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos2sARB(x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos2svARB (const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glWindowPos2svARB (BYREF INTEGER)
MACRO glWindowPos2svARB(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos2svARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos2svARB(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos3dARB (GLdouble x, GLdouble y, GLdouble z);
' ========================================================================================
DECLARE SUB Proto_glWindowPos3dARB (BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glWindowPos3dARB(x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos3dARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos3dARB(x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos3dvARB (const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glWindowPos3dvARB (BYREF DOUBLE)
MACRO glWindowPos3dvARB(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos3dvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos3dvARB(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos3fARB (GLfloat x, GLfloat y, GLfloat z);
' ========================================================================================
DECLARE SUB Proto_glWindowPos3fARB (BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glWindowPos3fARB(x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos3fARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos3fARB(x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' GLAPI void APIENTRY glWindowPos3fvARB (const GLfloat *);
' typedef void (APIENTRYP PFNGLWINDOWPOS3FVARBPROC) (const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glWindowPos3fvARB (BYREF SINGLE)
MACRO glWindowPos3fvARB(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos3fvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos3fvARB(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos3iARB (GLint x, GLint y, GLint z);
' ========================================================================================
DECLARE SUB Proto_glWindowPos3iARB (BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glWindowPos3iARB(x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos3iARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos3iARB(x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos3ivARB (const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glWindowPos3ivARB (BYREF LONG)
MACRO glWindowPos3ivARB(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos3ivARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos3ivARB(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos3sARB (GLshort x, GLshort y, GLshort z);
' ========================================================================================
DECLARE SUB Proto_glWindowPos3sARB (BYVAL INTEGER, BYVAL INTEGER, BYVAL INTEGER)
MACRO glWindowPos3sARB(x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos3sARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos3sARB(x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos3svARB (const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glWindowPos3svARB (BYREF INTEGER)
MACRO glWindowPos3svARB(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos3svARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos3svARB(v)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF

#IF NOT %DEF(%GL_ARB_vertex_program)
%GL_ARB_vertex_program = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glVertexAttrib1dARB (GLuint index, GLdouble x);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib1dARB (BYVAL DWORD, BYVAL DOUBLE)
MACRO glVertexAttrib1dARB(dwindex, x)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib1dARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib1dARB(dwindex, x)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib1dvARB (GLuint index, const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib1dvARB (BYVAL DWORD, BYREF DOUBLE)
MACRO glVertexAttrib1dvARB(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib1dvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib1dvARB(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib1fARB (GLuint index, GLfloat x);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib1fARB (BYVAL DWORD, BYVAL SINGLE)
MACRO glVertexAttrib1fARB(dwindex, x)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib1fARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib1fARB(dwindex, x)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib1fvARB (GLuint index, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib1fvARB (BYVAL DWORD, BYREF SINGLE)
MACRO glVertexAttrib1fvARB(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib1fvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib1fvARB(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib1sARB (GLuint index, GLshort x);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib1sARB (BYVAL DWORD, BYVAL INTEGER)
MACRO glVertexAttrib1sARB(dwindex, x)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib1sARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib1sARB(dwindex, x)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib1svARB (GLuint index, const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib1svARB (BYVAL DWORD, BYREF INTEGER)
MACRO glVertexAttrib1svARB(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib1svARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib1svARB(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib2dARB (GLuint index, GLdouble x, GLdouble y);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib2dARB (BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glVertexAttrib2dARB(dwindex, x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib2dARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib2dARB(dwindex, x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib2dvARB (GLuint index, const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib2dvARB (BYVAL DWORD, BYREF DOUBLE)
MACRO glVertexAttrib2dvARB(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib2dvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib2dvARB(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib2fARB (GLuint index, GLfloat x, GLfloat y);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib2fARB (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE)
MACRO glVertexAttrib2fARB(dwindex, x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib2fARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib2fARB(dwindex, x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib2fvARB (GLuint index, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib2fvARB (BYVAL DWORD, BYREF SINGLE)
MACRO glVertexAttrib2fvARB(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib2fvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib2fvARB(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib2sARB (GLuint index, GLshort x, GLshort y);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib2sARB (BYVAL DWORD, BYVAL INTEGER, BYVAL INTEGER)
MACRO glVertexAttrib2sARB(dwindex, x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib2sARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib2sARB(dwindex, x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib2svARB (GLuint index, const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib2svARB (BYVAL DWORD, BYREF INTEGER)
MACRO glVertexAttrib2svARB(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib2svARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib2svARB(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib3dARB (GLuint index, GLdouble x, GLdouble y, GLdouble z);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib3dARB (BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glVertexAttrib3dARB(dwindex, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib3dARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib3dARB(dwindex, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib3dvARB (GLuint index, const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib3dvARB (BYVAL DWORD, BYREF DOUBLE)
MACRO glVertexAttrib3dvARB(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib3dvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib3dvARB(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib3fARB (GLuint index, GLfloat x, GLfloat y, GLfloat z);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib3fARB (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glVertexAttrib3fARB(dwindex, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib3fARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib3fARB(dwindex, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib3fvARB (GLuint index, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib3fvARB (BYVAL DWORD, BYREF SINGLE)
MACRO glVertexAttrib3fvARB(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib3fvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib3fvARB(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib3sARB (GLuint index, GLshort x, GLshort y, GLshort z);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib3sARB (BYVAL DWORD, BYVAL INTEGER, BYVAL INTEGER, BYVAL INTEGER)
MACRO glVertexAttrib3sARB(dwindex, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib3sARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib3sARB(dwindex, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib3svARB (GLuint index, const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib3svARB (BYVAL DWORD, BYREF INTEGER)
MACRO glVertexAttrib3svARB(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib3svARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib3svARB(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib4NbvARB (GLuint index, const GLbyte *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4NbvARB (BYVAL DWORD, BYREF BYTE)
MACRO glVertexAttrib4NbvARB(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4NbvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4NbvARB(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib4NivARB (GLuint index, const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4NivARB (BYVAL DWORD, BYREF LONG)
MACRO glVertexAttrib4NivARB(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4NivARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4NivARB(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib4NsvARB (GLuint index, const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4NsvARB (BYVAL DWORD, BYREF INTEGER)
MACRO glVertexAttrib4NsvARB(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4NsvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4NsvARB(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib4NubARB (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4NubARB (BYVAL DWORD, BYVAL BYTE, BYVAL BYTE, BYVAL BYTE, BYVAL BYTE)
MACRO glVertexAttrib4NubARB(dwindex, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4NubARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4NubARB(dwindex, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib4NubvARB (GLuint index, const GLubyte *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4NubvARB (BYVAL DWORD, BYREF BYTE)
MACRO glVertexAttrib4NubvARB(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4NubvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4NubvARB(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib4NuivARB (GLuint index, const GLuint *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4NuivARB (BYVAL DWORD, BYREF DWORD)
MACRO glVertexAttrib4NuivARB(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4NuivARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4NuivARB(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib4NusvARB (GLuint index, const GLushort *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4NusvARB (BYVAL DWORD, BYREF WORD)
MACRO glVertexAttrib4NusvARB(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4NusvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4NusvARB(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib4bvARB (GLuint index, const GLbyte *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4bvARB (BYVAL DWORD, BYREF BYTE)
MACRO glVertexAttrib4bvARB(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4bvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4bvARB(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib4dARB (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4dARB (BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glVertexAttrib4dARB(dwindex, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4dARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4dARB(dwindex, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib4dvARB (GLuint index, const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4dvARB (BYVAL DWORD, BYREF DOUBLE)
MACRO glVertexAttrib4dvARB(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4dvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4dvARB(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib4fARB (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4fARB (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glVertexAttrib4fARB(dwindex, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4fARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4fARB(dwindex, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib4fvARB (GLuint index, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4fvARB (BYVAL DWORD, BYREF SINGLE)
MACRO glVertexAttrib4fvARB(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4fvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4fvARB(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib4ivARB (GLuint index, const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4ivARB (BYVAL DWORD, BYREF LONG)
MACRO glVertexAttrib4ivARB(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4ivARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4ivARB(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib4sARB (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4sARB (BYVAL DWORD, BYVAL INTEGER, BYVAL INTEGER, BYVAL INTEGER, BYVAL INTEGER)
MACRO glVertexAttrib4sARB(dwindex, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4sARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4sARB(dwindex, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib4svARB (GLuint index, const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4svARB (BYVAL DWORD, BYREF INTEGER)
MACRO glVertexAttrib4svARB(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4svARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4svARB(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib4ubvARB (GLuint index, const GLubyte *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4ubvARB (BYVAL DWORD, BYREF BYTE)
MACRO glVertexAttrib4ubvARB(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4ubvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4ubvARB(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib4uivARB (GLuint index, const GLuint *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4uivARB (BYVAL DWORD, BYREF DWORD)
MACRO glVertexAttrib4uivARB(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4uivARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4uivARB(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib4usvARB (GLuint index, const GLushort *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4usvARB (BYVAL DWORD, BYREF WORD)
MACRO glVertexAttrib4usvARB(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4usvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4usvARB(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribPointerARB (GLuint index, GLint size, GLenum type,
' GLboolean normalized, GLsizei stride, const GLvoid *pointer);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribPointerARB (BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL BYTE, BYVAL LONG, BYREF ANY)
MACRO glVertexAttribPointerARB(dwindex, isize, dwtype, bnormalized, istride, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribPointerARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribPointerARB(dwindex, isize, dwtype, bnormalized, istride, ppointer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glEnableVertexAttribArrayARB (GLuint index);
' ========================================================================================
DECLARE SUB Proto_glEnableVertexAttribArrayARB (BYVAL DWORD)
MACRO glEnableVertexAttribArrayARB(dwindex)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glEnableVertexAttribArrayARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glEnableVertexAttribArrayARB(dwindex)
END MACRO
' ========================================================================================

' ========================================================================================
' void glDisableVertexAttribArrayARB (GLuint index);
' ========================================================================================
DECLARE SUB Proto_glDisableVertexAttribArrayARB (BYVAL DWORD)
MACRO glDisableVertexAttribArrayARB(dwindex)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDisableVertexAttribArrayARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glDisableVertexAttribArrayARB(dwindex)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramStringARB (GLenum target, GLenum format, GLsizei len, const GLvoid *string);
' ========================================================================================
DECLARE SUB Proto_glProgramStringARB (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glProgramStringARB(dwtarget, dwformat, ilen, pstring)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramStringARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramStringARB(dwtarget, dwformat, ilen, pstring)
END MACRO
' ========================================================================================

' ========================================================================================
' void glBindProgramARB (GLenum target, GLuint program);
' ========================================================================================
DECLARE SUB Proto_glBindProgramARB (BYVAL DWORD, BYVAL DWORD)
MACRO glBindProgramARB(dwtarget, dwprogram)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBindProgramARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindProgramARB(dwtarget, dwprogram)
END MACRO
' ========================================================================================

' ========================================================================================
' void glDeleteProgramsARB (GLsizei n, const GLuint *programs);
' ========================================================================================
DECLARE SUB Proto_glDeleteProgramsARB (BYVAL LONG, BYREF DWORD)
MACRO glDeleteProgramsARB(n, pids)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDeleteProgramsARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glDeleteProgramsARB(n, pids)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGenProgramsARB (GLsizei n, GLuint *programs);
' ========================================================================================
DECLARE SUB Proto_glGenProgramsARB (BYVAL LONG, BYREF DWORD)
MACRO glGenProgramsARB(n, pprograms)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGenProgramsARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGenProgramsARB(n, pprograms)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramEnvParameter4dARB (GLenum target, GLuint index, GLdouble x, GLdouble y,
' GLdouble z, GLdouble w);
' ========================================================================================
DECLARE SUB Proto_glProgramEnvParameter4dARB (BYVAL DWORD, BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glProgramEnvParameter4dARB(dwtarget, dwindex, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramEnvParameter4dARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramEnvParameter4dARB(dwtarget, dwindex, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramEnvParameter4dvARB (GLenum target, GLuint index, const GLdouble *params);
' ========================================================================================
DECLARE SUB Proto_glProgramEnvParameter4dvARB (BYVAL DWORD, BYVAL DWORD, BYREF DOUBLE)
MACRO glProgramEnvParameter4dvARB(dwtarget, dwindex, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramEnvParameter4dvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramEnvParameter4dvARB(dwtarget, dwindex, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramEnvParameter4fARB (GLenum target, GLuint index, GLfloat x, GLfloat y,
' GLfloat z, GLfloat w);
' ========================================================================================
DECLARE SUB Proto_glProgramEnvParameter4fARB (BYVAL DWORD, BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glProgramEnvParameter4fARB(dwtarget, dwindex, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramEnvParameter4fARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramEnvParameter4fARB(dwtarget, dwindex, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramEnvParameter4fvARB (GLenum target, GLuint index, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glProgramEnvParameter4fvARB (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glProgramEnvParameter4fvARB(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramEnvParameter4fvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramEnvParameter4fvARB(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramLocalParameter4dARB (GLenum target, GLuint index, GLdouble x, GLdouble y,
' GLdouble z, GLdouble w);
' ========================================================================================
DECLARE SUB Proto_glProgramLocalParameter4dARB (BYVAL DWORD, BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glProgramLocalParameter4dARB(dwtarget, dwindex, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramLocalParameter4dARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramLocalParameter4dARB(dwtarget, dwindex, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramLocalParameter4dvARB (GLenum target, GLuint index, const GLdouble *params);
' ========================================================================================
DECLARE SUB Proto_glProgramLocalParameter4dvARB (BYVAL DWORD, BYVAL DWORD, BYREF DOUBLE)
MACRO glProgramLocalParameter4dvARB(dwtarget, dwindex, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramLocalParameter4dvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramLocalParameter4dvARB(dwtarget, dwindex, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramLocalParameter4fARB (GLenum target, GLuint index, GLfloat x, GLfloat y,
' GLfloat z, GLfloat w);
' ========================================================================================
DECLARE SUB Proto_glProgramLocalParameter4fARB (BYVAL DWORD, BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glProgramLocalParameter4fARB(dwtarget, dwindex, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramLocalParameter4fARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramLocalParameter4fARB(dwtarget, dwindex, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramLocalParameter4fvARB (GLenum target, GLuint index, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glProgramLocalParameter4fvARB (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glProgramLocalParameter4fvARB(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramLocalParameter4fvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramLocalParameter4fvARB(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetProgramEnvParameterdvARB (GLenum target, GLuint index, GLdouble *params);
' ========================================================================================
DECLARE SUB Proto_glGetProgramEnvParameterdvARB (BYVAL DWORD, BYVAL DWORD, BYREF DOUBLE)
MACRO glGetProgramEnvParameterdvARB(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetProgramEnvParameterdvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetProgramEnvParameterdvARB(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetProgramEnvParameterfvARB (GLenum target, GLuint index, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetProgramEnvParameterfvARB (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetProgramEnvParameterfvARB(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetProgramEnvParameterfvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetProgramEnvParameterfvARB(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetProgramLocalParameterdvARB (GLenum target, GLuint index, GLdouble *params);
' ========================================================================================
DECLARE SUB Proto_glGetProgramLocalParameterdvARB (BYVAL DWORD, BYVAL DWORD, BYREF DOUBLE)
MACRO glGetProgramLocalParameterdvARB(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetProgramLocalParameterdvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetProgramLocalParameterdvARB(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetProgramLocalParameterfvARB (GLenum target, GLuint index, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetProgramLocalParameterfvARB (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetProgramLocalParameterfvARB(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetProgramLocalParameterfvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetProgramLocalParameterfvARB(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetProgramivARB (GLenum target, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetProgramivARB (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetProgramivARB(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetProgramivARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetProgramivARB(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetProgramStringARB (GLenum target, GLenum pname, GLvoid *string);
' ========================================================================================
DECLARE SUB Proto_glGetProgramStringARB (BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glGetProgramStringARB(dwtarget, pname, pstring)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetProgramStringARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetProgramStringARB(dwtarget, pname, pstring)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetVertexAttribdvARB (GLuint index, GLenum pname, GLdouble *params);
' ========================================================================================
DECLARE SUB Proto_glGetVertexAttribdvARB (BYVAL DWORD, BYVAL DWORD, BYREF DOUBLE)
MACRO glGetVertexAttribdvARB(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetVertexAttribdvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetVertexAttribdvARB(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetVertexAttribfvARB (GLuint index, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetVertexAttribfvARB (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetVertexAttribfvARB(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetVertexAttribfvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetVertexAttribfvARB(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetVertexAttribivARB (GLuint index, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetVertexAttribivARB (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetVertexAttribivARB(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetVertexAttribivARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetVertexAttribivARB(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetVertexAttribPointervARB (GLuint index, GLenum pname, GLvoid* *pointer);
' ========================================================================================
DECLARE SUB Proto_glGetVertexAttribPointervARB (BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glGetVertexAttribPointervARB(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetVertexAttribPointervARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetVertexAttribPointervARB(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' GLboolean glIsProgramARB (GLuint program);
' ========================================================================================
DECLARE FUNCTION Proto_glIsProgramARB (BYVAL DWORD) AS BYTE
MACRO FUNCTION glIsProgramARB(dwprogram)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glIsProgramARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glIsProgramARB(dwtarget, pname, pparams) TO bRes
END MACRO = bRes
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_ARB_fragment_program)
%GL_ARB_fragment_program = 1
'/* All ARB_fragment_program entry points are shared with ARB_vertex_program. */
#ENDIF

#IF NOT %DEF(%GL_ARB_vertex_buffer_object)
%GL_ARB_vertex_buffer_object = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glBindBufferARB (GLenum target, GLuint buffer);
' ========================================================================================
DECLARE SUB Proto_glBindBufferARB (BYVAL DWORD, BYVAL DWORD)
MACRO glBindBufferARB(dwtarget, dwbuffer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBindBufferARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindBufferARB(dwtarget, dwbuffer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glDeleteBuffersARB (GLsizei n, const GLuint *buffers);
' ========================================================================================
DECLARE SUB Proto_glDeleteBuffersARB (BYVAL LONG, BYREF DWORD)
MACRO glDeleteBuffersARB(n, pbuffers)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDeleteBuffersARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glDeleteBuffersARB(n, pbuffers)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGenBuffersARB (GLsizei n, GLuint *buffers);
' ========================================================================================
DECLARE SUB Proto_glGenBuffersARB (BYVAL LONG, BYREF DWORD)
MACRO glGenBuffersARB(n, pbuffers)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGenBuffersARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGenBuffersARB(n, pbuffers)
END MACRO
' ========================================================================================

' ========================================================================================
' GLAPI GLboolean APIENTRY glIsBufferARB (GLuint);
' typedef GLboolean (APIENTRYP PFNGLISBUFFERARBPROC) (GLuint buffer);
' ========================================================================================
DECLARE FUNCTION Proto_glIsBufferARB (BYVAL DWORD) AS BYTE
MACRO FUNCTION glIsBufferARB(dwbuffer)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glIsBufferARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glIsBufferARB(dwbuffer) TP bRes
END MACRO = bRes
' ========================================================================================

' ========================================================================================
' void glBufferDataARB (GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage);
' ========================================================================================
DECLARE SUB Proto_glBufferDataARB (BYVAL DWORD, BYVAL DWORD, BYREF ANY, BYVAL DWORD)
MACRO glBufferDataARB(dwtarget, isize, pdata, dwusage)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBufferDataARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glBufferDataARB(dwtarget, isize, pdata, dwusage)
END MACRO
' ========================================================================================

' ========================================================================================
' void glBufferSubDataARB (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data);
' ========================================================================================
DECLARE SUB Proto_glBufferSubDataARB (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glBufferSubDataARB(dwtarget, ioffset, isize, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBufferSubDataARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glBufferSubDataARB(dwtarget, ioffset, isize, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetBufferSubDataARB (GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data);
' ========================================================================================
DECLARE SUB Proto_glGetBufferSubDataARB (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glGetBufferSubDataARB(dwtarget, ioffset, isize, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetBufferSubDataARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetBufferSubDataARB(dwtarget, ioffset, isize, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' GLvoid* glMapBufferARB (GLenum target, GLenum access);
' ========================================================================================
DECLARE FUNCTION Proto_glMapBufferARB (BYVAL DWORD, BYVAL DWORD) AS DWORD
MACRO FUNCTION glMapBufferARB(dwtarget, dwaccess)
   MACROTEMP pProc
   LOCAL pProc, dwRes AS DWORD
   pProc = wglGetProcAddress("glMapBufferARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glMapBufferARB(dwtarget, dwaccess) TO dwRes
END MACRO = dwRes
' ========================================================================================

' ========================================================================================
' GLboolean glUnmapBufferARB (GLenum target);
' ========================================================================================
DECLARE FUNCTION Proto_glUnmapBufferARB (BYVAL DWORD) AS BYTE
MACRO FUNCTION glUnmapBufferARB(dwtarget)
   MACROTEMP pProc
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glUnmapBufferARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glUnmapBufferARB(dwtarget) TO bRes
END MACRO = bRes
' ========================================================================================

' ========================================================================================
' void glGetBufferParameterivARB (GLenum target, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetBufferParameterivARB (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetBufferParameterivARB(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetBufferParameterivARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetBufferParameterivARB(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetBufferPointervARB (GLenum target, GLenum pname, GLvoid* *params);
' ========================================================================================
DECLARE SUB Proto_glGetBufferPointervARB (BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glGetBufferPointervARB(dwtarget, pname, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetBufferPointervARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetBufferPointervARB(dwtarget, pname, ppointer)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_ARB_occlusion_query)
%GL_ARB_occlusion_query = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glGenQueriesARB (GLsizei n, GLuint *ids);
' ========================================================================================
DECLARE SUB Proto_glGenQueriesARB (BYVAL LONG, BYREF DWORD)
MACRO glGenQueriesARB(n, pids)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGenQueriesARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGenQueriesARB(n, pids)
END MACRO
' ========================================================================================

' ========================================================================================
' void glDeleteQueriesARB (GLsizei n, const GLuint *ids);
' ========================================================================================
DECLARE SUB Proto_glDeleteQueriesARB (BYVAL LONG, BYREF DWORD)
MACRO glDeleteQueriesARB(n, pids)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDeleteQueriesARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glDeleteQueriesARB(n, pids)
END MACRO
' ========================================================================================

' ========================================================================================
' GLboolean glIsQueryARB (GLuint id);
' ========================================================================================
DECLARE FUNCTION Proto_glIsQueryARB (BYVAL DWORD) AS BYTE
MACRO FUNCTION glIsQueryARB(id)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glIsQueryARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glIsQueryARB(id) TO bRes
END MACRO = bRes
' ========================================================================================

' ========================================================================================
' void glBeginQueryARB (GLenum target, GLuint id);
' ========================================================================================
DECLARE SUB Proto_glBeginQueryARB (BYVAL DWORD, BYVAL DWORD)
MACRO glBeginQueryARB(dwtarget, dwid)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBeginQueryARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glBeginQueryARB(dwtarget, dwid)
END MACRO
' ========================================================================================

' ========================================================================================
' void glEndQueryARB (GLenum target);
' ========================================================================================
DECLARE SUB Proto_glEndQueryARB (BYVAL DWORD)
MACRO glEndQueryARB(dwtarget)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glEndQueryARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glEndQueryARB(dwtarget)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetQueryivARB (GLenum target, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetQueryivARB (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetQueryivARB(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetQueryivARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetQueryivARB(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetQueryObjectivARB (GLuint id, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetQueryObjectivARB (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetQueryObjectivARB(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetQueryObjectivARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetQueryObjectivARB(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetQueryObjectuivARB (GLuint id, GLenum pname, GLuint *params);
' ========================================================================================
DECLARE SUB Proto_glGetQueryObjectuivARB (BYVAL DWORD, BYVAL DWORD, BYREF DWORD)
MACRO glGetQueryObjectuivARB(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetQueryObjectuivARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetQueryObjectuivARB(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_ARB_shader_objects)
%GL_ARB_shader_objects = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glDeleteObjectARB (GLhandleARB obj);
' ========================================================================================
DECLARE SUB Proto_glDeleteObjectARB (BYVAL DWORD)
MACRO glDeleteObjectARB(dwobj)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDeleteObjectARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glDeleteObjectARB(dwobj)
END MACRO
' ========================================================================================

' ========================================================================================
' GLhandleARB glGetHandleARB (GLenum pname);
' ========================================================================================
DECLARE FUNCTION Proto_glGetHandleARB (BYVAL DWORD) AS DWORD
MACRO FUNCTION glGetHandleARB(pname)
   MACROTEMP pProc
   LOCAL pProc, dwRes AS DWORD
   pProc = wglGetProcAddress("glGetHandleARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetHandleARB(pname) TO dwRes
END MACRO = dwRes
' ========================================================================================

' ========================================================================================
' void glDetachObjectARB (GLhandleARB containerObj, GLhandleARB attachedObj);
' ========================================================================================
DECLARE SUB Proto_glDetachObjectARB (BYVAL DWORD, BYVAL DWORD)
MACRO glDetachObjectARB(containerObj, attachedObj)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDetachObjectARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glDetachObjectARB(containerObj, attachedObj)
END MACRO
' ========================================================================================

' ========================================================================================
' GLhandleARB glCreateShaderObjectARB (GLenum shaderType);
' ========================================================================================
DECLARE FUNCTION Proto_glCreateShaderObjectARB (BYVAL DWORD) AS DWORD
MACRO FUNCTION glCreateShaderObjectARB(shaderType)
   MACROTEMP pProc, dwRes
   LOCAL pProc, dwRes AS DWORD
   pProc = wglGetProcAddress("glCreateShaderObjectARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glCreateShaderObjectARB(shaderType) TO dwRes
END MACRO = dwRes
' ========================================================================================

' ========================================================================================
' void glShaderSourceARB (GLhandleARB shaderObj, GLsizei count, const GLcharARB* *string, const GLint *length);
' ========================================================================================
DECLARE SUB Proto_glShaderSourceARB (BYVAL DWORD, BYVAL LONG, BYREF ASCIIZ, BYREF LONG)
MACRO glShaderSourceARB(shaderObj, icount, pstring, ilength)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glShaderSourceARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glShaderSourceARB(shaderObj, icount, pstring, ilength)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCompileShaderARB (GLhandleARB shaderObj);
' ========================================================================================
DECLARE SUB Proto_glCompileShaderARB (BYVAL DWORD)
MACRO glCompileShaderARB(shaderObj)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCompileShaderARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glCompileShaderARB(shaderObj)
END MACRO
' ========================================================================================

' ========================================================================================
' GLhandleARB glCreateProgramObjectARB (void);
' ========================================================================================
DECLARE FUNCTION Proto_glCreateProgramObjectARB () AS DWORD
MACRO FUNCTION glCreateProgramObjectARB
   MACROTEMP pProc, dwRes
   LOCAL pProc, dwRes AS DWORD
   pProc = wglGetProcAddress("glCreateProgramObjectARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glCreateProgramObjectARB() TO dwRes
END MACRO = dwRes
' ========================================================================================

' ========================================================================================
' void glAttachObjectARB (GLhandleARB containerObj, GLhandleARB obj);
' ========================================================================================
DECLARE SUB Proto_glAttachObjectARB (BYVAL DWORD, BYVAL DWORD)
MACRO glAttachObjectARB(dwcontainerObj, dwobj)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glAttachObjectARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glAttachObjectARB(dwcontainerObj, dwobj)
END MACRO
' ========================================================================================

' ========================================================================================
' void glLinkProgramARB (GLhandleARB programObj);
' ========================================================================================
DECLARE SUB Proto_glLinkProgramARB (BYVAL DWORD)
MACRO glLinkProgramARB(programObj)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glLinkProgramARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glLinkProgramARB(programObj)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUseProgramObjectARB (GLhandleARB programObj);
' ========================================================================================
DECLARE SUB Proto_glUseProgramObjectARB (BYVAL DWORD)
MACRO glUseProgramObjectARB(programObj)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUseProgramObjectARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glUseProgramObjectARB(programObj)
END MACRO
' ========================================================================================

' ========================================================================================
' void glValidateProgramARB (GLhandleARB programObj);
' ========================================================================================
DECLARE SUB Proto_glValidateProgramARB (BYVAL DWORD)
MACRO glValidateProgramARB(programObj)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glValidateProgramARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glValidateProgramARB(programObj)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform1fARB (GLint location, GLfloat v0);
' ========================================================================================
DECLARE SUB Proto_glUniform1fARB (BYVAL LONG, BYVAL SINGLE)
MACRO glUniform1fARB(ilocation, v0)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform1fARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform1fARB(ilocation, v0)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform2fARB (GLint location, GLfloat v0, GLfloat v1);
' ========================================================================================
DECLARE SUB Proto_glUniform2fARB (BYVAL LONG, BYVAL SINGLE, BYVAL SINGLE)
MACRO glUniform2fARB(ilocation, v0, v1)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform2fARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform2fARB(ilocation, v0, v1)
END MACRO
' ========================================================================================

' ========================================================================================
' GLAPI void APIENTRY glUniform3fARB (GLint, GLfloat, GLfloat, GLfloat);
' typedef void (APIENTRYP PFNGLUNIFORM3FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
' ========================================================================================
DECLARE SUB Proto_glUniform3fARB (BYVAL LONG, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glUniform3fARB(ilocation, v0, v1, v2)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform3fARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform3fARB(ilocation, v0, v1, v2)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform4fARB (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
' ========================================================================================
DECLARE SUB Proto_glUniform4fARB (BYVAL LONG, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glUniform4fARB(ilocation, v0, v1, v2, v3)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform4fARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform4fARB(ilocation, v0, v1, v2, v3)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform1iARB (GLint location, GLint v0);
' ========================================================================================
DECLARE SUB Proto_glUniform1iARB (BYVAL LONG, BYVAL LONG)
MACRO glUniform1iARB(ilocation, v0)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform1iARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform1iARB(ilocation, v0)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform2iARB (GLint location, GLint v0, GLint v1);
' ========================================================================================
DECLARE SUB Proto_glUniform2iARB (BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glUniform2iARB(ilocation, v0, v1)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform2iARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform2iARB(ilocation, v0, v1)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform3iARB (GLint location, GLint v0, GLint v1, GLint v2);
' ========================================================================================
DECLARE SUB Proto_glUniform3iARB (BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glUniform3iARB(ilocation, v0, v1, v2)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform3iARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform3iARB(ilocation, v0, v1, v2)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform4iARB (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
' ========================================================================================
DECLARE SUB Proto_glUniform4iARB (BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glUniform4iARB(ilocation, v0, v1, v2, v3)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform4iARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform4iARB(ilocation, v0, v1, v2, v3)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform1fvARB (GLint location, GLsizei count, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glUniform1fvARB (BYVAL LONG, BYVAL LONG, BYREF SINGLE)
MACRO glUniform1fvARB(ilocation, icount, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform1fvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform1fvARB(ilocation, icount, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform2fvARB (GLint location, GLsizei count, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glUniform2fvARB (BYVAL LONG, BYVAL LONG, BYREF SINGLE)
MACRO glUniform2fvARB(ilocation, icount, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform2fvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform2fvARB(ilocation, icount, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform3fvARB (GLint location, GLsizei count, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glUniform3fvARB (BYVAL LONG, BYVAL LONG, BYREF SINGLE)
MACRO glUniform3fvARB(ilocation, icount, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform3fvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform3fvARB(ilocation, icount, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform4fvARB (GLint location, GLsizei count, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glUniform4fvARB (BYVAL LONG, BYVAL LONG, BYREF SINGLE)
MACRO glUniform4fvARB(ilocation, icount, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform4fvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform4fvARB(ilocation, icount, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform1ivARB (GLint location, GLsizei count, const GLint *value);
' ========================================================================================
DECLARE SUB Proto_glUniform1ivARB (BYVAL LONG, BYVAL LONG, BYREF LONG)
MACRO glUniform1ivARB(ilocation, icount, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform1ivARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform1ivARB(ilocation, icount, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform2ivARB (GLint location, GLsizei count, const GLint *value);
' ========================================================================================
DECLARE SUB Proto_glUniform2ivARB (BYVAL LONG, BYVAL LONG, BYREF LONG)
MACRO glUniform2ivARB(ilocation, icount, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform2ivARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform2ivARB(ilocation, icount, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform3ivARB (GLint location, GLsizei count, const GLint *value);
' ========================================================================================
DECLARE SUB Proto_glUniform3ivARB (BYVAL LONG, BYVAL LONG, BYREF LONG)
MACRO glUniform3ivARB(ilocation, icount, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform3ivARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform3ivARB(ilocation, icount, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform4ivARB (GLint location, GLsizei count, const GLint *value);
' ========================================================================================
DECLARE SUB Proto_glUniform4ivARB (BYVAL LONG, BYVAL LONG, BYREF LONG)
MACRO glUniform4ivARB(ilocation, icount, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform4ivARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform4ivARB(ilocation, icount, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniformMatrix2fvARB (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glUniformMatrix2fvARB (BYVAL LONG, BYVAL LONG, BYVAL BYTE, BYREF SINGLE)
MACRO glUniformMatrix2fvARB(ilocation, icount, btranspose, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniformMatrix2fvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniformMatrix2fvARB(ilocation, icount, btranspose, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniformMatrix3fvARB (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glUniformMatrix3fvARB (BYVAL LONG, BYVAL LONG, BYVAL BYTE, BYREF SINGLE)
MACRO glUniformMatrix3fvARB(ilocation, icount, btranspose, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniformMatrix3fvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniformMatrix3fvARB(ilocation, icount, btranspose, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniformMatrix4fvARB (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glUniformMatrix4fvARB (BYVAL LONG, BYVAL LONG, BYVAL BYTE, BYREF SINGLE)
MACRO glUniformMatrix4fvARB(ilocation, icount, btranspose, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniformMatrix4fvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniformMatrix4fvARB(ilocation, icount, btranspose, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetObjectParameterfvARB (GLhandleARB obj, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetObjectParameterfvARB (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetObjectParameterfvARB(dwobj, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetObjectParameterfvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetObjectParameterfvARB(dwobj, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetObjectParameterivARB (GLhandleARB obj, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetObjectParameterivARB (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetObjectParameterivARB(dwobj, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetObjectParameterivARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetObjectParameterivARB(dwobj, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetInfoLogARB (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);
' ========================================================================================
DECLARE SUB Proto_glGetInfoLogARB (BYVAL DWORD, BYVAL LONG, BYREF LONG, BYREF ASCIIZ)
MACRO glGetInfoLogARB(dwobj, imaxLength, ilength, infoLog)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetInfoLogARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetInfoLogARB(dwobj, imaxLength, ilength, infoLog)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetAttachedObjectsARB (GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj);
' ========================================================================================
DECLARE SUB Proto_glGetAttachedObjectsARB (BYVAL DWORD, BYVAL LONG, BYREF LONG, BYREF DWORD)
MACRO glGetAttachedObjectsARB(containerObj, imaxCount, icount, dwobj)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetAttachedObjectsARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetAttachedObjectsARB(containerObj, imaxCount, icount, dwobj)
END MACRO
' ========================================================================================

' ========================================================================================
' GLint glGetUniformLocationARB (GLhandleARB programObj, const GLcharARB *name);
' ========================================================================================
DECLARE FUNCTION Proto_glGetUniformLocationARB (BYVAL DWORD, BYREF ASCIIZ) AS LONG
MACRO FUNCTION glGetUniformLocationARB(programObj, szname)
   MACROTEMP pProc, lRes, strname
   LOCAL pProc AS DWORD, lRes AS LONG, strname AS STRING
   strname = szname
   pProc = wglGetProcAddress("glGetUniformLocationARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetUniformLocationARB(programObj, BYCOPY strname) TO lRes
END MACRO = lRes
' ========================================================================================

' ========================================================================================
' void glGetActiveUniformARB (GLhandleARB programObj, GLuint index, GLsizei maxLength,
' GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
' ========================================================================================
DECLARE SUB Proto_glGetActiveUniformARB (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYREF LONG, BYREF LONG, BYREF DWORD, BYREF ASCIIZ)
MACRO glGetActiveUniformARB(programObj, dwindex, imaxLength, ilength, isize, dwtype, szname)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetActiveUniformARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetActiveUniformARB(programObj, dwindex, imaxLength, ilength, isize, dwtype, szname)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetUniformfvARB (GLhandleARB programObj, GLint location, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetUniformfvARB (BYVAL DWORD, BYVAL LONG, BYREF SINGLE)
MACRO glGetUniformfvARB(programObj, ilocation, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetUniformfvARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetUniformfvARB(programObj, ilocation, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetUniformivARB (GLhandleARB programObj, GLint location, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetUniformivARB (BYVAL DWORD, BYVAL LONG, BYREF LONG)
MACRO glGetUniformivARB(programObj, ilocation, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetUniformivARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetUniformivARB(programObj, ilocation, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetShaderSourceARB (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source);
' ========================================================================================
DECLARE SUB Proto_glGetShaderSourceARB (BYVAL DWORD, BYVAL LONG, BYREF LONG, BYREF ASCIIZ)
MACRO glGetShaderSourceARB(dwobj, imaxLength, ilength, szsource)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetShaderSourceARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetShaderSourceARB(dwobj, imaxLength, ilength, szsource)
END MACRO
' ========================================================================================
'#ENDIF ' %GL_GLEXT_PROTOTYPES

#ENDIF

#IF NOT %DEF(%GL_ARB_vertex_shader)
%GL_ARB_vertex_shader = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glBindAttribLocationARB (GLhandleARB programObj, GLuint index, const GLcharARB *name);
' ========================================================================================
DECLARE SUB Proto_glBindAttribLocationARB (BYVAL DWORD, BYVAL DWORD, BYREF ASCIIZ)
MACRO glBindAttribLocationARB(programObj, dwindex, szname)
   MACROTEMP pProc, strname
   LOCAL pProc AS DWORD, strname AS STRING
   strname = szname
   pProc = wglGetProcAddress("glBindAttribLocationARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindAttribLocationARB(programObj, dwindex, BYCOPY strname)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetActiveAttribARB (GLhandleARB programObj, GLuint index, GLsizei maxLength,
' GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
' ========================================================================================
DECLARE SUB Proto_glGetActiveAttribARB (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYREF LONG, BYREF LONG, BYREF DWORD, BYREF ASCIIZ)
MACRO glGetActiveAttribARB(dwprogram, dwindex, imaxLength, ilenght, isize, dwtype, szname)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetActiveAttribARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetActiveAttribARB(dwprogram, dwindex, imaxLength, ilenght, isize, dwtype, szname)
END MACRO
' ========================================================================================

' ========================================================================================
' GLint glGetAttribLocationARB (GLhandleARB programObj, const GLcharARB *name);
' ========================================================================================
DECLARE FUNCTION Proto_glGetAttribLocationARB (BYVAL DWORD, BYREF ASCIIZ) AS LONG
MACRO FUNCTION glGetAttribLocationARB(programObj, szname)
   MACROTEMP pProc, lRes, strname
   LOCAL pProc AS DWORD, lRes AS LONG, strname AS STRING
   strName = szname
   pProc = wglGetProcAddress("glGetAttribLocationARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetAttribLocationARB(programObj, BYCOPY strname) TO lRes
END MACRO = lRes
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_ARB_fragment_shader)
%GL_ARB_fragment_shader = 1
#ENDIF

#IF NOT %DEF(%GL_ARB_shading_language_100)
%GL_ARB_shading_language_100 = 1
#ENDIF

#IF NOT %DEF(%GL_ARB_texture_non_power_of_two)
%GL_ARB_texture_non_power_of_two = 1
#ENDIF

#IF NOT %DEF(%GL_ARB_point_sprite)
%GL_ARB_point_sprite = 1
#ENDIF

#IF NOT %DEF(%GL_ARB_fragment_program_shadow)
%GL_ARB_fragment_program_shadow = 1
#ENDIF

#IF NOT %DEF(%GL_ARB_draw_buffers)
%GL_ARB_draw_buffers = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glDrawBuffersARB (GLsizei n, const GLenum *bufs);
' ========================================================================================
DECLARE SUB Proto_glDrawBuffersARB (BYVAL LONG, BYREF DWORD)
MACRO glDrawBuffersARB(n, pids)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDrawBuffersARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glDrawBuffersARB(n, pids)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF

#IF NOT %DEF(%GL_ARB_texture_rectangle)
%GL_ARB_texture_rectangle = 1
#ENDIF

#IF NOT %DEF(%GL_ARB_color_buffer_float)
%GL_ARB_color_buffer_float = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' GLAPI void APIENTRY glClampColorARB (GLenum, GLenum);
' typedef void (APIENTRYP PFNGLCLAMPCOLORARBPROC) (GLenum target, GLenum clamp);
' ========================================================================================
DECLARE SUB Proto_glClampColorARB (BYVAL DWORD, BYVAL DWORD)
MACRO glClampColorARB(dwtarget, dwclamp)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glClampColorARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glClampColorARB(dwtarget, dwclamp)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF

#IF NOT %DEF(%GL_ARB_half_float_pixel)
%GL_ARB_half_float_pixel = 1
#ENDIF

#IF NOT %DEF(%GL_ARB_texture_float)
%GL_ARB_texture_float = 1
#ENDIF

#IF NOT %DEF(%GL_ARB_pixel_buffer_object)
%GL_ARB_pixel_buffer_object = 1
#ENDIF

#IF NOT %DEF(%GL_ARB_depth_buffer_float)
%GL_ARB_depth_buffer_float = 1
#ENDIF

#IF NOT %DEF(%GL_ARB_draw_instanced)
%GL_ARB_draw_instanced = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glDrawArraysInstancedARB (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
' ========================================================================================
DECLARE SUB Proto_glDrawArraysInstancedARB (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glDrawArraysInstancedARB(dwmode, ifirst, icount, iprimcount)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDrawArraysInstancedARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glDrawArraysInstancedARB(dwmode, ifirst, icount, iprimcount)
END MACRO
' ========================================================================================

' ========================================================================================
' void glDrawElementsInstancedARB (GLenum mode, GLsizei count, GLenum type,
' const GLvoid *indices, GLsizei primcount);
' ========================================================================================
DECLARE SUB Proto_glDrawElementsInstancedARB (BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYREF ANY, BYVAL LONG)
MACRO glDrawElementsInstancedARB(dwmode, icount, dwtype, pindices, iprimcount)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDrawElementsInstancedARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glDrawElementsInstancedARB(dwmode, icount, dwtype, pindices, iprimcount)
END MACRO
' ========================================================================================

'#ENDIF ' /* GL_GLEXT_PROTOTYPES */
#ENDIF

#IF NOT %DEF(%GL_ARB_framebuffer_object)
%GL_ARB_framebuffer_object = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' GLboolean glIsRenderbuffer (GLuint renderbuffer);
' ========================================================================================
DECLARE FUNCTION Proto_glIsRenderbuffer (BYVAL DWORD) AS BYTE
MACRO FUNCTION glIsRenderbuffer(dwrenderbuffer)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glIsRenderbuffer")
   IF pProc THEN CALL DWORD pProc USING Proto_glIsRenderbuffer(dwrenderbuffer) TO bRes
END MACRO = bRes
' ========================================================================================

' ========================================================================================
' void glBindRenderbuffer (GLenum target, GLuint renderbuffer);
' ========================================================================================
DECLARE SUB Proto_glBindRenderbuffer (BYVAL DWORD, BYVAL DWORD)
MACRO FUNCTION glBindRenderbuffer(dwtarget, dwrenderbuffer)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glBindRenderbuffer")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindRenderbuffer(dwtarget, dwrenderbuffer) TO bRes
END MACRO = bRes
' ========================================================================================

' ========================================================================================
' void glDeleteRenderbuffers (GLsizei n, const GLuint *renderbuffers);
' ========================================================================================
DECLARE SUB Proto_glDeleteRenderbuffers (BYVAL LONG, BYREF DWORD)
MACRO glDeleteRenderbuffers(n, dwrenderbuffers)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDeleteRenderbuffers")
   IF pProc THEN CALL DWORD pProc USING Proto_glDeleteRenderbuffers(n, dwrenderbuffers)
END MACRO
' ========================================================================================

' ========================================================================================
' GLAPI void APIENTRY glGenRenderbuffers (GLsizei, GLuint *);
' typedef void (APIENTRYP PFNGLGENRENDERBUFFERSPROC) (GLsizei n, GLuint *renderbuffers);
' ========================================================================================
DECLARE SUB Proto_glGenRenderbuffers (BYVAL LONG, BYREF DWORD)
MACRO glGenRenderbuffers(n, dwrenderbuffers)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGenRenderbuffers")
   IF pProc THEN CALL DWORD pProc USING Proto_glGenRenderbuffers(n, dwrenderbuffers)
END MACRO
' ========================================================================================

' ========================================================================================
' void glRenderbufferStorage (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
' ========================================================================================
DECLARE SUB Proto_glRenderbufferStorage (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG)
MACRO glRenderbufferStorage(dwtarget, internalformat, iwidth, iheight)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glRenderbufferStorage")
   IF pProc THEN CALL DWORD pProc USING Proto_glRenderbufferStorage(dwtarget, internalformat, iwidth, iheight)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetRenderbufferParameteriv (GLenum target, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetRenderbufferParameteriv (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetRenderbufferParameteriv(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetRenderbufferParameteriv")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetRenderbufferParameteriv(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' GLboolean glIsFramebuffer (GLuint framebuffer);
' ========================================================================================
DECLARE FUNCTION Proto_glIsFramebuffer (BYVAL DWORD) AS BYTE
MACRO FUNCTION glIsFramebuffer(dwframebuffer)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glIsFramebuffer")
   IF pProc THEN CALL DWORD pProc USING Proto_glIsFramebuffer(dwframebuffer) TO bRes
END MACRO = bRes
' ========================================================================================

' ========================================================================================
' void glBindFramebuffer (GLenum target, GLuint framebuffer);
' ========================================================================================
DECLARE SUB Proto_glBindFramebuffer (BYVAL DWORD, BYVAL DWORD)
MACRO glBindFramebuffer(dwtarget, dwframebuffer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBindFramebuffer")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindFramebuffer(dwtarget, dwframebuffer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glDeleteFramebuffers (GLsizei n, const GLuint *framebuffers);
' ========================================================================================
DECLARE SUB Proto_glDeleteFramebuffers (BYVAL LONG, BYREF DWORD)
MACRO glDeleteFramebuffers(n, dwframebuffers)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDeleteFramebuffers")
   IF pProc THEN CALL DWORD pProc USING Proto_glDeleteFramebuffers(n, dwframebuffers)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGenFramebuffers (GLsizei n, GLuint *framebuffers);
' ========================================================================================
DECLARE SUB Proto_glGenFramebuffers (BYVAL LONG, BYREF DWORD)
MACRO glGenFramebuffers(n, dwframebuffers)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGenFramebuffers")
   IF pProc THEN CALL DWORD pProc USING Proto_glGenFramebuffers(n, dwframebuffers)
END MACRO
' ========================================================================================

' ========================================================================================
' GLenum glCheckFramebufferStatus (GLenum target);
' ========================================================================================
DECLARE FUNCTION Proto_glCheckFramebufferStatus (BYVAL DWORD) AS DWORD
MACRO FUNCTION glCheckFramebufferStatus(dwtarget)
   MACROTEMP pProc, dwRes
   LOCAL pProc, dwRes AS DWORD
   pProc = wglGetProcAddress("glCheckFramebufferStatus")
   IF pProc THEN CALL DWORD pProc USING Proto_glCheckFramebufferStatus(dwtarget) TP dwRes
END MACRO = dwRes
' ========================================================================================

' ========================================================================================
' void glFramebufferTexture1D (GLenum target, GLenum attachment, GLenum textarget,
' GLuint texture, GLint level);
' ========================================================================================
DECLARE SUB Proto_glFramebufferTexture1D (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG)
MACRO glFramebufferTexture1D(dwtarget, dwattachment, dwtexttarget, dwtexture, ilevel)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFramebufferTexture1D")
   IF pProc THEN CALL DWORD pProc USING Proto_glFramebufferTexture1D(dwtarget, dwattachment, dwtexttarget, dwtexture, ilevel)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFramebufferTexture2D (GLenum target, GLenum attachment, GLenum textarget,
' GLuint texture, GLint level);
' ========================================================================================
DECLARE SUB Proto_glFramebufferTexture2D (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG)
MACRO glFramebufferTexture2D(dwtarget, dwattachment, dwtexttarget, dwtexture, ilevel)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFramebufferTexture2D")
   IF pProc THEN CALL DWORD pProc USING Proto_glFramebufferTexture2D(dwtarget, dwattachment, dwtexttarget, dwtexture, ilevel)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFramebufferTexture3D (GLenum target, GLenum attachment, GLenum textarget,
' GLuint texture, GLint level, GLint zoffset);
' ========================================================================================
DECLARE SUB Proto_glFramebufferTexture3D (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG)
MACRO glFramebufferTexture3D(dwtarget, dwattachment, dwtexttarget, dwtexture, ilevel, zoffset)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFramebufferTexture3D")
   IF pProc THEN CALL DWORD pProc USING Proto_glFramebufferTexture3D(dwtarget, dwattachment, dwtexttarget, dwtexture, ilevel, zoffset)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFramebufferRenderbuffer (GLenum target, GLenum attachment,
' GLenum renderbuffertarget, GLuint renderbuffer);
' ========================================================================================
DECLARE SUB Proto_glFramebufferRenderbuffer (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glFramebufferRenderbuffer(dwtarget, dwattachment, dwrenderbuffertarget, dwrenderbuffer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFramebufferRenderbuffer")
   IF pProc THEN CALL DWORD pProc USING Proto_glFramebufferRenderbuffer(dwtarget, dwattachment, dwrenderbuffertarget, dwrenderbuffer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetFramebufferAttachmentParameteriv (GLenum target, GLenum attachment,
' GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetFramebufferAttachmentParameteriv (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetFramebufferAttachmentParameteriv(dwtarget, dwattachment, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetFramebufferAttachmentParameteriv")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetFramebufferAttachmentParameteriv(dwtarget, dwattachment, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGenerateMipmap (GLenum target);
' ========================================================================================
DECLARE SUB Proto_glGenerateMipmap (BYVAL DWORD)
MACRO glGenerateMipmap(dwtarget)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGenerateMipmap")
   IF pProc THEN CALL DWORD pProc USING Proto_glGenerateMipmap(dwtarget)
END MACRO
' ========================================================================================

' ========================================================================================
' void glBlitFramebuffer (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0,
' GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
' ========================================================================================
DECLARE SUB Proto_glBlitFramebuffer (BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL DWORD)
MACRO glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, dwmask, dwfilter)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBlitFramebuffer")
   IF pProc THEN CALL DWORD pProc USING Proto_glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, dwmask, dwfilter)
END MACRO
' ========================================================================================

' ========================================================================================
' void glRenderbufferStorageMultisample (GLenum target, GLsizei samples,
' GLenum internalformat, GLsizei width, GLsizei height);
' ========================================================================================
DECLARE SUB Proto_glRenderbufferStorageMultisample (BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG)
MACRO glRenderbufferStorageMultisample(dwtarget, isamples, internalformat, iwidth, iheight)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glRenderbufferStorageMultisample")
   IF pProc THEN CALL DWORD pProc USING Proto_glRenderbufferStorageMultisample(dwtarget, isamples, internalformat, iwidth, iheight)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFramebufferTextureLayer (GLenum target, GLenum attachment, GLuint texture,
' GLint level, GLint layer);
' ========================================================================================
DECLARE SUB Proto_glFramebufferTextureLayer (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG)
MACRO glFramebufferTextureLayer(dwtarget, dwattachment, dwtexture, ilevel, ilayer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFramebufferTextureLayer")
   IF pProc THEN CALL DWORD pProc USING Proto_glFramebufferTextureLayer(dwtarget, dwattachment, dwtexture, ilevel, ilayer)
END MACRO
' ========================================================================================

'#ENDIF ' /* GL_GLEXT_PROTOTYPES */
#ENDIF

#IF NOT %DEF(%GL_ARB_framebuffer_sRGB)
%GL_ARB_framebuffer_sRGB = 1
#ENDIF

#IF NOT %DEF(%GL_ARB_geometry_shader4)
%GL_ARB_geometry_shader4 = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glProgramParameteriARB (GLuint program, GLenum pname, GLint value);
' ========================================================================================
DECLARE SUB Proto_glProgramParameteriARB (BYVAL DWORD, BYVAL DWORD, BYVAL LONG)
MACRO glProgramParameteriARB(dwprogram, pname, ivalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramParameteriARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramParameteriARB(dwprogram, pname, ivalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFramebufferTextureARB (GLenum target, GLenum attachment, GLuint texture, GLint level);
' ========================================================================================
DECLARE SUB Proto_glFramebufferTextureARB (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG)
MACRO glFramebufferTextureARB(dwtarget, dwattachment, dwtexture, ilevel)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFramebufferTextureARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glFramebufferTextureARB(dwtarget, dwattachment, dwtexture, ilevel)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFramebufferTextureLayerARB (GLenum target, GLenum attachment, GLuint texture,
' GLint level, GLint layer);
' ========================================================================================
DECLARE SUB Proto_glFramebufferTextureLayerARB (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG)
MACRO glFramebufferTextureLayerARB(dwtarget, dwattachment, dwtexture, ilevel, ilayer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFramebufferTextureLayerARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glFramebufferTextureLayerARB(dwtarget, dwattachment, dwtexture, ilevel, ilayer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFramebufferTextureFaceARB (GLenum target, GLenum attachment, GLuint texture,
' GLint level, GLenum face);
' ========================================================================================
DECLARE SUB Proto_glFramebufferTextureFaceARB (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD)
MACRO glFramebufferTextureFaceARB(dwtarget, dwattachment, dwtexture, ilevel, dwface)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFramebufferTextureFaceARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glFramebufferTextureFaceARB(dwtarget, dwattachment, dwtexture, ilevel, dwface)
END MACRO
' ========================================================================================

'#ENDIF ' /* GL_GLEXT_PROTOTYPES */
#ENDIF

#IF NOT %DEF(%GL_ARB_half_float_vertex)
%GL_ARB_half_float_vertex = 1
#ENDIF

#IF NOT %DEF(%GL_ARB_instanced_arrays)
%GL_ARB_instanced_arrays = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glVertexAttribDivisor (GLuint index, GLuint divisor);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribDivisor (BYVAL DWORD, BYVAL DWORD)
MACRO glVertexAttribDivisor(dwindex, dwdivisor)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribDivisor")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribDivisor(dwindex, dwdivisor)
END MACRO
' ========================================================================================
'#ENDIF ' /* GL_GLEXT_PROTOTYPES */

#ENDIF

#IF NOT %DEF(%GL_ARB_map_buffer_range)
%GL_ARB_map_buffer_range = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glMapBufferRange (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
' ========================================================================================
DECLARE SUB Proto_glMapBufferRange (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glMapBufferRange(dwtarget, dwoffset, dwlength, dwaccess)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMapBufferRange")
   IF pProc THEN CALL DWORD pProc USING Proto_glMapBufferRange(dwtarget, dwoffset, dwlength, dwaccess)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFlushMappedBufferRange (GLenum target, GLintptr offset, GLsizeiptr length);
' ========================================================================================
DECLARE SUB Proto_glFlushMappedBufferRange (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glFlushMappedBufferRange(dwtarget, dwoffset, dwlength)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFlushMappedBufferRange")
   IF pProc THEN CALL DWORD pProc USING Proto_glFlushMappedBufferRange(dwtarget, dwoffset, dwlength)
END MACRO
' ========================================================================================

'#ENDIF ' /* GL_GLEXT_PROTOTYPES */
#ENDIF

#IF NOT %DEF(%GL_ARB_texture_buffer_object)
%GL_ARB_texture_buffer_object = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glTexBufferARB (GLenum target, GLenum internalformat, GLuint buffer);
' ========================================================================================
DECLARE SUB Proto_glTexBufferARB (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glTexBufferARB(dwtarget, internalformat, dwbuffer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexBufferARB")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexBufferARB(dwtarget, internalformat, dwbuffer)
END MACRO
' ========================================================================================

'#ENDIF ' /* GL_GLEXT_PROTOTYPES */
#ENDIF

#IF NOT %DEF(%GL_ARB_texture_compression_rgtc)
%GL_ARB_texture_compression_rgtc = 1
#ENDIF

#IF NOT %DEF(%GL_ARB_texture_rg)
%GL_ARB_texture_rg = 1
#ENDIF

#IF NOT %DEF(%GL_ARB_vertex_array_object)
%GL_ARB_vertex_array_object = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glBindVertexArray (GLuint array);
' ========================================================================================
DECLARE SUB Proto_glBindVertexArray (BYVAL DWORD)
MACRO glBindVertexArray(dwarray)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBindVertexArray")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindVertexArray(dwarray)
END MACRO
' ========================================================================================

' ========================================================================================
' void glDeleteVertexArrays (GLsizei n, const GLuint *arrays);
' ========================================================================================
DECLARE SUB Proto_glDeleteVertexArrays (BYVAL LONG, BYREF DWORD)
MACRO glDeleteVertexArrays(n, dwarrays)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDeleteVertexArrays")
   IF pProc THEN CALL DWORD pProc USING Proto_glDeleteVertexArrays(n, dwarrays)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGenVertexArrays (GLsizei n, GLuint *arrays);
' ========================================================================================
DECLARE SUB Proto_glGenVertexArrays (BYVAL LONG, BYREF DWORD)
MACRO glGenVertexArrays(n, dwarrays)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGenVertexArrays")
   IF pProc THEN CALL DWORD pProc USING Proto_glGenVertexArrays(n, dwarrays)
END MACRO
' ========================================================================================

' ========================================================================================
' GLboolean glIsVertexArray (GLuint array);
' ========================================================================================
DECLARE SUB Proto_glIsVertexArray (BYVAL DWORD)
MACRO FUNCTION glIsVertexArray(dwarray)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glIsVertexArray")
   IF pProc THEN CALL DWORD pProc USING Proto_glIsVertexArray(dwarray) TO bRes
END MACRO = bRes
' ========================================================================================

'ENDIF ' /* GL_GLEXT_PROTOTYPES */
#ENDIF

#IF NOT %DEF(%GL_EXT_abgr)
%GL_EXT_abgr = 1
#ENDIF

#IF NOT %DEF(%GL_EXT_blend_color)
%GL_EXT_blend_color = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glBlendColorEXT (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
' ========================================================================================
DECLARE SUB Proto_glBlendColorEXT (BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glBlendColorEXT(fred, fgreen, fblue, falpha)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBlendColorEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBlendColorEXT(fred, fgreen, fblue, falpha)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF

#IF NOT %DEF(%GL_EXT_polygon_offset)
%GL_EXT_polygon_offset = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glPolygonOffsetEXT (GLfloat factor, GLfloat bias);
' ========================================================================================
DECLARE SUB Proto_glPolygonOffsetEXT (BYVAL SINGLE, BYVAL SINGLE)
MACRO glPolygonOffsetEXT(factor, bias)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPolygonOffsetEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glPolygonOffsetEXT(factor, bias)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_texture)
%GL_EXT_texture = 1
#ENDIF


#IF NOT %DEF(%GL_EXT_texture3D)
%GL_EXT_texture3D = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glTexImage3DEXT (GLenum target, GLint level, GLenum internalformat,
' GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
' ========================================================================================
DECLARE SUB Proto_glTexImage3DEXT (BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glTexImage3DEXT(dwtarget, ilevel, internalformat, iwidth, iheight, idepth, iborder, dwformat, dwtype, ppixels)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexImage3DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexImage3DEXT(dwtarget, ilevel, internalformat, iwidth, iheight, idepth, iborder, dwformat, dwtype, ppixels)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexSubImage3DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset,
' GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
' ========================================================================================
DECLARE SUB Proto_glTexSubImage3DEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glTexSubImage3DEXT(dwtarget, ilevel, xoffset, yoffset, zoffset, iwidth, iheight, idepth, dwformat, dwtype, ppixels)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexSubImage3DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexSubImage3DEXT(dwtarget, ilevel, xoffset, yoffset, zoffset, iwidth, iheight, idepth, dwformat, dwtype, ppixels)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF

#IF NOT %DEF(%GL_SGIS_texture_filter4)
%GL_SGIS_texture_filter4 = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glGetTexFilterFuncSGIS (GLenum target, GLenum filter, GLfloat *weights);
' ========================================================================================
DECLARE SUB Proto_glGetTexFilterFuncSGIS (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetTexFilterFuncSGIS(dwtarget, dwfilter, pweights)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetTexFilterFuncSGIS")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetTexFilterFuncSGIS(dwtarget, dwfilter, pweights)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexFilterFuncSGIS (GLenum target, GLenum filter, GLsizei n, const GLfloat *weights);
' ========================================================================================
DECLARE SUB Proto_glTexFilterFuncSGIS (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYREF SINGLE)
MACRO glTexFilterFuncSGIS(dwtarget, dwfilter, n, pweights)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexFilterFuncSGIS")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexFilterFuncSGIS(dwtarget, dwfilter, n, pweights)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF

#IF NOT %DEF(%GL_EXT_subtexture)
%GL_EXT_subtexture = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glTexSubImage1DEXT (GLenum target, GLint level, GLint xoffset, GLsizei width,
' GLenum format, GLenum type, const GLvoid *pixels);
' ========================================================================================
DECLARE SUB Proto_glTexSubImage1DEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glTexSubImage1DEXT(dwtarget, ilevel, xoffset, iwidth, dwformat, dwtype, ppixels)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexSubImage1DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexSubImage1DEXT(dwtarget, ilevel, xoffset, iwidth, dwformat, dwtype, ppixels)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexSubImage2DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset,
' GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
' ========================================================================================
DECLARE SUB Proto_glTexSubImage2DEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glTexSubImage2DEXT(dwtarget, ilevel, xoffset, yoffset, iwidth, dwformat, dwtype, ppixels)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexSubImage2DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexSubImage1DEXT(dwtarget, ilevel, xoffset, yoffset, iwidth, dwformat, dwtype, ppixels)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_copy_texture)
%GL_EXT_copy_texture = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glCopyTexImage1DEXT (GLenum target, GLint level, GLenum internalformat,
' GLint x, GLint y, GLsizei width, GLint border);
' ========================================================================================
DECLARE SUB Proto_glCopyTexImage1DEXT (BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glCopyTexImage1DEXT(dwtarget, ilevel, internalformat, x, y, iwidth, iborder)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCopyTexImage1DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCopyTexImage1DEXT(dwtarget, ilevel, internalformat, x, y, iwidth, iborder)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCopyTexImage2DEXT (GLenum target, GLint level, GLenum internalformat,
' GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
' ========================================================================================
DECLARE SUB Proto_glCopyTexImage2DEXT (BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glCopyTexImage2DEXT(dwtarget, ilevel, internalformat, x, y, iwidth, iheight, iborder)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCopyTexImage2DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCopyTexImage2DEXT(dwtarget, ilevel, internalformat, x, y, iwidth, iheight, iborder)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCopyTexSubImage1DEXT (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
' ========================================================================================
DECLARE SUB Proto_glCopyTexSubImage1DEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glCopyTexSubImage1DEXT(dwtarget, ilevel, xoffset, x, y, iwidth)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCopyTexSubImage1DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCopyTexSubImage1DEXT(dwtarget, ilevel, xoffset, x, y, iwidth)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCopyTexSubImage2DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset,
' GLint x, GLint y, GLsizei width, GLsizei height);
' ========================================================================================
DECLARE SUB Proto_glCopyTexSubImage2DEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glCopyTexSubImage2DEXT(dwtarget, ilevel, xoffset, yoffset, x, y, iwidth, iheight)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCopyTexSubImage2DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCopyTexSubImage2DEXT(dwtarget, ilevel, xoffset, yoffset, x, y, iwidth, iheight)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCopyTexSubImage3DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset,
' GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
' ========================================================================================
DECLARE SUB Proto_glCopyTexSubImage3DEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glCopyTexSubImage3DEXT(dwtarget, ilevel, xoffset, yoffset, zoffset, x, y, iwidth, iheight)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCopyTexSubImage3DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCopyTexSubImage3DEXT(dwtarget, ilevel, xoffset, yoffset, zoffset, x, y, iwidth, iheight)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_histogram)
%GL_EXT_histogram = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glGetHistogramEXT (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
' ========================================================================================
DECLARE SUB Proto_glGetHistogramEXT (BYVAL DWORD, BYVAL BYTE, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glGetHistogramEXT(dwtarget, breset, dwformat, dwtype, pvalues)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetHistogramEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetHistogramEXT(dwtarget, breset, dwformat, dwtype, pvalues)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetHistogramParameterfvEXT (GLenum target, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetHistogramParameterfvEXT (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetHistogramParameterfvEXT(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetHistogramParameterfvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetHistogramParameterfvEXT(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetHistogramParameterivEXT (GLenum target, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetHistogramParameterivEXT (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetHistogramParameterivEXT(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetHistogramParameterivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetHistogramParameterivEXT(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetMinmaxEXT (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
' ========================================================================================
DECLARE SUB Proto_glGetMinmaxEXT (BYVAL DWORD, BYVAL BYTE, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glGetMinmaxEXT(dwtarget, breset, dwformat, dwtype, pvalues)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetMinmaxEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetMinmaxEXT(dwtarget, breset, dwformat, dwtype, pvalues)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetMinmaxParameterfvEXT (GLenum target, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetMinmaxParameterfvEXT (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetMinmaxParameterfvEXT(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetMinmaxParameterfvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetMinmaxParameterfvEXT(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetMinmaxParameterivEXT (GLenum target, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetMinmaxParameterivEXT (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetMinmaxParameterivEXT(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetMinmaxParameterivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetMinmaxParameterivEXT(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glHistogramEXT (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
' ========================================================================================
DECLARE SUB Proto_glHistogramEXT (BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL BYTE)
MACRO glHistogramEXT(dwtarget, iwidth, internalformat, bsink)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glHistogramEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glHistogramEXT(dwtarget, iwidth, internalformat, bsink)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMinmaxEXT (GLenum target, GLenum internalformat, GLboolean sink);
' ========================================================================================
DECLARE SUB Proto_glMinmaxEXT (BYVAL DWORD, BYVAL DWORD, BYVAL BYTE)
MACRO glMinmaxEXT(dwtarget, internalformat, bsink)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMinmaxEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMinmaxEXT(dwtarget, internalformat, bsink)
END MACRO
' ========================================================================================

' ========================================================================================
' void glResetHistogramEXT (GLenum target);
' ========================================================================================
DECLARE SUB Proto_glResetHistogramEXT (BYVAL DWORD)
MACRO glResetHistogramEXT(dwtarget)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glResetHistogramEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glResetHistogramEXT(dwtarget)
END MACRO
' ========================================================================================

' ========================================================================================
' void glResetMinmaxEXT (GLenum target);
' ========================================================================================
DECLARE SUB Proto_glResetMinmaxEXT (BYVAL DWORD)
MACRO glResetMinmaxEXT(dwtarget)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glResetMinmaxEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glResetMinmaxEXT(dwtarget)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_convolution)
%GL_EXT_convolution = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glConvolutionFilter1DEXT (GLenum target, GLenum internalformat, GLsizei width,
' GLenum format, GLenum type, const GLvoid *image);
' ========================================================================================
DECLARE SUB Proto_glConvolutionFilter1DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glConvolutionFilter1DEXT(dwtarget, internalformat, iwidth, dwformat, dwtype, ptable)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glConvolutionFilter1DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glConvolutionFilter1DEXT(dwtarget, internalformat, iwidth, dwformat, dwtype, ptable)
END MACRO
' ========================================================================================

' ========================================================================================
' void glConvolutionFilter2DEXT (GLenum target, GLenum internalformat, GLsizei width,
' GLsizei height, GLenum format, GLenum type, const GLvoid *image);
' ========================================================================================
DECLARE SUB Proto_glConvolutionFilter2DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glConvolutionFilter2DEXT(dwtarget, internalformat, iwidth, iheight, dwformat, dwtype, pimage)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glConvolutionFilter2DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glConvolutionFilter2DEXT(dwtarget, internalformat, iwidth, iheight, dwformat, dwtype, pimage)
END MACRO
' ========================================================================================

' ========================================================================================
' void glConvolutionParameterfEXT (GLenum target, GLenum pname, GLfloat params);
' ========================================================================================
DECLARE SUB Proto_glConvolutionParameterfEXT (BYVAL DWORD, BYVAL DWORD, BYVAL SINGLE)
MACRO glConvolutionParameterfEXT(dwtarget, pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glConvolutionParameterfEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glConvolutionParameterfEXT(dwtarget, pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glConvolutionParameterfvEXT (GLenum target, GLenum pname, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glConvolutionParameterfvEXT (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glConvolutionParameterfvEXT(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glConvolutionParameterfvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glConvolutionParameterfvEXT(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glConvolutionParameteriEXT (GLenum target, GLenum pname, GLint params);
' ========================================================================================
DECLARE SUB Proto_glConvolutionParameteriEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG)
MACRO glConvolutionParameteriEXT(dwtarget, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glConvolutionParameteriEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glConvolutionParameteriEXT(dwtarget, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' void glConvolutionParameterivEXT (GLenum target, GLenum pname, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glConvolutionParameterivEXT (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glConvolutionParameterivEXT(dwtarget, pname, params)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glConvolutionParameterivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glConvolutionParameterivEXT(dwtarget, pname, params)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCopyConvolutionFilter1DEXT (GLenum target, GLenum internalformat,
' GLint x, GLint y, GLsizei width);
' ========================================================================================
DECLARE SUB Proto_glCopyConvolutionFilter1DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glCopyConvolutionFilter1DEXT(dwtarget, internalformat, x, y, iwidth)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCopyConvolutionFilter1DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCopyConvolutionFilter1DEXT(dwtarget, internalformat, x, y, iwidth)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCopyConvolutionFilter2DEXT (GLenum target, GLenum internalformat,
' GLint x, GLint y, GLsizei width, GLsizei height);
' ========================================================================================
DECLARE SUB Proto_glCopyConvolutionFilter2DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glCopyConvolutionFilter2DEXT(dwtarget, internalformat, x, y, iwidth, iheight)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCopyConvolutionFilter2DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCopyConvolutionFilter2DEXT(dwtarget, internalformat, x, y, iwidth, iheight)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetConvolutionFilterEXT (GLenum target, GLenum format, GLenum type, GLvoid *image);
' ========================================================================================
DECLARE SUB Proto_glGetConvolutionFilterEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glGetConvolutionFilterEXT(dwtarget, dwformat, dwtype, ptable)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetConvolutionFilterEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetConvolutionFilterEXT(dwtarget, dwformat, dwtype, ptable)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetConvolutionParameterfvEXT (GLenum target, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetConvolutionParameterfvEXT (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetConvolutionParameterfvEXT(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetConvolutionParameterfvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetConvolutionParameterfvEXT(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetConvolutionParameterivEXT (GLenum target, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetConvolutionParameterivEXT (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetConvolutionParameterivEXT(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetConvolutionParameterivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetConvolutionParameterivEXT(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetSeparableFilterEXT (GLenum target, GLenum format, GLenum type, GLvoid *row,
' GLvoid *column, GLvoid *span);
' ========================================================================================
DECLARE SUB Proto_glGetSeparableFilterEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF ANY, BYREF ANY, BYREF ANY)
MACRO glGetSeparableFilterEXT(dwtarget, dwformat, dwtype, prow, pcolumn, pspan)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetSeparableFilterEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetSeparableFilterEXT(dwtarget, dwformat, dwtype, prow, pcolumn, pspan)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSeparableFilter2DEXT (GLenum target, GLenum internalformat, GLsizei width,
' GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
' ========================================================================================
DECLARE SUB Proto_glSeparableFilter2DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY, BYREF ANY)
MACRO glSeparableFilter2DEXT(dwtarget, internalformat, iwidth, iheight, dwformat, dwtype, prow, pcolumn)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSeparableFilter2DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glSeparableFilter2DEXT(dwtarget, internalformat, iwidth, iheight, dwformat, dwtype, prow, pcolumn)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_SGI_color_matrix)
%GL_SGI_color_matrix = 1
#ENDIF


#IF NOT %DEF(%GL_SGI_color_table)
%GL_SGI_color_table = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glColorTableSGI (GLenum target, GLenum internalformat, GLsizei width, GLenum format,
' GLenum type, const GLvoid *table);
' ========================================================================================
DECLARE SUB Proto_glColorTableSGI (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glColorTableSGI(dwtarget, internalformat, iwidth, dwformat, dwtype, ptable)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glColorTableSGI")
   IF pProc THEN CALL DWORD pProc USING Proto_glColorTableSGI(dwtarget, internalformat, iwidth, dwformat, dwtype, ptable)
END MACRO
' ========================================================================================

' ========================================================================================
' void glColorTableParameterfvSGI (GLenum target, GLenum pname, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glColorTableParameterfvSGI (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glColorTableParameterfvSGI(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glColorTableParameterfvSGI")
   IF pProc THEN CALL DWORD pProc USING Proto_glColorTableParameterfvSGI(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glColorTableParameterivSGI (GLenum target, GLenum pname, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glColorTableParameterivSGI (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glColorTableParameterivSGI(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glColorTableParameterivSGI")
   IF pProc THEN CALL DWORD pProc USING Proto_glColorTableParameterivSGI(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCopyColorTableSGI (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
' ========================================================================================
DECLARE SUB Proto_glCopyColorTableSGI (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glCopyColorTableSGI(dwtarget, internalformat, x, y, iwidth)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCopyColorTableSGI")
   IF pProc THEN CALL DWORD pProc USING Proto_glCopyColorTableSGI(dwtarget, internalformat, x, y, iwidth)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetColorTableSGI (GLenum target, GLenum format, GLenum type, GLvoid *table);
' ========================================================================================
DECLARE SUB Proto_glGetColorTableSGI (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glGetColorTableSGI(dwtarget, dwformat, dwtype, ptable)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetColorTableSGI")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetColorTableSGI(dwtarget, dwformat, dwtype, ptable)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetColorTableParameterfvSGI (GLenum target, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetColorTableParameterfvSGI (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetColorTableParameterfvSGI(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetColorTableParameterfvSGI")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetColorTableParameterfvSGI(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetColorTableParameterivSGI (GLenum target, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetColorTableParameterivSGI (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetColorTableParameterivSGI(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetColorTableParameterivSGI")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetColorTableParameterivSGI(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_SGIX_pixel_texture)
%GL_SGIX_pixel_texture = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glPixelTexGenSGIX (GLenum mode);
' ========================================================================================
DECLARE SUB Proto_glPixelTexGenSGIX (BYVAL DWORD)
MACRO glPixelTexGenSGIX(dwmode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPixelTexGenSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glPixelTexGenSGIX(dwmode)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_SGIS_pixel_texture)
%GL_SGIS_pixel_texture = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glPixelTexGenParameteriSGIS (GLenum pname, GLint param);
' ========================================================================================
DECLARE SUB Proto_glPixelTexGenParameteriSGIS (BYVAL DWORD, BYVAL LONG)
MACRO glPixelTexGenParameteriSGIS(pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPixelTexGenParameteriSGIS")
   IF pProc THEN CALL DWORD pProc USING Proto_glPixelTexGenParameteriSGIS(pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glPixelTexGenParameterivSGIS (GLenum pname, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glPixelTexGenParameterivSGIS (BYVAL DWORD, BYREF LONG)
MACRO glPixelTexGenParameterivSGIS(pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPixelTexGenParameterivSGIS")
   IF pProc THEN CALL DWORD pProc USING Proto_glPixelTexGenParameterivSGIS(pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glPixelTexGenParameterfSGIS (GLenum pname, GLfloat param);
' ========================================================================================
DECLARE SUB Proto_glPixelTexGenParameterfSGIS (BYVAL DWORD, BYVAL SINGLE)
MACRO glPixelTexGenParameterfSGIS(pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPixelTexGenParameterfSGIS")
   IF pProc THEN CALL DWORD pProc USING Proto_glPixelTexGenParameterfSGIS(pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glPixelTexGenParameterfvSGIS (GLenum pname, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glPixelTexGenParameterfvSGIS (BYVAL DWORD, BYREF SINGLE)
MACRO glPixelTexGenParameterfvSGIS(pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPixelTexGenParameterfvSGIS")
   IF pProc THEN CALL DWORD pProc USING Proto_glPixelTexGenParameterfvSGIS(pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetPixelTexGenParameterivSGIS (GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetPixelTexGenParameterivSGIS (BYVAL DWORD, BYREF LONG)
MACRO glGetPixelTexGenParameterivSGIS(pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetPixelTexGenParameterivSGIS")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetPixelTexGenParameterivSGIS(pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetPixelTexGenParameterfvSGIS (GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetPixelTexGenParameterfvSGIS (BYVAL DWORD, BYREF SINGLE)
MACRO glGetPixelTexGenParameterfvSGIS(pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetPixelTexGenParameterfvSGIS")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetPixelTexGenParameterfvSGIS(pname, pparams)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_SGIS_texture4D)
%GL_SGIS_texture4D = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glTexImage4DSGIS (GLenum target, GLint level, GLenum internalformat, GLsizei width,
' GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
' ========================================================================================
DECLARE SUB Proto_glTexImage4DSGIS (BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glTexImage4DSGIS(dwtarget, ilevel, internalformat, iwidth, iheight, idepth, isize4d, iborder, dwformat, dwtype, ppixels)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexImage4DSGIS")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexImage4DSGIS(dwtarget, ilevel, internalformat, iwidth, iheight, idepth, isize4d, iborder, dwformat, dwtype, ppixels)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexSubImage4DSGIS (GLenum target, GLint level, GLint xoffset, GLint yoffset,
' GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth,
' GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels);
' ========================================================================================
DECLARE SUB Proto_glTexSubImage4DSGIS (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glTexSubImage4DSGIS(dwtarget, ilevel, xoffset, yoffset, zoffset, woffset, iwidth, iheight, idepth, isize4d, dwformat, dwtype, ppixels)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexSubImage4DSGIS")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexSubImage4DSGIS(dwtarget, ilevel, xoffset, yoffset, zoffset, woffset, iwidth, iheight, idepth, isize4d, dwformat, dwtype, ppixels)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_SGI_texture_color_table)
%GL_SGI_texture_color_table = 1
#ENDIF


#IF NOT %DEF(%GL_EXT_cmyka)
%GL_EXT_cmyka = 1
#ENDIF


#IF NOT %DEF(%GL_EXT_texture_object)
%GL_EXT_texture_object = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' GLboolean glAreTexturesResidentEXT (GLsizei n, const GLuint *textures, GLboolean *residences);
' ========================================================================================
DECLARE FUNCTION Proto_glAreTexturesResidentEXT (BYVAL LONG, BYREF DWORD, BYREF BYTE) AS BYTE
MACRO FUNCTION glAreTexturesResidentEXT(n, ptextures, presidences)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glAreTexturesResidentEXT")
   IF pProc THENCALL DWORD pProc USING Proto_glAreTexturesResidentEXT(n, ptextures, presidences) TO bRes
END MACRO = bRes
' ========================================================================================

' ========================================================================================
' void glBindTextureEXT (GLenum target, GLuint texture);
' ========================================================================================
DECLARE SUB Proto_glBindTextureEXT (BYVAL DWORD, BYVAL DWORD)
MACRO glBindTextureEXT(dwtarget, dwtexture)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBindTextureEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindTextureEXT(dwtarget, dwtexture)
END MACRO
' ========================================================================================

' ========================================================================================
' void glDeleteTexturesEXT (GLsizei n, const GLuint *textures);
' ========================================================================================
DECLARE SUB Proto_glDeleteTexturesEXT (BYVAL LONG, BYREF DWORD)
MACRO glDeleteTexturesEXT(n, ptextures)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDeleteTexturesEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glDeleteTexturesEXT(n, ptextures)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGenTexturesEXT (GLsizei n, GLuint *textures);
' ========================================================================================
DECLARE SUB Proto_glGenTexturesEXT (BYVAL LONG, BYREF DWORD)
MACRO glGenTexturesEXT(n, ptextures)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGenTexturesEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGenTexturesEXT(n, ptextures)
END MACRO
' ========================================================================================

' ========================================================================================
' GLboolean glIsTextureEXT (GLuint texture);
' ========================================================================================
DECLARE FUNCTION Proto_glIsTextureEXT (BYVAL DWORD) AS BYTE
MACRO FUNCTION glIsTextureEXT(dwtexture)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glIsTextureEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glIsTextureEXT(dwtexture) TO bRes
END MACRO = bRes
' ========================================================================================

' ========================================================================================
' void glPrioritizeTexturesEXT (GLsizei n, const GLuint *textures, const GLclampf *priorities);
' ========================================================================================
DECLARE SUB Proto_glPrioritizeTexturesEXT (BYVAL LONG, BYREF DWORD, BYREF SINGLE)
MACRO glPrioritizeTexturesEXT(n, ptextures, ppriorities)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPrioritizeTexturesEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glPrioritizeTexturesEXT(n, ptextures, ppriorities)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF

#IF NOT %DEF(%GL_SGIS_detail_texture)
%GL_SGIS_detail_texture = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glDetailTexFuncSGIS (GLenum target, GLsizei n, const GLfloat *points);
' ========================================================================================
DECLARE SUB Proto_glDetailTexFuncSGIS (BYVAL DWORD, BYVAL LONG, BYREF SINGLE)
MACRO glDetailTexFuncSGIS(dwtarget, n, ppoints)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDetailTexFuncSGIS")
   IF pProc THEN CALL DWORD pProc USING Proto_glDetailTexFuncSGIS(dwtarget, n, ppoints)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetDetailTexFuncSGIS (GLenum target, GLfloat *points);
' ========================================================================================
DECLARE SUB Proto_glGetDetailTexFuncSGIS (BYVAL DWORD, BYREF SINGLE)
MACRO glGetDetailTexFuncSGIS(dwtarget, ppoints)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetDetailTexFuncSGIS")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetDetailTexFuncSGIS(dwtarget, ppoints)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_SGIS_sharpen_texture)
%GL_SGIS_sharpen_texture = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glSharpenTexFuncSGIS (GLenum target, GLsizei n, const GLfloat *points);
' ========================================================================================
DECLARE SUB Proto_glSharpenTexFuncSGIS (BYVAL DWORD, BYVAL LONG, BYREF SINGLE)
MACRO glSharpenTexFuncSGIS(dwtarget, n, ppoints)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSharpenTexFuncSGIS")
   IF pProc THEN CALL DWORD pProc USING Proto_glSharpenTexFuncSGIS(dwtarget, n, ppoints)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetSharpenTexFuncSGIS (GLenum target, GLfloat *points);
' ========================================================================================
DECLARE SUB Proto_glGetSharpenTexFuncSGIS (BYVAL DWORD, BYREF SINGLE)
MACRO glGetSharpenTexFuncSGIS(dwtarget, ppoints)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetSharpenTexFuncSGIS")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetSharpenTexFuncSGIS(dwtarget, ppoints)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_packed_pixels)
%GL_EXT_packed_pixels = 1
#ENDIF

#IF NOT %DEF(%GL_SGIS_texture_lod)
%GL_SGIS_texture_lod = 1
#ENDIF


#IF NOT %DEF(%GL_SGIS_multisample)
%GL_SGIS_multisample = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glSampleMaskSGIS (GLclampf value, GLboolean invert);
' ========================================================================================
DECLARE SUB Proto_glSampleMaskSGIS (BYVAL SINGLE, BYVAL BYTE)
MACRO glSampleMaskSGIS(dwvalue, binvert)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSampleMaskSGIS")
   IF pProc THEN CALL DWORD pProc USING Proto_glSampleMaskSGIS(dwvalue, binvert)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSamplePatternSGIS (GLenum pattern);
' ========================================================================================
DECLARE SUB Proto_glSamplePatternSGIS (BYVAL DWORD)
MACRO glSamplePatternSGIS(dwpattern)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSamplePatternSGIS")
   IF pProc THEN CALL DWORD pProc USING Proto_glSamplePatternSGIS(dwpattern)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_rescale_normal)
%GL_EXT_rescale_normal = 1
#ENDIF

#IF NOT %DEF(%GL_EXT_vertex_array)
%GL_EXT_vertex_array = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' Render a vertex using the specified vertex array element.
' void glArrayElementEXT (GLint i);
' ========================================================================================
DECLARE SUB Proto_glArrayElementEXT (BYVAL LONG)
MACRO glArrayElementEXT(i)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glArrayElementEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glArrayElementEXT(i)
END MACRO
' ========================================================================================

' ========================================================================================
' void glColorPointerEXT (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
' ========================================================================================
DECLARE SUB Proto_glColorPointerEXT (BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYREF ANY)
MACRO Proto_glColorPointerEXT(isize, dwtype, istride, icount, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("Proto_glColorPointerEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_Proto_glColorPointerEXT(isize, dwtype, istride, icount, ppointer)
END MACRO
' ========================================================================================

' ========================================================================================
' Define a array of	colors.
' void glDrawArraysEXT (GLenum mode, GLint first, GLsizei count);
' ========================================================================================
DECLARE SUB Proto_glDrawArraysEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG)
MACRO glDrawArraysEXT(dwmode, ifirst, icount)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDrawArraysEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glDrawArraysEXT(dwmode, ifirst, icount)
END MACRO
' ========================================================================================

' ========================================================================================
' Define	an array of edge flags
' void glEdgeFlagPointerEXT (GLsizei stride, GLsizei count, const GLboolean *pointer);
' ========================================================================================
DECLARE SUB Proto_glEdgeFlagPointerEXT (BYVAL LONG, BYVAL LONG, BYREF BYTE)
MACRO glEdgeFlagPointerEXT(istride, icount, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glEdgeFlagPointerEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glEdgeFlagPointerEXT(istride, icount, ppointer)
END MACRO
' ========================================================================================

' ========================================================================================
' Return the	address	of a vertex data array.
' void glGetPointervEXT (GLenum pname, GLvoid* *params);
' ========================================================================================
DECLARE SUB Proto_glGetPointervEXT (BYVAL DWORD, BYREF ANY)
MACRO glGetPointervEXT(pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetPointervEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetPointervEXT(pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' Define an	array of color indexes.
' void glIndexPointerEXT (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
' ========================================================================================
DECLARE SUB Proto_glIndexPointerEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYREF ANY)
MACRO glIndexPointerEXT(dwtype, istride, icount, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glIndexPointerEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glIndexPointerEXT(dwtype, istride, icount, ppointer)
END MACRO
' ========================================================================================

' ========================================================================================
' Define a	array of normals.
' void glNormalPointerEXT (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
' ========================================================================================
DECLARE SUB Proto_glNormalPointerEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYREF ANY)
MACRO glNormalPointerEXT(dwtype, istride, icount, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNormalPointerEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glNormalPointerEXT(dwtype, istride, icount, ppointer)
END MACRO
' ========================================================================================

' ========================================================================================
' Define	an array of texture coordinates.
' void glTexCoordPointerEXT (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
' ========================================================================================
DECLARE SUB Proto_glTexCoordPointerEXT (BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYREF ANY)
MACRO glTexCoordPointerEXT(isize, dwtype, istride, icount, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexCoordPointerEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexCoordPointerEXT(isize, dwtype, istride, icount, ppointer)
END MACRO
' ========================================================================================

' ========================================================================================
' Define an array of vertex data.
' void glVertexPointerEXT (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
' ========================================================================================
DECLARE SUB Proto_glVertexPointerEXT (BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYREF ANY)
MACRO glVertexPointerEXT(isize, dwtype, istride, icount, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexPointerEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexPointerEXT(isize, dwtype, istride, icount, ppointer)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_misc_attribute)
%GL_EXT_misc_attribute = 1
#ENDIF

#IF NOT %DEF(%GL_SGIS_generate_mipmap)
%GL_SGIS_generate_mipmap = 1
#ENDIF

#IF NOT %DEF(%GL_SGIX_clipmap)
%GL_SGIX_clipmap = 1
#ENDIF

#IF NOT %DEF(%GL_SGIX_shadow)
%GL_SGIX_shadow = 1
#ENDIF

#IF NOT %DEF(%GL_SGIS_texture_edge_clamp)
%GL_SGIS_texture_edge_clamp = 1
#ENDIF

#IF NOT %DEF(%GL_SGIS_texture_border_clamp)
%GL_SGIS_texture_border_clamp = 1
#ENDIF

#IF NOT %DEF(%GL_EXT_blend_minmax)
%GL_EXT_blend_minmax = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' Set the blend equation.
' void glBlendEquationEXT (GLenum mode);
' ========================================================================================
DECLARE SUB Proto_glBlendEquationEXT (BYVAL DWORD)
MACRO glBlendEquationEXT(dwmode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBlendEquationEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBlendEquationEXT(dwmode)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_blend_subtract)
%GL_EXT_blend_subtract = 1
#ENDIF

#IF NOT %DEF(%GL_EXT_blend_logic_op)
%GL_EXT_blend_logic_op = 1
#ENDIF

#IF NOT %DEF(%GL_SGIX_interlace)
%GL_SGIX_interlace = 1
#ENDIF

#IF NOT %DEF(%GL_SGIX_pixel_tiles)
%GL_SGIX_pixel_tiles = 1
#ENDIF

#IF NOT %DEF(%GL_SGIX_texture_select)
%GL_SGIX_texture_select = 1
#ENDIF


#IF NOT %DEF(%GL_SGIX_sprite)
%GL_SGIX_sprite = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glSpriteParameterfSGIX (GLenum pname, GLfloat param);
' ========================================================================================
DECLARE SUB Proto_glSpriteParameterfSGIX (BYVAL DWORD, BYVAL SINGLE)
MACRO glSpriteParameterfSGIX(pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSpriteParameterfSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glSpriteParameterfSGIX(pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSpriteParameterfvSGIX (GLenum pname, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glSpriteParameterfvSGIX (BYVAL DWORD, BYREF SINGLE)
MACRO glSpriteParameterfvSGIX(pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSpriteParameterfvSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glSpriteParameterfvSGIX(pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSpriteParameteriSGIX (GLenum pname, GLint param);
' ========================================================================================
DECLARE SUB Proto_glSpriteParameteriSGIX (BYVAL DWORD, BYVAL LONG)
MACRO glSpriteParameteriSGIX(pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSpriteParameteriSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glSpriteParameteriSGIX(pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSpriteParameterivSGIX (GLenum pname, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glSpriteParameterivSGIX (BYVAL DWORD, BYREF LONG)
MACRO glSpriteParameterivSGIX(pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSpriteParameterivSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glSpriteParameterivSGIX(pname, pparams)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_SGIX_texture_multi_buffer)
%GL_SGIX_texture_multi_buffer = 1
#ENDIF


#IF NOT %DEF(%GL_EXT_point_parameters)
%GL_EXT_point_parameters = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glPointParameterfEXT (GLenum pname, GLfloat param);
' ========================================================================================
DECLARE SUB Proto_glPointParameterfEXT (BYVAL DWORD, BYVAL SINGLE)
MACRO glPointParameterfEXT(pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPointParameterfEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glPointParameterfEXT(pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glPointParameterfvEXT (GLenum pname, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glPointParameterfvEXT (BYVAL DWORD, BYREF SINGLE)
MACRO glPointParameterfvEXT(pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPointParameterfvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glPointParameterfvEXT(pname, pparams)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_SGIS_point_parameters)
%GL_SGIS_point_parameters       = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glPointParameterfSGIS (GLenum pname, GLfloat param);
' ========================================================================================
DECLARE SUB Proto_glPointParameterfSGIS (BYVAL DWORD, BYVAL SINGLE)
MACRO glPointParameterfSGIS(pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPointParameterfSGIS")
   IF pProc THEN CALL DWORD pProc USING Proto_glPointParameterfSGIS(pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glPointParameterfvSGIS (GLenum pname, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glPointParameterfvSGIS (BYVAL DWORD, BYREF SINGLE)
MACRO glPointParameterfvSGIS(pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPointParameterfvSGIS")
   IF pProc THEN CALL DWORD pProc USING Proto_glPointParameterfvSGIS(pname, pparams)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_SGIX_instruments)
%GL_SGIX_instruments = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' GLint glGetInstrumentsSGIX (void);
' ========================================================================================
DECLARE FUNCTION Proto_glGetInstrumentsSGIX () AS LONG
MACRO FUNCTION glGetInstrumentsSGIX
   MACROTEMP pProc, lRes
   LOCAL pProc AS DWORD, lRes AS LONG
   pProc = wglGetProcAddress("glGetInstrumentsSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetInstrumentsSGIX() TO lRes
END MACRO = lRes
' ========================================================================================

' ========================================================================================
' void glInstrumentsBufferSGIX (GLsizei size, GLint *buffer);
' ========================================================================================
DECLARE SUB Proto_glInstrumentsBufferSGIX (BYVAL LONG, BYREF LONG)
MACRO glInstrumentsBufferSGIX(isize, pbuffer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glInstrumentsBufferSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glInstrumentsBufferSGIX(isize, pbuffer)
END MACRO
' ========================================================================================

' ========================================================================================
' GLint glPollInstrumentsSGIX (GLint *marker_p);
' ========================================================================================
DECLARE FUNCTION Proto_glPollInstrumentsSGIX (BYREF LONG) AS LONG
MACRO FUNCTION glPollInstrumentsSGIX(marker_p)
   MACROTEMP pProc, lRes
   LOCAL pProc AS DWORD, lRes AS LONG
   pProc = wglGetProcAddress("glPollInstrumentsSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glPollInstrumentsSGIX(marker_p) TO lRes
END MACRO = lRes
' ========================================================================================

' ========================================================================================
' void glReadInstrumentsSGIX (GLint marker);
' ========================================================================================
DECLARE SUB Proto_glReadInstrumentsSGIX (BYVAL LONG)
MACRO glReadInstrumentsSGIX(imarker)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glReadInstrumentsSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glReadInstrumentsSGIX(imarker)
END MACRO
' ========================================================================================

' ========================================================================================
' void glStartInstrumentsSGIX (void);
' ========================================================================================
DECLARE SUB Proto_glStartInstrumentsSGIX
MACRO glStartInstrumentsSGIX
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glStartInstrumentsSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glStartInstrumentsSGIX
END MACRO
' ========================================================================================

' ========================================================================================
' void glStopInstrumentsSGIX (GLint marker);
' ========================================================================================
DECLARE SUB Proto_glStopInstrumentsSGIX (BYVAL LONG)
MACRO glStopInstrumentsSGIX(imarker)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glStopInstrumentsSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glStopInstrumentsSGIX(imarker)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF

#IF NOT %DEF(%GL_SGIX_texture_scale_bias)
%GL_SGIX_texture_scale_bias = 1
#ENDIF


#IF NOT %DEF(%GL_SGIX_framezoom)
%GL_SGIX_framezoom = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glFrameZoomSGIX (GLint factor);
' ========================================================================================
DECLARE SUB Proto_glFrameZoomSGIX (BYVAL LONG)
MACRO glFrameZoomSGIX(ifactor)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFrameZoomSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glFrameZoomSGIX(ifactor)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_SGIX_tag_sample_buffer)
%GL_SGIX_tag_sample_buffer = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glTagSampleBufferSGIX (void);
' ========================================================================================
DECLARE SUB Proto_glTagSampleBufferSGIX
MACRO glTagSampleBufferSGIX
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTagSampleBufferSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glTagSampleBufferSGIX
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_SGIX_polynomial_ffd)
%GL_SGIX_polynomial_ffd = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)


' ========================================================================================
' void glDeformationMap3dSGIX (GLenum target, GLdouble u1, GLdouble u2, GLint ustride,
' GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1,
' GLdouble w2, GLint wstride, GLint worder, const GLdouble *points);
' ========================================================================================
DECLARE SUB Proto_glDeformationMap3dSGIX (BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL LONG, BYVAL LONG, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL LONG, BYVAL LONG, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL LONG, BYVAL LONG, BYREF DOUBLE)
MACRO glDeformationMap3dSGIX(dwtarget, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, ppoints)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDeformationMap3dSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glDeformationMap3dSGIX(dwtarget, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, ppoints)
END MACRO
' ========================================================================================

' ========================================================================================
' void glDeformationMap3fSGIX (GLenum target, GLfloat u1, GLfloat u2, GLint ustride,
' GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1,
' GLfloat w2, GLint wstride, GLint worder, const GLfloat *points);
' ========================================================================================
DECLARE SUB Proto_glDeformationMap3fSGIX (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE, BYVAL LONG, BYVAL LONG, BYVAL SINGLE, BYVAL SINGLE, BYVAL LONG, BYVAL LONG, BYVAL SINGLE, BYVAL SINGLE, BYVAL LONG, BYVAL LONG, BYREF SINGLE)
MACRO glDeformationMap3fSGIX(dwtarget, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, ppoints)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDeformationMap3fSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glDeformationMap3fSGIX(dwtarget, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, ppoints)
END MACRO
' ========================================================================================

' ========================================================================================
' void glDeformSGIX (GLbitfield mask);
' ========================================================================================
DECLARE SUB Proto_glDeformSGIX (BYVAL DWORD)
MACRO glDeformSGIX(dwmask)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDeformSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glDeformSGIX(dwmask)
END MACRO
' ========================================================================================

' ========================================================================================
' void glLoadIdentityDeformationMapSGIX (GLbitfield mask);
' ========================================================================================
DECLARE SUB Proto_glLoadIdentityDeformationMapSGIX (BYVAL DWORD)
MACRO glLoadIdentityDeformationMapSGIX(dwmask)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glLoadIdentityDeformationMapSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glLoadIdentityDeformationMapSGIX(dwmask)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF

#IF NOT %DEF(%GL_SGIX_reference_plane)
%GL_SGIX_reference_plane = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glReferencePlaneSGIX (const GLdouble *equation);
' ========================================================================================
DECLARE SUB Proto_glReferencePlaneSGIX (BYREF DOUBLE)
MACRO glReferencePlaneSGIX(pequation)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glReferencePlaneSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glReferencePlaneSGIX(pequation)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF

#IF NOT %DEF(%GL_SGIX_flush_raster)
%GL_SGIX_flush_raster = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glFlushRasterSGIX (void);
' ========================================================================================
DECLARE SUB Proto_glFlushRasterSGIX
MACRO glFlushRasterSGIX
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFlushRasterSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glFlushRasterSGIX
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_SGIX_depth_texture)
%GL_SGIX_depth_texture = 1
#ENDIF

#IF NOT %DEF(%GL_SGIS_fog_function)
%GL_SGIS_fog_function = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glFogFuncSGIS (GLsizei n, const GLfloat *points);
' ========================================================================================
DECLARE SUB Proto_glFogFuncSGIS (BYVAL LONG, BYREF SINGLE)
MACRO glFogFuncSGIS(n, ppoints)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFogFuncSGIS")
   IF pProc THEN CALL DWORD pProc USING Proto_glFogFuncSGIS(n, ppoints)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetFogFuncSGIS (GLfloat *points);
' ========================================================================================
DECLARE SUB Proto_glGetFogFuncSGIS (BYREF SINGLE)
MACRO glGetFogFuncSGIS(ppoints)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetFogFuncSGIS")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetFogFuncSGIS(ppoints)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_SGIX_fog_offset)
%GL_SGIX_fog_offset = 1
#ENDIF


#IF NOT %DEF(%GL_HP_image_transform)
%GL_HP_image_transform = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glImageTransformParameteriHP (GLenum target, GLenum pname, GLint param);
' ========================================================================================
DECLARE SUB Proto_glImageTransformParameteriHP (BYVAL DWORD, BYVAL DWORD, BYVAL LONG)
MACRO glImageTransformParameteriHP(dwtarget, pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glImageTransformParameteriHP")
   IF pProc THEN CALL DWORD pProc USING Proto_glImageTransformParameteriHP(dwtarget, pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glImageTransformParameterfHP (GLenum target, GLenum pname, GLfloat param);
' ========================================================================================
DECLARE SUB Proto_glImageTransformParameterfHP (BYVAL DWORD, BYVAL DWORD, BYVAL SINGLE)
MACRO glImageTransformParameterfHP(dwtarget, pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glImageTransformParameterfHP")
   IF pProc THEN CALL DWORD pProc USING Proto_glImageTransformParameterfHP(dwtarget, pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glImageTransformParameterivHP (GLenum target, GLenum pname, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glImageTransformParameterivHP (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glImageTransformParameterivHP(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glImageTransformParameterivHP")
   IF pProc THEN CALL DWORD pProc USING Proto_glImageTransformParameterivHP(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glImageTransformParameterfvHP (GLenum target, GLenum pname, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glImageTransformParameterfvHP (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glImageTransformParameterfvHP(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glImageTransformParameterfvHP")
   IF pProc THEN CALL DWORD pProc USING Proto_glImageTransformParameterfvHP(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetImageTransformParameterivHP (GLenum target, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetImageTransformParameterivHP (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetImageTransformParameterivHP(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetImageTransformParameterivHP")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetImageTransformParameterivHP(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetImageTransformParameterfvHP (GLenum target, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetImageTransformParameterfvHP (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetImageTransformParameterfvHP(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetImageTransformParameterfvHP")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetImageTransformParameterfvHP(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_HP_convolution_border_modes)
%GL_HP_convolution_border_modes = 1
#ENDIF

#IF NOT %DEF(%GL_SGIX_texture_add_env)
%GL_SGIX_texture_add_env = 1
#ENDIF


#IF NOT %DEF(%GL_EXT_color_subtable)
%GL_EXT_color_subtable = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glColorSubTableEXT (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
' ========================================================================================
DECLARE SUB Proto_glColorSubTableEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glColorSubTableEXT(dwtarget, istart, icount, dwformat, dwtype, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glColorSubTableEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glColorSubTableEXT(dwtarget, istart, icount, dwformat, dwtype, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCopyColorSubTableEXT (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
' ========================================================================================
DECLARE SUB Proto_glCopyColorSubTableEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glCopyColorSubTableEXT(dwtarget, istart, x, y, iwidth)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCopyColorSubTableEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCopyColorSubTableEXT(dwtarget, istart, x, y, iwidth)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_PGI_vertex_hints)
%GL_PGI_vertex_hints = 1
#ENDIF

#IF NOT %DEF(%GL_PGI_misc_hints)
%GL_PGI_misc_hints = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glHintPGI (GLenum target, GLint mode);
' ========================================================================================
DECLARE SUB Proto_glHintPGI (BYVAL DWORD, BYVAL LONG)
MACRO glHintPGI(dwtarget, dwmode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glHintPGI")
   IF pProc THEN CALL DWORD pProc USING Proto_glHintPGI(dwtarget, dwmode)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_paletted_texture)
%GL_EXT_paletted_texture = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' Define a color lookup table.
' void glColorTableEXT (GLenum target, GLenum internalFormat, GLsizei width, GLenum format,
' GLenum type, const GLvoid *table);
' ========================================================================================
DECLARE SUB Proto_glColorTableEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glColorTableEXT(dwtarget, internalformat, iwidth, dwformat, dwtype, ptable)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glColorTableEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glColorTableEXT(dwtarget, internalformat, iwidth, dwformat, dwtype, ptable)
END MACRO
' ========================================================================================

' ========================================================================================
' Get color table contents.
' void glGetColorTableEXT (GLenum target, GLenum format, GLenum type, GLvoid *data);
' ========================================================================================
DECLARE SUB Proto_glGetColorTableEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glGetColorTableEXT(dwtarget, dwformat, dwtype, ptable)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetColorTableEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetColorTableEXT(dwtarget, dwformat, dwtype, ptable)
END MACRO
' ========================================================================================

' ========================================================================================
' Get palette parameters from color tables.
' void glGetColorTableParameterivEXT (GLenum target, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetColorTableParameterivEXT (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetColorTableParameterivEXT(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetColorTableParameterivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetColorTableParameterivEXT(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetColorTableParameterfvEXT (GLenum target, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetColorTableParameterfvEXT (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetColorTableParameterfvEXT(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetColorTableParameterfvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetColorTableParameterfvEXT(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_clip_volume_hint)
%GL_EXT_clip_volume_hint = 1
#ENDIF


#IF NOT %DEF(%GL_SGIX_list_priority)
%GL_SGIX_list_priority = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glGetListParameterfvSGIX (GLuint list, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetListParameterfvSGIX (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetListParameterfvSGIX(dwlist, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetListParameterfvSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetListParameterfvSGIX(dwlist, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetListParameterivSGIX (GLuint list, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetListParameterivSGIX (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetListParameterivSGIX(dwlist, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetListParameterivSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetListParameterivSGIX(dwlist, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glListParameterfSGIX (GLuint list, GLenum pname, GLfloat param);
' ========================================================================================
DECLARE SUB Proto_glListParameterfSGIX (BYVAL DWORD, BYVAL DWORD, BYVAL SINGLE)
MACRO glListParameterfSGIX(dwlist, pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glListParameterfSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glListParameterfSGIX(dwlist, pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glListParameterfvSGIX (GLuint list, GLenum pname, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glListParameterfvSGIX (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glListParameterfvSGIX(dwlist, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glListParameterfvSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glListParameterfvSGIX(dwlist, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glListParameteriSGIX (GLuint list, GLenum pname, GLint param);
' ========================================================================================
DECLARE SUB Proto_glListParameteriSGIX (BYVAL DWORD, BYVAL DWORD, BYVAL LONG)
MACRO glListParameteriSGIX(dwlist, pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glListParameteriSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glListParameteriSGIX(dwlist, pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glListParameterivSGIX (GLuint list, GLenum pname, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glListParameterivSGIX (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glListParameterivSGIX(dwlist, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glListParameterivSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glListParameterivSGIX(dwlist, pname, pparams)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_SGIX_ir_instrument1)
%GL_SGIX_ir_instrument1 = 1
#ENDIF

#IF NOT %DEF(%GL_SGIX_calligraphic_fragment)
%GL_SGIX_calligraphic_fragment = 1
#ENDIF

#IF NOT %DEF(%GL_SGIX_texture_lod_bias)
%GL_SGIX_texture_lod_bias = 1
#ENDIF

#IF NOT %DEF(%GL_SGIX_shadow_ambient)
%GL_SGIX_shadow_ambient = 1
#ENDIF

#IF NOT %DEF(%GL_EXT_index_texture)
%GL_EXT_index_texture = 1
#ENDIF


#IF NOT %DEF(%GL_EXT_index_material)
%GL_EXT_index_material = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glIndexMaterialEXT (GLenum face, GLenum mode);
' ========================================================================================
DECLARE SUB Proto_glIndexMaterialEXT (BYVAL DWORD, BYVAL DWORD)
MACRO glIndexMaterialEXT(dwface, dwmode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glIndexMaterialEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glIndexMaterialEXT(dwface, dwmode)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_index_func)
%GL_EXT_index_func = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glIndexFuncEXT (GLenum func, GLclampf ref);
' ========================================================================================
DECLARE SUB Proto_glIndexFuncEXT (BYVAL DWORD, BYVAL SINGLE)
MACRO glIndexFuncEXT(dwfunc, fref)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glIndexFuncEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glIndexFuncEXT(dwfunc, fref)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_index_array_formats)
%GL_EXT_index_array_formats = 1
#ENDIF

#IF NOT %DEF(%GL_EXT_compiled_vertex_array)
%GL_EXT_compiled_vertex_array = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glLockArraysEXT (GLint first, GLsizei count);
' ========================================================================================
DECLARE SUB Proto_glLockArraysEXT (BYVAL LONG, BYVAL LONG)
MACRO glLockArraysEXT(ifirst, icount)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glLockArraysEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glLockArraysEXT(ifirst, icount)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUnlockArraysEXT (void);
' ========================================================================================
DECLARE SUB Proto_glUnlockArraysEXT
MACRO glUnlockArraysEXT
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUnlockArraysEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glUnlockArraysEXT
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_cull_vertex)
%GL_EXT_cull_vertex = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glCullParameterdvEXT (GLenum pname, GLdouble *params);
' ========================================================================================
DECLARE SUB Proto_glCullParameterdvEXT (BYVAL DWORD, BYREF DOUBLE)
MACRO glCullParameterdvEXT(pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCullParameterdvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCullParameterdvEXT(pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCullParameterfvEXT (GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glCullParameterfvEXT (BYVAL DWORD, BYREF SINGLE)
MACRO glCullParameterfvEXT(pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCullParameterfvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCullParameterfvEXT(pname, pparams)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_SGIX_ycrcb)
%GL_SGIX_ycrcb = 1
#ENDIF


#IF NOT %DEF(%GL_SGIX_fragment_lighting)
%GL_SGIX_fragment_lighting = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glFragmentColorMaterialSGIX (GLenum face, GLenum mode);
' ========================================================================================
DECLARE SUB Proto_glFragmentColorMaterialSGIX (BYVAL DWORD, BYVAL DWORD)
MACRO glFragmentColorMaterialSGIX(dwface, dwmode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFragmentColorMaterialSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glFragmentColorMaterialSGIX(dwface, dwmode)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFragmentLightfSGIX (GLenum light, GLenum pname, GLfloat param);
' ========================================================================================
DECLARE SUB Proto_glFragmentLightfSGIX (BYVAL DWORD, BYVAL DWORD, BYVAL SINGLE)
MACRO glFragmentLightfSGIX(dwlight, pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFragmentLightfSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glFragmentLightfSGIX(dwlight, pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFragmentLightfvSGIX (GLenum light, GLenum pname, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glFragmentLightfvSGIX (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glFragmentLightfvSGIX(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFragmentLightfvSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glFragmentLightfvSGIX(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFragmentLightiSGIX (GLenum light, GLenum pname, GLint param);
' ========================================================================================
DECLARE SUB Proto_glFragmentLightiSGIX (BYVAL DWORD, BYVAL DWORD, BYVAL LONG)
MACRO glFragmentLightiSGIX(dwlight, pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFragmentLightiSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glFragmentLightiSGIX(dwlight, pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFragmentLightivSGIX (GLenum light, GLenum pname, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glFragmentLightivSGIX (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glFragmentLightivSGIX(dwlight, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFragmentLightivSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glFragmentLightivSGIX(dwlight, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFragmentLightModelfSGIX (GLenum pname, GLfloat param);
' ========================================================================================
DECLARE SUB Proto_glFragmentLightModelfSGIX (BYVAL DWORD, BYVAL SINGLE)
MACRO glFragmentLightModelfSGIX(pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFragmentLightModelfSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glFragmentLightModelfSGIX(pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFragmentLightModelfvSGIX (GLenum pname, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glFragmentLightModelfvSGIX (BYVAL DWORD, BYREF SINGLE)
MACRO glFragmentLightModelfvSGIX(pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFragmentLightModelfvSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glFragmentLightModelfvSGIX(pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFragmentLightModeliSGIX (GLenum pname, GLint param);
' ========================================================================================
DECLARE SUB Proto_glFragmentLightModeliSGIX (BYVAL DWORD, BYVAL LONG)
MACRO glFragmentLightModeliSGIX(pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFragmentLightModeliSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glFragmentLightModeliSGIX(pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFragmentLightModelivSGIX (GLenum pname, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glFragmentLightModelivSGIX (BYVAL DWORD, BYREF LONG)
MACRO glFragmentLightModelivSGIX(pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFragmentLightModelivSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glFragmentLightModelivSGIX(pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFragmentMaterialfSGIX (GLenum face, GLenum pname, GLfloat param);
' ========================================================================================
DECLARE SUB Proto_glFragmentMaterialfSGIX (BYVAL DWORD, BYVAL DWORD, BYVAL SINGLE)
MACRO glFragmentMaterialfSGIX(dwface, pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFragmentMaterialfSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glFragmentMaterialfSGIX(dwface, pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFragmentMaterialfvSGIX (GLenum face, GLenum pname, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glFragmentMaterialfvSGIX (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glFragmentMaterialfvSGIX(dwface, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFragmentMaterialfvSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glFragmentMaterialfvSGIX(dwface, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFragmentMaterialiSGIX (GLenum face, GLenum pname, GLint param);
' ========================================================================================
DECLARE SUB Proto_glFragmentMaterialiSGIX (BYVAL DWORD, BYVAL DWORD, BYVAL LONG)
MACRO glFragmentMaterialiSGIX(dwface, pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFragmentMaterialiSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glFragmentMaterialiSGIX(dwface, pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFragmentMaterialivSGIX (GLenum face, GLenum pname, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glFragmentMaterialivSGIX (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glFragmentMaterialivSGIX(dwface, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFragmentMaterialivSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glFragmentMaterialivSGIX(dwface, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetFragmentLightfvSGIX (GLenum light, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetFragmentLightfvSGIX (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetFragmentLightfvSGIX(dwlight, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetFragmentLightfvSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetFragmentLightfvSGIX(dwlight, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetFragmentLightivSGIX (GLenum light, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetFragmentLightivSGIX (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetFragmentLightivSGIX(dwlight, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetFragmentLightivSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetFragmentLightivSGIX(dwlight, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetFragmentMaterialfvSGIX (GLenum face, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetFragmentMaterialfvSGIX (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetFragmentMaterialfvSGIX(dwface, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetFragmentMaterialfvSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetFragmentMaterialfvSGIX(dwface, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetFragmentMaterialivSGIX (GLenum face, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetFragmentMaterialivSGIX (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetFragmentMaterialivSGIX(dwface, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetFragmentMaterialivSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetFragmentMaterialivSGIX(dwface, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glLightEnviSGIX (GLenum pname, GLint param);
' ========================================================================================
DECLARE SUB Proto_glLightEnviSGIX (BYVAL DWORD, BYVAL LONG)
MACRO glLightEnviSGIX(pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glLightEnviSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glLightEnviSGIX(pname, param)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_IBM_rasterpos_clip)
%GL_IBM_rasterpos_clip = 1
#ENDIF

#IF NOT %DEF(%GL_HP_texture_lighting)
%GL_HP_texture_lighting = 1
#ENDIF


#IF NOT %DEF(%GL_EXT_draw_range_elements)
%GL_EXT_draw_range_elements = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glDrawRangeElementsEXT (GLenum mode, GLuint start, GLuint end, GLsizei count,
' GLenum type, const GLvoid *indices);
' ========================================================================================
DECLARE SUB Proto_glDrawRangeElementsEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYREF ANY)
MACRO glDrawRangeElementsEXT(dwmode, dwstart, dwend, icount, dwtype, pindices)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDrawRangeElementsEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glDrawRangeElementsEXT(dwmode, dwstart, dwend, icount, dwtype, pindices)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_WIN_phong_shading)
%GL_WIN_phong_shading = 1
#ENDIF

#IF NOT %DEF(%GL_WIN_specular_fog)
%GL_WIN_specular_fog = 1
#ENDIF


#IF NOT %DEF(%GL_EXT_light_texture)
%GL_EXT_light_texture = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glApplyTextureEXT (GLenum mode);
' ========================================================================================
DECLARE SUB Proto_glApplyTextureEXT (BYVAL DWORD)
MACRO glApplyTextureEXT(dwmode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glApplyTextureEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glApplyTextureEXT(dwmode)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTextureLightEXT (GLenum pname);
' ========================================================================================
DECLARE SUB Proto_glTextureLightEXT (BYVAL DWORD)
MACRO glTextureLightEXT(pname)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTextureLightEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTextureLightEXT(pname)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTextureMaterialEXT (GLenum face, GLenum mode);
' ========================================================================================
DECLARE SUB Proto_glTextureMaterialEXT (BYVAL DWORD, BYVAL DWORD)
MACRO glTextureMaterialEXT(dwface, dwmode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTextureMaterialEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTextureMaterialEXT(dwface, dwmode)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_SGIX_blend_alpha_minmax)
%GL_SGIX_blend_alpha_minmax = 1
#ENDIF

#IF NOT %DEF(%GL_EXT_bgra)
%GL_EXT_bgra = 1
#ENDIF


#IF NOT %DEF(%GL_SGIX_async)
%GL_SGIX_async = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glAsyncMarkerSGIX (GLuint marker);
' ========================================================================================
DECLARE SUB Proto_glAsyncMarkerSGIX (BYVAL DWORD)
MACRO glAsyncMarkerSGIX(dwmarker)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glAsyncMarkerSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glAsyncMarkerSGIX(dwmarker)
END MACRO
' ========================================================================================

' ========================================================================================
' GLint glFinishAsyncSGIX (GLuint *markerp);
' ========================================================================================
DECLARE FUNCTION Proto_glFinishAsyncSGIX (BYREF DWORD) AS LONG
MACRO FUNCTION glFinishAsyncSGIX(markerp)
   MACROTEMP pProc, lRes
   LOCAL pProc AS DWORD, lRes AS LONG
   pProc = wglGetProcAddress("glFinishAsyncSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glFinishAsyncSGIX(markerp) TO lRes
END MACRO = lRes
' ========================================================================================

' ========================================================================================
' GLint glPollAsyncSGIX (GLuint *markerp);
' ========================================================================================
DECLARE FUNCTION Proto_glPollAsyncSGIX (BYREF DWORD) AS LONG
MACRO FUNCTION glPollAsyncSGIX(markerp)
   MACROTEMP pProc, lRes
   LOCAL pProc AS DWORD, lRes AS LONG
   pProc = wglGetProcAddress("glPollAsyncSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glPollAsyncSGIX(markerp) TO lRes
END MACRO = lRes
' ========================================================================================

' ========================================================================================
' GLuint glGenAsyncMarkersSGIX (GLsizei range);
' ========================================================================================
DECLARE FUNCTION Proto_glGenAsyncMarkersSGIX (BYVAL LONG) AS DWORD
MACRO FUNCTION glGenAsyncMarkersSGIX(irange)
   MACROTEMP pProc, dwRes
   LOCAL pProc AS DWORD, dwRes AS DWORD
   pProc = wglGetProcAddress("glGenAsyncMarkersSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glGenAsyncMarkersSGIX(irange) TO dwRes
END MACRO = dwRes
' ========================================================================================

' ========================================================================================
' void glDeleteAsyncMarkersSGIX (GLuint marker, GLsizei range);
' ========================================================================================
DECLARE SUB Proto_glDeleteAsyncMarkersSGIX (BYVAL DWORD, BYVAL LONG)
MACRO glDeleteAsyncMarkersSGIX(dwmarker, irange)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDeleteAsyncMarkersSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glDeleteAsyncMarkersSGIX(dwmarker, irange)
END MACRO
' ========================================================================================

' ========================================================================================
' GLboolean glIsAsyncMarkerSGIX (GLuint marker);
' ========================================================================================
DECLARE FUNCTION Proto_glIsAsyncMarkerSGIX (BYVAL DWORD) AS BYTE
MACRO FUNCTION glIsAsyncMarkerSGIX(dwmarker)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glIsAsyncMarkerSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glIsAsyncMarkerSGIX(dwmarker) TO bRes
END MACRO = bRes
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_SGIX_async_pixel)
%GL_SGIX_async_pixel = 1
#ENDIF

#IF NOT %DEF(%GL_SGIX_async_histogram)
%GL_SGIX_async_histogram = 1
#ENDIF


#IF NOT %DEF(%GL_INTEL_parallel_arrays)
%GL_INTEL_parallel_arrays = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glVertexPointervINTEL (GLint size, GLenum type, const GLvoid* *pointer);
' ========================================================================================
DECLARE SUB Proto_glVertexPointervINTEL (BYVAL LONG, BYVAL DWORD, BYREF ANY)
MACRO glVertexPointervINTEL(isize, dwtype, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexPointervINTEL")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexPointervINTEL(isize, dwtype, ppointer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNormalPointervINTEL (GLenum type, const GLvoid* *pointer);
' ========================================================================================
DECLARE SUB Proto_glNormalPointervINTEL (BYVAL DWORD, BYREF ANY)
MACRO glNormalPointervINTEL(dwtype, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNormalPointervINTEL")
   IF pProc THEN CALL DWORD pProc USING Proto_glNormalPointervINTEL(dwtype, ppointer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glColorPointervINTEL (GLint size, GLenum type, const GLvoid* *pointer);
' ========================================================================================
DECLARE SUB Proto_glColorPointervINTEL (BYVAL LONG, BYVAL DWORD, BYREF ANY)
MACRO glColorPointervINTEL(isize, dwtype, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glColorPointervINTEL")
   IF pProc THEN CALL DWORD pProc USING Proto_glColorPointervINTEL(isize, dwtype, ppointer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexCoordPointervINTEL (GLint size, GLenum type, const GLvoid* *pointer);
' ========================================================================================
DECLARE SUB Proto_glTexCoordPointervINTEL (BYVAL LONG, BYVAL DWORD, BYREF ANY)
MACRO glTexCoordPointervINTEL(isize, dwtype, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexCoordPointervINTEL")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexCoordPointervINTEL(isize, dwtype, ppointer)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_HP_occlusion_test)
%GL_HP_occlusion_test = 1
#ENDIF

#IF NOT %DEF(%GL_EXT_pixel_transform)
%GL_EXT_pixel_transform = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glPixelTransformParameteriEXT (GLenum target, GLenum pname, GLint param);
' ========================================================================================
DECLARE SUB Proto_glPixelTransformParameteriEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG)
MACRO glPixelTransformParameteriEXT(dwtarget, pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPixelTransformParameteriEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glPixelTransformParameteriEXT(dwtarget, pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glPixelTransformParameterfEXT (GLenum target, GLenum pname, GLfloat param);
' ========================================================================================
DECLARE SUB Proto_glPixelTransformParameterfEXT (BYVAL DWORD, BYVAL DWORD, BYVAL SINGLE)
MACRO glPixelTransformParameterfEXT(dwtarget, pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPixelTransformParameterfEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glPixelTransformParameterfEXT(dwtarget, pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glPixelTransformParameterivEXT (GLenum target, GLenum pname, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glPixelTransformParameterivEXT (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glPixelTransformParameterivEXT(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPixelTransformParameterivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glPixelTransformParameterivEXT(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glPixelTransformParameterfvEXT (GLenum target, GLenum pname, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glPixelTransformParameterfvEXT (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glPixelTransformParameterfvEXT(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPixelTransformParameterfvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glPixelTransformParameterfvEXT(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_pixel_transform_color_table)
%GL_EXT_pixel_transform_color_table = 1
#ENDIF

#IF NOT %DEF(%GL_EXT_shared_texture_palette)
%GL_EXT_shared_texture_palette = 1
#ENDIF

#IF NOT %DEF(%GL_EXT_separate_specular_color)
%GL_EXT_separate_specular_color = 1
#ENDIF


#IF NOT %DEF(%GL_EXT_secondary_color)
%GL_EXT_secondary_color = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glSecondaryColor3bEXT (GLbyte red, GLbyte green, GLbyte blue);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3bEXT (BYVAL BYTE, BYVAL BYTE, BYVAL BYTE)
MACRO glSecondaryColor3bEXT(red, green, blue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3bEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3bEXT(red, green, blue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSecondaryColor3bvEXT (const GLbyte *v);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3bvEXT (BYREF BYTE)
MACRO glSecondaryColor3bvEXT(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3bvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3bvEXT(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSecondaryColor3dEXT (GLdouble red, GLdouble green, GLdouble blue);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3dEXT (BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glSecondaryColor3dEXT(red, green, blue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3dEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3dEXT(red, green, blue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSecondaryColor3dvEXT (const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3dvEXT (BYREF DOUBLE)
MACRO glSecondaryColor3dvEXT(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3dvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3dvEXT(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSecondaryColor3fEXT (GLfloat red, GLfloat green, GLfloat blue);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3fEXT (BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glSecondaryColor3fEXT(red, green, blue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3fEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3fEXT(red, green, blue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSecondaryColor3fvEXT (const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3fvEXT (BYREF SINGLE)
MACRO glSecondaryColor3fvEXT(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3fvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3fvEXT(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSecondaryColor3iEXT (GLint red, GLint green, GLint blue);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3iEXT (BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glSecondaryColor3iEXT(red, green, blue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3iEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3iEXT(red, green, blue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSecondaryColor3ivEXT (const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3ivEXT (BYREF LONG)
MACRO glSecondaryColor3ivEXT(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3ivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3ivEXT(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSecondaryColor3sEXT (GLshort red, GLshort green, GLshort blue);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3sEXT (BYVAL INTEGER, BYVAL INTEGER, BYVAL INTEGER)
MACRO glSecondaryColor3sEXT(red, green, blue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3sEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3sEXT(red, green, blue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSecondaryColor3svEXT (const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3svEXT (BYREF INTEGER)
MACRO glSecondaryColor3svEXT(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3svEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3svEXT(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSecondaryColor3ubEXT (GLubyte red, GLubyte green, GLubyte blue);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3ubEXT (BYVAL BYTE, BYVAL BYTE, BYVAL BYTE)
MACRO glSecondaryColor3ubEXT(red, green, blue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3ubEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3ubEXT(red, green, blue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSecondaryColor3ubvEXT (const GLubyte *v);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3ubvEXT (BYREF BYTE)
MACRO glSecondaryColor3ubvEXT(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3ubvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3ubvEXT(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSecondaryColor3uiEXT (GLuint red, GLuint green, GLuint blue);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3uiEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glSecondaryColor3uiEXT(red, green, blue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3uiEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3uiEXT(red, green, blue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSecondaryColor3uivEXT (const GLuint *v);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3uivEXT (BYREF DWORD)
MACRO glSecondaryColor3uivEXT(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3uivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3uivEXT(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSecondaryColor3usEXT (GLushort red, GLushort green, GLushort blue);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3usEXT (BYVAL WORD, BYVAL WORD, BYVAL WORD)
MACRO glSecondaryColor3usEXT(red, green, blue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3usEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3usEXT(red, green, blue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSecondaryColor3usvEXT (const GLushort *v);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3usvEXT (BYREF WORD)
MACRO glSecondaryColor3usvEXT(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3usvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3usvEXT(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSecondaryColorPointerEXT (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColorPointerEXT (BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glSecondaryColorPointerEXT(isize, dwtype, istride, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColorPointerEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColorPointerEXT(isize, dwtype, istride, ppointer)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_texture_perturb_normal)
%GL_EXT_texture_perturb_normal = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glTextureNormalEXT (GLenum mode);
' ========================================================================================
DECLARE SUB Proto_glTextureNormalEXT (BYVAL DWORD)
MACRO glTextureNormalEXT(dwmode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTextureNormalEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTextureNormalEXT(dwmode)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF

#IF NOT %DEF(%GL_EXT_multi_draw_arrays)
%GL_EXT_multi_draw_arrays = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glMultiDrawArraysEXT (GLenum mode, GLint *first, GLsizei *count, GLsizei primcount);
' ========================================================================================
DECLARE SUB Proto_glMultiDrawArraysEXT (BYVAL DWORD, BYREF LONG, BYREF LONG, BYVAL LONG)
MACRO glMultiDrawArraysEXT(dwmode, ifirst, icount, iprimcount)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiDrawArraysEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiDrawArraysEXT(dwmode, ifirst, icount, iprimcount)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiDrawElementsEXT (GLenum mode, const GLsizei *count, GLenum type,
' const GLvoid* *indices, GLsizei primcount);
' ========================================================================================
DECLARE SUB Proto_glMultiDrawElementsEXT (BYVAL DWORD, BYREF LONG, BYVAL DWORD, BYREF ANY, BYVAL LONG)
MACRO glMultiDrawElementsEXT(dwmode, icount, dwtype, pindices, iprimcount)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiDrawElementsEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiDrawElementsEXT(dwmode, icount, dwtype, pindices, iprimcount)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF

#IF NOT %DEF(%GL_EXT_fog_coord)
%GL_EXT_fog_coord = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glFogCoordfEXT (GLfloat coord);
' ========================================================================================
DECLARE SUB Proto_glFogCoordfEXT (BYVAL SINGLE)
MACRO glFogCoordfEXT(coord)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFogCoordfEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glFogCoordfEXT(coord)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFogCoordfvEXT (const GLfloat *coord);
' ========================================================================================
DECLARE SUB Proto_glFogCoordfvEXT (BYREF SINGLE)
MACRO glFogCoordfvEXT(coord)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFogCoordfvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glFogCoordfvEXT(coord)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFogCoorddEXT (GLdouble coord);
' ========================================================================================
DECLARE SUB Proto_glFogCoorddEXT (BYVAL DOUBLE)
MACRO glFogCoorddEXT(coord)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFogCoorddEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glFogCoorddEXT(coord)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFogCoorddvEXT (const GLdouble *coord);
' ========================================================================================
DECLARE SUB Proto_glFogCoorddvEXT (BYREF DOUBLE)
MACRO glFogCoorddvEXT(coord)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFogCoorddvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glFogCoorddvEXT(coord)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFogCoordPointerEXT (GLenum type, GLsizei stride, const GLvoid *pointer);
' ========================================================================================
DECLARE SUB Proto_glFogCoordPointerEXT (BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glFogCoordPointerEXT(dwtype, istride, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFogCoordPointerEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glFogCoordPointerEXT(dwtype, istride, ppointer)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_REND_screen_coordinates)
%GL_REND_screen_coordinates = 1
#ENDIF


#IF NOT %DEF(%GL_EXT_coordinate_frame)
%GL_EXT_coordinate_frame = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glTangent3bEXT (GLbyte tx, GLbyte ty, GLbyte tz);
' ========================================================================================
DECLARE SUB Proto_glTangent3bEXT (BYVAL BYTE, BYVAL BYTE, BYVAL BYTE)
MACRO glTangent3bEXT(tx, ty, tz)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTangent3bEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTangent3bEXT(tx, ty, tz)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTangent3bvEXT (const GLbyte *v);
' ========================================================================================
DECLARE SUB Proto_glTangent3bvEXT (BYREF BYTE)
MACRO glTangent3bvEXT(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTangent3bvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTangent3bvEXT(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTangent3dEXT (GLdouble tx, GLdouble ty, GLdouble tz);
' ========================================================================================
DECLARE SUB Proto_glTangent3dEXT (BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glTangent3dEXT(tx, ty, tz)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTangent3dEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTangent3dEXT(tx, ty, tz)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTangent3dvEXT (const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glTangent3dvEXT (BYREF DOUBLE)
MACRO glTangent3dvEXT(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTangent3dvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTangent3dvEXT(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTangent3fEXT (GLfloat tx, GLfloat ty, GLfloat tz);
' ========================================================================================
DECLARE SUB Proto_glTangent3fEXT (BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glTangent3fEXT(tx, ty, tz)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTangent3fEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTangent3fEXT(tx, ty, tz)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTangent3fvEXT (const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glTangent3fvEXT (BYREF SINGLE)
MACRO glTangent3fvEXT(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTangent3fvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTangent3fvEXT(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTangent3iEXT (GLint tx, GLint ty, GLint tz);
' ========================================================================================
DECLARE SUB Proto_glTangent3iEXT (BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glTangent3iEXT(tx, ty, tz)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTangent3iEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTangent3iEXT(tx, ty, tz)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTangent3ivEXT (const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glTangent3ivEXT (BYREF LONG)
MACRO glTangent3ivEXT(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTangent3ivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTangent3ivEXT(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTangent3sEXT (GLshort tx, GLshort ty, GLshort tz);
' ========================================================================================
DECLARE SUB Proto_glTangent3sEXT (BYVAL INTEGER, BYVAL INTEGER, BYVAL INTEGER)
MACRO glTangent3sEXT(tx, ty, tz)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTangent3sEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTangent3sEXT(tx, ty, tz)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTangent3svEXT (const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glTangent3svEXT (BYREF INTEGER)
MACRO glTangent3svEXT(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTangent3svEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTangent3svEXT(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glBinormal3bEXT (GLbyte bx, GLbyte by, GLbyte bz);
' ========================================================================================
DECLARE SUB Proto_glBinormal3bEXT (BYVAL BYTE, BYVAL BYTE, BYVAL BYTE)
MACRO glBinormal3bEXT(bx, by, bz)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBinormal3bEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBinormal3bEXT(bx, by, bz)
END MACRO
' ========================================================================================

' ========================================================================================
' void glBinormal3bvEXT (const GLbyte *v);
' ========================================================================================
DECLARE SUB Proto_glBinormal3bvEXT (BYREF BYTE)
MACRO glBinormal3bvEXT(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBinormal3bvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBinormal3bvEXT(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glBinormal3dEXT (GLdouble bx, GLdouble by, GLdouble bz);
' ========================================================================================
DECLARE SUB Proto_glBinormal3dEXT (BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glBinormal3dEXT(bx, by, bz)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBinormal3dEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBinormal3dEXT(bx, by, bz)
END MACRO
' ========================================================================================

' ========================================================================================
' void glBinormal3dvEXT (const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glBinormal3dvEXT (BYREF DOUBLE)
MACRO glBinormal3dvEXT(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBinormal3dvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBinormal3dvEXT(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glBinormal3fEXT (GLfloat bx, GLfloat by, GLfloat bz);
' ========================================================================================
DECLARE SUB Proto_glBinormal3fEXT (BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glBinormal3fEXT(bx, by, bz)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBinormal3fEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBinormal3fEXT(bx, by, bz)
END MACRO
' ========================================================================================

' ========================================================================================
' void glBinormal3fvEXT (const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glBinormal3fvEXT (BYREF SINGLE)
MACRO glBinormal3fvEXT(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBinormal3fvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBinormal3dvEXT(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glBinormal3iEXT (GLint bx, GLint by, GLint bz);
' ========================================================================================
DECLARE SUB Proto_glBinormal3iEXT (BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glBinormal3iEXT(bx, by, bz)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBinormal3iEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBinormal3iEXT(bx, by, bz)
END MACRO
' ========================================================================================

' ========================================================================================
' void glBinormal3ivEXT (const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glBinormal3ivEXT (BYREF LONG)
MACRO glBinormal3ivEXT(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBinormal3ivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBinormal3ivEXT(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glBinormal3sEXT (GLshort bx, GLshort by, GLshort bz);
' ========================================================================================
DECLARE SUB Proto_glBinormal3sEXT (BYVAL INTEGER, BYVAL INTEGER, BYVAL INTEGER)
MACRO glBinormal3sEXT(bx, by, bz)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBinormal3sEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBinormal3sEXT(bx, by, bz)
END MACRO
' ========================================================================================

' ========================================================================================
' void glBinormal3svEXT (const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glBinormal3svEXT (BYREF INTEGER)
MACRO glBinormal3svEXT(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBinormal3svEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBinormal3svEXT(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTangentPointerEXT (GLenum type, GLsizei stride, const GLvoid *pointer);
' ========================================================================================
DECLARE SUB Proto_glTangentPointerEXT (BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glTangentPointerEXT(dwtype, istride, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTangentPointerEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTangentPointerEXT(dwtype, istride, ppointer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glBinormalPointerEXT (GLenum type, GLsizei stride, const GLvoid *pointer);
' ========================================================================================
DECLARE SUB Proto_glBinormalPointerEXT (BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glBinormalPointerEXT(dwtype, istride, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBinormalPointerEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBinormalPointerEXT(dwtype, istride, ppointer)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_texture_env_combine)
%GL_EXT_texture_env_combine = 1
#ENDIF

#IF NOT %DEF(%GL_APPLE_specular_vector)
%GL_APPLE_specular_vector = 1
#ENDIF

#IF NOT %DEF(%GL_APPLE_transform_hint)
%GL_APPLE_transform_hint = 1
#ENDIF

#IF NOT %DEF(%GL_SGIX_fog_scale)
%GL_SGIX_fog_scale = 1
#ENDIF


#IF NOT %DEF(%GL_SUNX_constant_data)
%GL_SUNX_constant_data = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glFinishTextureSUNX (void);
' ========================================================================================
DECLARE SUB Proto_glFinishTextureSUNX
MACRO glFinishTextureSUNX
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFinishTextureSUNX")
   IF pProc THEN CALL DWORD pProc USING Proto_glFinishTextureSUNX
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF

#IF NOT %DEF(%GL_SUN_global_alpha)
%GL_SUN_global_alpha = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glGlobalAlphaFactorbSUN (GLbyte factor);
' ========================================================================================
DECLARE SUB Proto_glGlobalAlphaFactorbSUN (BYVAL BYTE)
MACRO glGlobalAlphaFactorbSUN(bfactor)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGlobalAlphaFactorbSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glGlobalAlphaFactorbSUN(bfactor)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGlobalAlphaFactorsSUN (GLshort factor);
' ========================================================================================
DECLARE SUB Proto_glGlobalAlphaFactorsSUN (BYVAL INTEGER)
MACRO glGlobalAlphaFactorsSUN(sfactor)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGlobalAlphaFactorsSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glGlobalAlphaFactorsSUN(sfactor)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGlobalAlphaFactoriSUN (GLint factor);
' ========================================================================================
DECLARE SUB Proto_glGlobalAlphaFactoriSUN (BYVAL LONG)
MACRO glGlobalAlphaFactoriSUN(ifactor)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGlobalAlphaFactoriSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glGlobalAlphaFactoriSUN(ifactor)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGlobalAlphaFactorfSUN (GLfloat factor);
' ========================================================================================
DECLARE SUB Proto_glGlobalAlphaFactorfSUN (BYVAL SINGLE)
MACRO glGlobalAlphaFactorfSUN(ffactor)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGlobalAlphaFactorfSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glGlobalAlphaFactorfSUN(ffactor)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGlobalAlphaFactordSUN (GLdouble factor);
' ========================================================================================
DECLARE SUB Proto_glGlobalAlphaFactordSUN (BYVAL DOUBLE)
MACRO glGlobalAlphaFactordSUN(dfactor)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGlobalAlphaFactordSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glGlobalAlphaFactordSUN(dfactor)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGlobalAlphaFactorubSUN (GLubyte factor);
' ========================================================================================
DECLARE SUB Proto_glGlobalAlphaFactorubSUN (BYVAL BYTE)
MACRO glGlobalAlphaFactorubSUN(ubfactor)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGlobalAlphaFactorubSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glGlobalAlphaFactorubSUN(ubfactor)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGlobalAlphaFactorusSUN (GLushort factor);
' ========================================================================================
DECLARE SUB Proto_glGlobalAlphaFactorusSUN (BYVAL WORD)
MACRO glGlobalAlphaFactorusSUN(usfactor)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGlobalAlphaFactorusSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glGlobalAlphaFactorubSUN(usfactor)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGlobalAlphaFactoruiSUN (GLuint factor);
' ========================================================================================
DECLARE SUB Proto_glGlobalAlphaFactoruiSUN (BYVAL DWORD)
MACRO glGlobalAlphaFactoruiSUN(uifactor)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGlobalAlphaFactoruiSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glGlobalAlphaFactoruiSUN(uifactor)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_SUN_triangle_list)
%GL_SUN_triangle_list = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glReplacementCodeuiSUN (GLuint code);
' ========================================================================================
DECLARE SUB Proto_glReplacementCodeuiSUN (BYVAL DWORD)
MACRO glReplacementCodeuiSUN(uicode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glReplacementCodeuiSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glReplacementCodeuiSUN(uicode)
END MACRO
' ========================================================================================

' ========================================================================================
' void glReplacementCodeusSUN (GLushort code);
' ========================================================================================
DECLARE SUB Proto_glReplacementCodeusSUN (BYVAL WORD)
MACRO glReplacementCodeusSUN(uscode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glReplacementCodeusSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glReplacementCodeusSUN(uscode)
END MACRO
' ========================================================================================

' ========================================================================================
' void glReplacementCodeubSUN (GLubyte code);
' ========================================================================================
DECLARE SUB Proto_glReplacementCodeubSUN (BYVAL BYTE)
MACRO glReplacementCodeubSUN(ubcode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glReplacementCodeubSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glReplacementCodeubSUN(ubcode)
END MACRO
' ========================================================================================

' ========================================================================================
' void glReplacementCodeuivSUN (const GLuint *code);
' ========================================================================================
DECLARE SUB Proto_glReplacementCodeuivSUN (BYREF DWORD)
MACRO glReplacementCodeuivSUN(uicode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glReplacementCodeuivSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glReplacementCodeuivSUN(uicode)
END MACRO
' ========================================================================================

' ========================================================================================
' void glReplacementCodeusvSUN (const GLushort *code);
' ========================================================================================
DECLARE SUB Proto_glReplacementCodeusvSUN (BYREF WORD)
MACRO glReplacementCodeusvSUN(uscode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glReplacementCodeusvSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glReplacementCodeusvSUN(uscode)
END MACRO
' ========================================================================================

' ========================================================================================
' void glReplacementCodeubvSUN (const GLubyte *code);
' ========================================================================================
DECLARE SUB Proto_glReplacementCodeubvSUN (BYREF BYTE)
MACRO glReplacementCodeubvSUN(ubcode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glReplacementCodeubvSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glReplacementCodeubvSUN(ubcode)
END MACRO
' ========================================================================================

' ========================================================================================
' void glReplacementCodePointerSUN (GLenum type, GLsizei stride, const GLvoid* *pointer);
' ========================================================================================
DECLARE SUB Proto_glReplacementCodePointerSUN (BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glReplacementCodePointerSUN(dwtype, istride, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glReplacementCodePointerSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glReplacementCodePointerSUN(dwtype, istride, ppointer)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_SUN_vertex)
%GL_SUN_vertex = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glColor4ubVertex2fSUN (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
' ========================================================================================
DECLARE SUB Proto_glColor4ubVertex2fSUN (BYVAL BYTE, BYVAL BYTE, BYVAL BYTE, BYVAL BYTE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glColor4ubVertex2fSUN(r, g, b, a, x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glColor4ubVertex2fSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glColor4ubVertex2fSUN(r, g, b, a, x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' void glColor4ubVertex2fvSUN (const GLubyte *c, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glColor4ubVertex2fvSUN (BYREF BYTE, BYREF SINGLE)
MACRO glColor4ubVertex2fvSUN(c, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glColor4ubVertex2fvSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glColor4ubVertex2fvSUN(c, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glColor4ubVertex3fSUN (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
' ========================================================================================
DECLARE SUB Proto_glColor4ubVertex3fSUN (BYVAL BYTE, BYVAL BYTE, BYVAL BYTE, BYVAL BYTE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glColor4ubVertex3fSUN(r, g, b, a, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glColor4ubVertex3fSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glColor4ubVertex3fSUN(r, g, b, a, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' GLAPI void APIENTRY glColor4ubVertex3fvSUN (const GLubyte *, const GLfloat *);
' typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX3FVSUNPROC) (const GLubyte *c, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glColor4ubVertex3fvSUN (BYREF BYTE, BYREF SINGLE)
MACRO glColor4ubVertex3fvSUN(c, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glColor4ubVertex3fvSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glColor4ubVertex3fvSUN(c, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glColor3fVertex3fSUN (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
' ========================================================================================
DECLARE SUB Proto_glColor3fVertex3fSUN (BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glColor3fVertex3fSUN(r, g, b, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glColor3fVertex3fSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glColor3fVertex3fSUN(r, g, b, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glColor3fVertex3fvSUN (const GLfloat *c, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glColor3fVertex3fvSUN (BYREF SINGLE, BYREF SINGLE)
MACRO glColor3fVertex3fvSUN(c, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glColor3fVertex3fvSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glColor3fVertex3fvSUN(c, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNormal3fVertex3fSUN (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
' ========================================================================================
DECLARE SUB Proto_glNormal3fVertex3fSUN (BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glNormal3fVertex3fSUN(nx, ny, nz, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNormal3fVertex3fSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glNormal3fVertex3fSUN(nx, ny, nz, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNormal3fVertex3fvSUN (const GLfloat *n, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glNormal3fVertex3fvSUN (BYREF SINGLE, BYREF SINGLE)
MACRO glNormal3fVertex3fvSUN(c, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNormal3fVertex3fvSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glNormal3fVertex3fvSUN(c, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glColor4fNormal3fVertex3fSUN (GLfloat r, GLfloat g, GLfloat b, GLfloat a,
' GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
' ========================================================================================
DECLARE SUB Proto_glColor4fNormal3fVertex3fSUN (BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glColor4fNormal3fVertex3fSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glColor4fNormal3fVertex3fvSUN (const GLfloat *c, const GLfloat *n, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glColor4fNormal3fVertex3fvSUN (BYREF SINGLE, BYREF SINGLE, BYREF SINGLE)
MACRO glColor4fNormal3fVertex3fvSUN(c, n, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glColor4fNormal3fVertex3fvSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glColor4fNormal3fVertex3fvSUN(c, n, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexCoord2fVertex3fSUN (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
' ========================================================================================
DECLARE SUB Proto_glTexCoord2fVertex3fSUN (BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glTexCoord2fVertex3fSUN(s, t, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexCoord2fVertex3fSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexCoord2fVertex3fSUN(s, t, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexCoord2fVertex3fvSUN (const GLfloat *tc, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glTexCoord2fVertex3fvSUN (BYREF SINGLE, BYREF SINGLE)
MACRO glTexCoord2fVertex3fvSUN(tc, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexCoord2fVertex3fvSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexCoord2fVertex3fvSUN(tc, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexCoord4fVertex4fSUN (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x,
' GLfloat y, GLfloat z, GLfloat w);
' ========================================================================================
DECLARE SUB Proto_glTexCoord4fVertex4fSUN (BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexCoord4fVertex4fSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexCoord4fVertex4fvSUN (const GLfloat *tc, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glTexCoord4fVertex4fvSUN (BYREF SINGLE, BYREF SINGLE)
MACRO glTexCoord4fVertex4fvSUN(tc, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexCoord4fVertex4fvSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexCoord4fVertex4fvSUN(tc, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexCoord2fColor4ubVertex3fSUN (GLfloat s, GLfloat t, GLubyte r, GLubyte g,
' GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
' ========================================================================================
DECLARE SUB Proto_glTexCoord2fColor4ubVertex3fSUN (BYVAL SINGLE, BYVAL SINGLE, BYVAL BYTE, BYVAL BYTE, BYVAL BYTE, BYVAL BYTE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexCoord2fColor4ubVertex3fSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexCoord2fColor4ubVertex3fvSUN (const GLfloat *tc, const GLubyte *c, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glTexCoord2fColor4ubVertex3fvSUN (BYREF SINGLE, BYREF BYTE, BYREF SINGLE)
MACRO glTexCoord2fColor4ubVertex3fvSUN(tc, c, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexCoord2fColor4ubVertex3fvSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexCoord2fColor4ubVertex3fvSUN(tc, c, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexCoord2fColor3fVertex3fSUN (GLfloat s, GLfloat t, GLfloat r, GLfloat g,
' GLfloat b, GLfloat x, GLfloat y, GLfloat z);
' ========================================================================================
DECLARE SUB Proto_glTexCoord2fColor3fVertex3fSUN (BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glTexCoord2fColor3fVertex3fSUN(s, t, p, q, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexCoord2fColor3fVertex3fSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexCoord2fColor3fVertex3fSUN(s, t, p, q, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexCoord2fColor3fVertex3fvSUN (const GLfloat *tc, const GLfloat *c, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glTexCoord2fColor3fVertex3fvSUN (BYREF SINGLE, BYREF SINGLE, BYREF SINGLE)
MACRO glTexCoord2fColor3fVertex3fvSUN(tc, c, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexCoord2fColor3fVertex3fvSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexCoord2fColor3fVertex3fvSUN(tc, c, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexCoord2fNormal3fVertex3fSUN (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny,
' GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
' ========================================================================================
DECLARE SUB Proto_glTexCoord2fNormal3fVertex3fSUN (BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexCoord2fNormal3fVertex3fSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexCoord2fNormal3fVertex3fvSUN (const GLfloat *tc, const GLfloat *n, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glTexCoord2fNormal3fVertex3fvSUN (BYREF SINGLE, BYREF SINGLE, BYREF SINGLE)
MACRO glTexCoord2fNormal3fVertex3fvSUN(c, n, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexCoord2fNormal3fVertex3fvSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexCoord2fNormal3fVertex3fvSUN(c, n, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexCoord2fColor4fNormal3fVertex3fSUN (GLfloat s, GLfloat t, GLfloat r, GLfloat g,
' GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
' ========================================================================================
DECLARE SUB Proto_glTexCoord2fColor4fNormal3fVertex3fSUN (BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexCoord2fColor4fNormal3fVertex3fSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexCoord2fColor4fNormal3fVertex3fvSUN (const GLfloat *tc, const GLfloat *c,
' const GLfloat *n, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glTexCoord2fColor4fNormal3fVertex3fvSUN (BYREF SINGLE, BYREF SINGLE, BYREF SINGLE, BYREF SINGLE)
MACRO glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexCoord2fColor4fNormal3fVertex3fvSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexCoord4fColor4fNormal3fVertex4fSUN (GLfloat s, GLfloat t, GLfloat p, GLfloat q,
' GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz,
' GLfloat x, GLfloat y, GLfloat z, GLfloat w);
' ========================================================================================
DECLARE SUB Proto_glTexCoord4fColor4fNormal3fVertex4fSUN (BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, _
BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexCoord4fColor4fNormal3fVertex4fSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexCoord4fColor4fNormal3fVertex4fvSUN (const GLfloat *tc, const GLfloat *c,
' const GLfloat *n, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glTexCoord4fColor4fNormal3fVertex4fvSUN (BYREF SINGLE, BYREF SINGLE, BYREF SINGLE, BYREF SINGLE)
MACRO glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexCoord4fColor4fNormal3fVertex4fvSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glReplacementCodeuiVertex3fSUN (GLuint rc, GLfloat x, GLfloat y, GLfloat z);
' ========================================================================================
DECLARE SUB Proto_glReplacementCodeuiVertex3fSUN (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glReplacementCodeuiVertex3fSUN(dwtarget, s, t, r)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glReplacementCodeuiVertex3fSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glReplacementCodeuiVertex3fSUN(dwtarget, s, t, r)
END MACRO
' ========================================================================================

' ========================================================================================
' void glReplacementCodeuiVertex3fvSUN (const GLuint *rc, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glReplacementCodeuiVertex3fvSUN (BYREF DWORD, BYREF SINGLE)
MACRO glReplacementCodeuiVertex3fvSUN(rc, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glReplacementCodeuiVertex3fvSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glReplacementCodeuiVertex3fvSUN(rc, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glReplacementCodeuiColor4ubVertex3fSUN (GLuint rc, GLubyte r, GLubyte g, GLubyte b,
' GLubyte a, GLfloat x, GLfloat y, GLfloat z);
' ========================================================================================
DECLARE SUB Proto_glReplacementCodeuiColor4ubVertex3fSUN (BYVAL DWORD, BYVAL BYTE, BYVAL BYTE, BYVAL BYTE, BYVAL BYTE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glReplacementCodeuiColor4ubVertex3fSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glReplacementCodeuiColor4ubVertex3fvSUN (const GLuint *rc, const GLubyte *c, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glReplacementCodeuiColor4ubVertex3fvSUN (BYREF DWORD, BYREF BYTE, BYREF SINGLE)
MACRO glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glReplacementCodeuiColor4ubVertex3fvSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glReplacementCodeuiColor3fVertex3fSUN (GLuint rc, GLfloat r, GLfloat g, GLfloat b,
' GLfloat x, GLfloat y, GLfloat z);
' ========================================================================================
DECLARE SUB Proto_glReplacementCodeuiColor3fVertex3fSUN (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glReplacementCodeuiColor3fVertex3fSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glReplacementCodeuiColor3fVertex3fvSUN (const GLuint *rc, const GLfloat *c, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glReplacementCodeuiColor3fVertex3fvSUN (BYREF DWORD, BYREF SINGLE, BYREF SINGLE)
MACRO glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glReplacementCodeuiColor3fVertex3fvSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glReplacementCodeuiNormal3fVertex3fSUN (GLuint rc, GLfloat nx, GLfloat ny,
' GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
' ========================================================================================
DECLARE SUB Proto_glReplacementCodeuiNormal3fVertex3fSUN (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glReplacementCodeuiNormal3fVertex3fSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z))
END MACRO
' ========================================================================================

' ========================================================================================
' void glReplacementCodeuiNormal3fVertex3fvSUN (const GLuint *rc, const GLfloat *n, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glReplacementCodeuiNormal3fVertex3fvSUN (BYREF DWORD, BYREF SINGLE, BYREF SINGLE)
MACRO glReplacementCodeuiNormal3fVertex3fvSUN(rc, c, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glReplacementCodeuiNormal3fVertex3fvSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glReplacementCodeuiNormal3fVertex3fvSUN(rc, c, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glReplacementCodeuiColor4fNormal3fVertex3fSUN (GLuint rc, GLfloat r, GLfloat g,
' GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
' ========================================================================================
DECLARE SUB Proto_glReplacementCodeuiColor4fNormal3fVertex3fSUN (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glReplacementCodeuiColor4fNormal3fVertex3fSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (const GLuint *rc, const GLfloat *c,
' const GLfloat *n, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glReplacementCodeuiColor4fNormal3fVertex3fvSUN (BYREF DWORD, BYREF SINGLE, BYREF SINGLE, BYREF SINGLE)
MACRO glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glReplacementCodeuiColor4fNormal3fVertex3fvSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glReplacementCodeuiTexCoord2fVertex3fSUN (GLuint rc, GLfloat s, GLfloat t,
' GLfloat x, GLfloat y, GLfloat z);
' ========================================================================================
DECLARE SUB Proto_glReplacementCodeuiTexCoord2fVertex3fSUN (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glReplacementCodeuiTexCoord2fVertex3fSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glReplacementCodeuiTexCoord2fVertex3fvSUN (const GLuint *rc, const GLfloat *tc, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glReplacementCodeuiTexCoord2fVertex3fvSUN (BYREF DWORD, BYREF SINGLE, BYREF SINGLE)
MACRO glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, c, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glReplacementCodeuiTexCoord2fVertex3fvSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, c, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN (GLuint rc, GLfloat s, GLfloat t,
' GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
' ========================================================================================
DECLARE SUB Proto_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (const GLuint *rc,
' const GLfloat *tc, const GLfloat *n, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (BYREF DWORD, BYREF SINGLE, BYREF SINGLE, BYREF SINGLE)
MACRO glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, c, n, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, c, n, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN (GLuint rc, GLfloat s,
' GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny,
' GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
' ========================================================================================
DECLARE SUB Proto_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (const GLuint *rc,
' const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (BYREF DWORD, BYREF SINGLE, BYREF SINGLE, BYREF SINGLE, BYREF SINGLE)
MACRO glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_blend_func_separate)
%GL_EXT_blend_func_separate = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glBlendFuncSeparateEXT (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
' ========================================================================================
DECLARE SUB Proto_glBlendFuncSeparateEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBlendFuncSeparateEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_INGR_blend_func_separate)
%GL_INGR_blend_func_separate = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glBlendFuncSeparateINGR (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
' ========================================================================================
DECLARE SUB Proto_glBlendFuncSeparateINGR (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBlendFuncSeparateINGR")
   IF pProc THEN CALL DWORD pProc USING Proto_glBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_INGR_color_clamp)
%GL_INGR_color_clamp = 1
#ENDIF

#IF NOT %DEF(%GL_INGR_interlace_read)
%GL_INGR_interlace_read = 1
#ENDIF

#IF NOT %DEF(%GL_EXT_stencil_wrap)
%GL_EXT_stencil_wrap = 1
#ENDIF

#IF NOT %DEF(%GL_EXT_422_pixels)
%GL_EXT_422_pixels = 1
#ENDIF

#IF NOT %DEF(%GL_NV_texgen_reflection)
%GL_NV_texgen_reflection = 1
#ENDIF

#IF NOT %DEF(%GL_SUN_convolution_border_modes)
%GL_SUN_convolution_border_modes = 1
#ENDIF

#IF NOT %DEF(%GL_EXT_texture_env_add)
%GL_EXT_texture_env_add = 1
#ENDIF

#IF NOT %DEF(%GL_EXT_texture_lod_bias)
%GL_EXT_texture_lod_bias = 1
#ENDIF

#IF NOT %DEF(%GL_EXT_texture_filter_anisotropic)
%GL_EXT_texture_filter_anisotropic = 1
#ENDIF


#IF NOT %DEF(%GL_EXT_vertex_weighting)
%GL_EXT_vertex_weighting = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glVertexWeightfEXT (GLfloat weight);
' ========================================================================================
DECLARE SUB Proto_glVertexWeightfEXT (BYVAL SINGLE)
MACRO glVertexWeightfEXT(fweight)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexWeightfEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexWeightfEXT(fweight)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexWeightfvEXT (const GLfloat *weight);
' ========================================================================================
DECLARE SUB Proto_glVertexWeightfvEXT (BYREF SINGLE)
MACRO glVertexWeightfvEXT(fweight)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexWeightfvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexWeightfvEXT(fweight)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexWeightPointerEXT (GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer);
' ========================================================================================
DECLARE SUB Proto_glVertexWeightPointerEXT (BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glVertexWeightPointerEXT(isize, dwtype, istride, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexWeightPointerEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexWeightPointerEXT(isize, dwtype, istride, ppointer)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_NV_light_max_exponent)
%GL_NV_light_max_exponent = 1
#ENDIF


#IF NOT %DEF(%GL_NV_vertex_array_range)
%GL_NV_vertex_array_range = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glFlushVertexArrayRangeNV (void);
' ========================================================================================
DECLARE SUB Proto_glFlushVertexArrayRangeNV
MACRO glFlushVertexArrayRangeNV
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFlushVertexArrayRangeNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glFlushVertexArrayRangeNV
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexArrayRangeNV (GLsizei length, const GLvoid *pointer);
' ========================================================================================
DECLARE SUB Proto_glVertexArrayRangeNV (BYVAL LONG, BYREF ANY)
MACRO glVertexArrayRangeNV(ilength, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexArrayRangeNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexArrayRangeNV(ilength, ppointer)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_NV_register_combiners)
%GL_NV_register_combiners = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glCombinerParameterfvNV (GLenum pname, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glCombinerParameterfvNV (BYVAL DWORD, BYREF SINGLE)
MACRO glCombinerParameterfvNV(pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCombinerParameterfvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glCombinerParameterfvNV(pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCombinerParameterfNV (GLenum pname, GLfloat param);
' ========================================================================================
DECLARE SUB Proto_glCombinerParameterfNV (BYVAL DWORD, BYVAL SINGLE)
MACRO glCombinerParameterfNV(pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCombinerParameterfNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glCombinerParameterfNV(pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCombinerParameterivNV (GLenum pname, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glCombinerParameterivNV (BYVAL DWORD, BYREF LONG)
MACRO glCombinerParameterivNV(pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCombinerParameterivNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glCombinerParameterivNV(pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCombinerParameteriNV (GLenum pname, GLint param);
' ========================================================================================
DECLARE SUB Proto_glCombinerParameteriNV (BYVAL DWORD, BYVAL LONG)
MACRO glCombinerParameteriNV(pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCombinerParameteriNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glCombinerParameteriNV(pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCombinerInputNV (GLenum stage, GLenum portion, GLenum variable, GLenum input,
' GLenum mapping, GLenum componentUsage);
' ========================================================================================
DECLARE SUB Proto_glCombinerInputNV (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glCombinerInputNV(dwstage, dwportion, dwvariable, dwinput, dwmapping, dwcomponentUsage)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCombinerInputNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glCombinerInputNV(dwstage, dwportion, dwvariable, dwinput, dwmapping, dwcomponentUsage)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCombinerOutputNV (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput,
' GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct,
' GLboolean cdDotProduct, GLboolean muxSum);
' ========================================================================================
DECLARE SUB Proto_glCombinerOutputNV (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL BYTE, BYVAL BYTE, BYVAL BYTE)
MACRO glCombinerOutputNV(dwstage, dwportion, abOutput, cdOutput, sumOutput, dwscale, dwbias, abDotProduct, cdDotProduct, muxSum)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCombinerOutputNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glCombinerOutputNV(dwstage, dwportion, abOutput, cdOutput, sumOutput, dwscale, dwbias, abDotProduct, cdDotProduct, muxSum)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFinalCombinerInputNV (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
' ========================================================================================
DECLARE SUB Proto_glFinalCombinerInputNV (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glFinalCombinerInputNV(dwvariable, dwinput, dwmapping, dwcomponentUsage)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFinalCombinerInputNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glFinalCombinerInputNV(dwvariable, dwinput, dwmapping, dwcomponentUsage)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetCombinerInputParameterfvNV (GLenum stage, GLenum portion, GLenum variable,
' GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetCombinerInputParameterfvNV (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetCombinerInputParameterfvNV(dwstage, dwportion, dwvariable, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetCombinerInputParameterfvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetCombinerInputParameterfvNV(dwstage, dwportion, dwvariable, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetCombinerInputParameterivNV (GLenum stage, GLenum portion, GLenum variable,
' GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetCombinerInputParameterivNV (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetCombinerInputParameterivNV(dwstage, dwportion, dwvariable, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetCombinerInputParameterivNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetCombinerInputParameterivNV(dwstage, dwportion, dwvariable, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetCombinerOutputParameterfvNV (GLenum stage, GLenum portion, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetCombinerOutputParameterfvNV (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetCombinerOutputParameterfvNV(dwstage, dwportion, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetCombinerOutputParameterfvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetCombinerOutputParameterfvNV(dwstage, dwportion, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetCombinerOutputParameterivNV (GLenum stage, GLenum portion, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetCombinerOutputParameterivNV (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetCombinerOutputParameterivNV(dwstage, dwportion, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetCombinerOutputParameterivNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetCombinerOutputParameterivNV(dwstage, dwportion, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetFinalCombinerInputParameterfvNV (GLenum variable, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetFinalCombinerInputParameterfvNV (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetFinalCombinerInputParameterfvNV(dwstage, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetFinalCombinerInputParameterfvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetFinalCombinerInputParameterfvNV(dwstage, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetFinalCombinerInputParameterivNV (GLenum variable, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetFinalCombinerInputParameterivNV (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetFinalCombinerInputParameterivNV(dwstage, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetFinalCombinerInputParameterivNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetFinalCombinerInputParameterivNV(dwstage, pname, pparams)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_NV_fog_distance)
%GL_NV_fog_distance = 1
#ENDIF

#IF NOT %DEF(%GL_NV_texgen_emboss)
%GL_NV_texgen_emboss = 1
#ENDIF

#IF NOT %DEF(%GL_NV_blend_square)
%GL_NV_blend_square = 1
#ENDIF

#IF NOT %DEF(%GL_NV_texture_env_combine4)
%GL_NV_texture_env_combine4 = 1
#ENDIF


#IF NOT %DEF(%GL_MESA_resize_buffers)
%GL_MESA_resize_buffers = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' GLAPI void APIENTRY glResizeBuffersMESA (void);
' typedef void (APIENTRYP PFNGLRESIZEBUFFERSMESAPROC) (void);
' ========================================================================================
DECLARE SUB Proto_glResizeBuffersMESA
MACRO glResizeBuffersMESA
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glResizeBuffersMESA")
   IF pProc THEN CALL DWORD pProc USING Proto_glResizeBuffersMESA
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_MESA_window_pos)
%GL_MESA_window_pos = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glWindowPos2dMESA (GLdouble x, GLdouble y);
' ========================================================================================
DECLARE SUB Proto_glWindowPos2dMESA (BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glWindowPos2dMESA(x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos2dMESA")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos2dMESA(x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos2dvMESA (const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glWindowPos2dvMESA (BYREF DOUBLE)
MACRO glWindowPos2dvMESA(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos2dvMESA")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos2dvMESA(v)
END MACRO
' ========================================================================================

' ========================================================================================
' GLAPI void APIENTRY glWindowPos2fMESA (GLfloat, GLfloat);
' typedef void (APIENTRYP PFNGLWINDOWPOS2FMESAPROC) (GLfloat x, GLfloat y);
' ========================================================================================
DECLARE SUB Proto_glWindowPos2fMESA (BYVAL SINGLE, BYVAL SINGLE)
MACRO glWindowPos2fMESA(x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos2fMESA")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos2fMESA(x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' GLAPI void APIENTRY glWindowPos2fvMESA (const GLfloat *);
' typedef void (APIENTRYP PFNGLWINDOWPOS2FVMESAPROC) (const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glWindowPos2fvMESA (BYREF SINGLE)
MACRO glWindowPos2fvMESA(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos2fvMESA")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos2fvMESA(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos2iMESA (GLint x, GLint y);
' ========================================================================================
DECLARE SUB Proto_glWindowPos2iMESA (BYVAL LONG, BYVAL LONG)
MACRO glWindowPos2iMESA(x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos2iMESA")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos2iMESA(x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos2ivMESA (const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glWindowPos2ivMESA (BYREF LONG)
MACRO glWindowPos2ivMESA(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos2ivMESA")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos2ivMESA(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos2sMESA (GLshort x, GLshort y);
' ========================================================================================
DECLARE SUB Proto_glWindowPos2sMESA (BYVAL INTEGER, BYVAL INTEGER)
MACRO glWindowPos2sMESA(x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos2sMESA")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos2sMESA(x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos2svMESA (const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glWindowPos2svMESA (BYREF INTEGER)
MACRO glWindowPos2svMESA(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos2svMESA")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos2svMESA(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos3dMESA (GLdouble x, GLdouble y, GLdouble z);
' ========================================================================================
DECLARE SUB Proto_glWindowPos3dMESA (BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glWindowPos3dMESA(x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos3dMESA")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos3dMESA(x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos3dvMESA (const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glWindowPos3dvMESA (BYREF DOUBLE)
MACRO glWindowPos3dvMESA(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos3dvMESA")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos3dvMESA(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos3fMESA (GLfloat x, GLfloat y, GLfloat z);
' ========================================================================================
DECLARE SUB Proto_glWindowPos3fMESA (BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glWindowPos3fMESA(x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos3fMESA")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos3fMESA(x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos3fvMESA (const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glWindowPos3fvMESA (BYREF SINGLE)
MACRO glWindowPos3fvMESA(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos3fvMESA")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos3fvMESA(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos3iMESA (GLint x, GLint y, GLint z);
' ========================================================================================
DECLARE SUB Proto_glWindowPos3iMESA (BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glWindowPos3iMESA(x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos3iMESA")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos3iMESA(x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos3ivMESA (const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glWindowPos3ivMESA (BYREF LONG)
MACRO glWindowPos3ivMESA(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos3ivMESA")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos3ivMESA(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos3sMESA (GLshort x, GLshort y, GLshort z);
' ========================================================================================
DECLARE SUB Proto_glWindowPos3sMESA (BYVAL INTEGER, BYVAL INTEGER, BYVAL INTEGER)
MACRO glWindowPos3sMESA(x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos3sMESA")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos3sMESA(x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos3svMESA (const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glWindowPos3svMESA (BYREF INTEGER)
MACRO glWindowPos3svMESA(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos3svMESA")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos3svMESA(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos4dMESA (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
' ========================================================================================
DECLARE SUB Proto_glWindowPos4dMESA (BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glWindowPos4dMESA(x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos4dMESA")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos4dMESA(x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos4dvMESA (const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glWindowPos4dvMESA (BYREF DOUBLE)
MACRO glWindowPos4dvMESA(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos4dvMESA")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos4dvMESA(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos4fMESA (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
' ========================================================================================
DECLARE SUB Proto_glWindowPos4fMESA (BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glWindowPos4fMESA(x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos4fMESA")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos4fMESA(x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos4fvMESA (const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glWindowPos4fvMESA (BYREF SINGLE)
MACRO glWindowPos4fvMESA(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos4fvMESA")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos4fvMESA(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos4iMESA (GLint x, GLint y, GLint z, GLint w);
' ========================================================================================
DECLARE SUB Proto_glWindowPos4iMESA (BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glWindowPos4iMESA(x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos4iMESA")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos4iMESA(x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos4ivMESA (const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glWindowPos4ivMESA (BYREF LONG)
MACRO glWindowPos4ivMESA(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos4ivMESA")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos4ivMESA(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos4sMESA (GLshort x, GLshort y, GLshort z, GLshort w);
' ========================================================================================
DECLARE SUB Proto_glWindowPos4sMESA (BYVAL INTEGER, BYVAL INTEGER, BYVAL INTEGER, BYVAL INTEGER)
MACRO glWindowPos4sMESA(x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos4sMESA")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos4sMESA(x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWindowPos4svMESA (const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glWindowPos4svMESA (BYREF INTEGER)
MACRO glWindowPos4svMESA(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWindowPos4svMESA")
   IF pProc THEN CALL DWORD pProc USING Proto_glWindowPos4svMESA(v)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_IBM_cull_vertex)
%GL_IBM_cull_vertex = 1
#ENDIF

#IF NOT %DEF(%GL_IBM_multimode_draw_arrays)
%GL_IBM_multimode_draw_arrays = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glMultiModeDrawArraysIBM (const GLenum *mode, const GLint *first,
' const GLsizei *count, GLsizei primcount, GLint modestride);
' ========================================================================================
DECLARE SUB Proto_glMultiModeDrawArraysIBM (BYREF DWORD, BYREF LONG, BYREF LONG, BYVAL LONG, BYVAL LONG)
MACRO glMultiModeDrawArraysIBM(dwmode, ifirst, icount, iprimcount, imodestride)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiModeDrawArraysIBM")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiModeDrawArraysIBM(dwmode, ifirst, icount, iprimcount, imodestride)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiModeDrawElementsIBM (const GLenum *mode, const GLsizei *count, GLenum type,
' const GLvoid* const *indices, GLsizei primcount, GLint modestride);
' ========================================================================================
DECLARE SUB Proto_glMultiModeDrawElementsIBM (BYREF DWORD, BYREF LONG, BYVAL DWORD, BYREF ANY, BYVAL LONG, BYVAL LONG)
MACRO glMultiModeDrawElementsIBM(dwmode, icount, dwtype, pindices, iprimcount, imodestride)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiModeDrawElementsIBM")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiModeDrawElementsIBM(dwmode, icount, dwtype, pindices, iprimcount, imodestride)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_IBM_vertex_array_lists)
%GL_IBM_vertex_array_lists = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glColorPointerListIBM (GLint size, GLenum type, GLint stride,
' const GLvoid* *pointer, GLint ptrstride);
' ========================================================================================
DECLARE SUB Proto_glColorPointerListIBM (BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYREF ANY, BYVAL LONG)
MACRO glColorPointerListIBM(isize, dwtype, istride, ppointer, ptrstride)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glColorPointerListIBM")
   IF pProc THEN CALL DWORD pProc USING Proto_glColorPointerListIBM(isize, dwtype, istride, ppointer, ptrstride)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSecondaryColorPointerListIBM (GLint size, GLenum type, GLint stride,
' const GLvoid* *pointer, GLint ptrstride);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColorPointerListIBM (BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYREF ANY, BYVAL LONG)
MACRO glSecondaryColorPointerListIBM(isize, dwtype, istride, ppointer, ptrstride)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColorPointerListIBM")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColorPointerListIBM(isize, dwtype, istride, ppointer, ptrstride)
END MACRO
' ========================================================================================

' ========================================================================================
' void glEdgeFlagPointerListIBM (GLint stride, const GLboolean* *pointer, GLint ptrstride);
' ========================================================================================
DECLARE SUB Proto_glEdgeFlagPointerListIBM (BYVAL LONG, BYREF BYTE, BYVAL LONG)
MACRO glEdgeFlagPointerListIBM(istride, ppointer, ptrstride)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glEdgeFlagPointerListIBM")
   IF pProc THEN CALL DWORD pProc USING Proto_glEdgeFlagPointerListIBM(istride, ppointer, ptrstride)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFogCoordPointerListIBM (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
' ========================================================================================
DECLARE SUB Proto_glFogCoordPointerListIBM (BYVAL DWORD, BYVAL LONG, BYREF ANY, BYVAL LONG)
MACRO glFogCoordPointerListIBM(dwtype, istride, ppointer, ptrstride)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFogCoordPointerListIBM")
   IF pProc THEN CALL DWORD pProc USING Proto_glFogCoordPointerListIBM(dwtype, istride, ppointer, ptrstride)
END MACRO
' ========================================================================================

' ========================================================================================
' void glIndexPointerListIBM (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
' ========================================================================================
DECLARE SUB Proto_glIndexPointerListIBM (BYVAL DWORD, BYVAL LONG, BYREF ANY, BYVAL LONG)
MACRO glIndexPointerListIBM(dwtype, istride, ppointer, ptrstride)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glIndexPointerListIBM")
   IF pProc THEN CALL DWORD pProc USING Proto_glIndexPointerListIBM(dwtype, istride, ppointer, ptrstride)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNormalPointerListIBM (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
' ========================================================================================
DECLARE SUB Proto_glNormalPointerListIBM (BYVAL DWORD, BYVAL LONG, BYREF ANY, BYVAL LONG)
MACRO glNormalPointerListIBM(dwtype, istride, ppointer, ptrstride)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNormalPointerListIBM")
   IF pProc THEN CALL DWORD pProc USING Proto_glNormalPointerListIBM(dwtype, istride, ppointer, ptrstride)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexCoordPointerListIBM (GLint size, GLenum type, GLint stride,
' const GLvoid* *pointer, GLint ptrstride);
' ========================================================================================
DECLARE SUB Proto_glTexCoordPointerListIBM (BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYREF ANY, BYVAL LONG)
MACRO glTexCoordPointerListIBM(isize, dwtype, istride, ppointer, ptrstride)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexCoordPointerListIBM")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexCoordPointerListIBM(isize, dwtype, istride, ppointer, ptrstride)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexPointerListIBM (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
' ========================================================================================
DECLARE SUB Proto_glVertexPointerListIBM (BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYREF ANY, BYVAL LONG)
MACRO glVertexPointerListIBM(isize, dwtype, istride, ppointer, ptrstride)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexPointerListIBM")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexPointerListIBM(isize, dwtype, istride, ppointer, ptrstride)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_SGIX_subsample)
%GL_SGIX_subsample = 1
#ENDIF

#IF NOT %DEF(%GL_SGIX_ycrcba)
%GL_SGIX_ycrcba = 1
#ENDIF

#IF NOT %DEF(%GL_SGIX_ycrcb_subsample)
%GL_SGIX_ycrcb_subsample = 1
#ENDIF

#IF NOT %DEF(%GL_SGIX_depth_pass_instrument)
%GL_SGIX_depth_pass_instrument = 1
#ENDIF

#IF NOT %DEF(%GL_3DFX_texture_compression_FXT1)
%GL_3DFX_texture_compression_FXT1 = 1
#ENDIF

#IF NOT %DEF(%GL_3DFX_multisample)
%GL_3DFX_multisample = 1
#ENDIF


#IF NOT %DEF(%GL_3DFX_tbuffer)
%GL_3DFX_tbuffer = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glTbufferMask3DFX (GLuint mask);
' ========================================================================================
DECLARE SUB Proto_glTbufferMask3DFX (BYVAL DWORD)
MACRO glTbufferMask3DFX(dwmask)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTbufferMask3DFX")
   IF pProc THEN CALL DWORD pProc USING Proto_glTbufferMask3DFX(dwmask)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF

#IF NOT %DEF(%GL_EXT_multisample)
%GL_EXT_multisample = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glSampleMaskEXT (GLclampf value, GLboolean invert);
' ========================================================================================
DECLARE SUB Proto_glSampleMaskEXT (BYVAL SINGLE, BYVAL BYTE)
MACRO glSampleMaskEXT(fvalue, binvert)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSampleMaskEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glSampleMaskEXT(fvalue, binvert)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSamplePatternEXT (GLenum pattern);
' ========================================================================================
DECLARE SUB Proto_glSamplePatternEXT (BYVAL DWORD)
MACRO glSamplePatternEXT(dwpattern)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSamplePatternEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glSamplePatternEXT(dwpattern)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_SGIX_vertex_preclip)
%GL_SGIX_vertex_preclip = 1
#ENDIF

#IF NOT %DEF(%GL_SGIX_convolution_accuracy)
%GL_SGIX_convolution_accuracy = 1
#ENDIF

#IF NOT %DEF(%GL_SGIX_resample)
%GL_SGIX_resample = 1
#ENDIF

#IF NOT %DEF(%GL_SGIS_point_line_texgen)
%GL_SGIS_point_line_texgen = 1
#ENDIF


#IF NOT %DEF(%GL_SGIS_texture_color_mask)
%GL_SGIS_texture_color_mask = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glTextureColorMaskSGIS (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
' ========================================================================================
DECLARE SUB Proto_glTextureColorMaskSGIS (BYVAL BYTE, BYVAL BYTE, BYVAL BYTE, BYVAL BYTE)
MACRO glTextureColorMaskSGIS(red, green, blue, alpha)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTextureColorMaskSGIS")
   IF pProc THEN CALL DWORD pProc USING Proto_glTextureColorMaskSGIS(red, green, blue, alpha)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_SGIX_igloo_interface)
%GL_SGIX_igloo_interface = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glIglooInterfaceSGIX (GLenum pname, const GLvoid *params);
' ========================================================================================
DECLARE SUB Proto_glIglooInterfaceSGIX (BYVAL DWORD, BYREF ANY)
MACRO glIglooInterfaceSGIX(pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glIglooInterfaceSGIX")
   IF pProc THEN CALL DWORD pProc USING Proto_glIglooInterfaceSGIX(pname, pparams)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_texture_env_dot3)
%GL_EXT_texture_env_dot3 = 1
#ENDIF

#IF NOT %DEF(%GL_ATI_texture_mirror_once)
%GL_ATI_texture_mirror_once = 1
#ENDIF

#IF NOT %DEF(%GL_NV_fence)
%GL_NV_fence = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glDeleteFencesNV (GLsizei n, const GLuint *fences);
' ========================================================================================
DECLARE SUB Proto_glDeleteFencesNV (BYVAL LONG, BYREF DWORD)
MACRO glDeleteFencesNV(n, pfences)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDeleteFencesNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glDeleteFencesNV(n, pfences)
END MACRO
' ========================================================================================

' ========================================================================================
' GLAPI void APIENTRY glGenFencesNV (GLsizei, GLuint *);
' typedef void (APIENTRYP PFNGLGENFENCESNVPROC) (GLsizei n, GLuint *fences);
' ========================================================================================
DECLARE SUB Proto_glGenFencesNV (BYVAL LONG, BYREF DWORD)
MACRO glGenFencesNV(n, pfences)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGenFencesNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGenFencesNV(n, pfences)
END MACRO
' ========================================================================================

' ========================================================================================
' GLboolean glIsFenceNV (GLuint fence);
' ========================================================================================
DECLARE FUNCTION Proto_glIsFenceNV (BYVAL DWORD) AS BYTE
MACRO FUNCTION glIsFenceNV(pfence)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glIsFenceNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glIsFenceNV(pfence) TO bRes
END MACRO = bRes
' ========================================================================================

' ========================================================================================
' GLboolean glTestFenceNV (GLuint fence);
' ========================================================================================
DECLARE FUNCTION Proto_glTestFenceNV (BYVAL DWORD) AS BYTE
MACRO FUNCTION glTestFenceNV(pfence)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glTestFenceNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glTestFenceNV(pfence) TO bRes
END MACRO = bRes
' ========================================================================================

' ========================================================================================
' void glGetFenceivNV (GLuint fence, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetFenceivNV (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetFenceivNV(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetFenceivNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetFenceivNV(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFinishFenceNV (GLuint fence);
' ========================================================================================
DECLARE SUB Proto_glFinishFenceNV (BYVAL DWORD)
MACRO glFinishFenceNV(pfence)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFinishFenceNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glFinishFenceNV(pfence)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSetFenceNV (GLuint fence, GLenum condition);
' ========================================================================================
DECLARE SUB Proto_glSetFenceNV (BYVAL DWORD, BYVAL DWORD)
MACRO glSetFenceNV(pfence, dwcondition)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSetFenceNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glSetFenceNV(pfence, dwcondition)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_NV_evaluators)
%GL_NV_evaluators = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glMapControlPointsNV (GLenum target, GLuint index, GLenum type, GLsizei ustride,
' GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points);
' ========================================================================================
DECLARE SUB Proto_glMapControlPointsNV (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL BYTE, BYREF ANY)
MACRO glMapControlPointsNV(dwtarget, dwindex, dwtype, ustride, vstride, uorder, vorder, bpacked, ppoints)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMapControlPointsNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glMapControlPointsNV(dwtarget, dwindex, dwtype, ustride, vstride, uorder, vorder, bpacked, ppoints)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMapParameterivNV (GLenum target, GLenum pname, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glMapParameterivNV (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glMapParameterivNV(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMapParameterivNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glMapParameterivNV(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMapParameterfvNV (GLenum target, GLenum pname, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glMapParameterfvNV (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glMapParameterfvNV(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMapParameterfvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glMapParameterfvNV(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetMapControlPointsNV (GLenum target, GLuint index, GLenum type, GLsizei ustride,
' GLsizei vstride, GLboolean packed, GLvoid *points);
' ========================================================================================
DECLARE SUB Proto_glGetMapControlPointsNV (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL BYTE, BYREF ANY)
MACRO glGetMapControlPointsNV(dwtarget, dwindex, dwtype, ustride, vstride, bpacked, ppoints)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetMapControlPointsNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetMapControlPointsNV(dwtarget, dwindex, dwtype, ustride, vstride, bpacked, ppoints)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetMapParameterivNV (GLenum target, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetMapParameterivNV (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetMapParameterivNV(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetMapParameterivNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetMapParameterivNV(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetMapParameterfvNV (GLenum target, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetMapParameterfvNV (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetMapParameterfvNV(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetMapParameterfvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetMapParameterfvNV(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetMapAttribParameterivNV (GLenum target, GLuint index, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetMapAttribParameterivNV (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetMapAttribParameterivNV(dwstage, dwportion, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetMapAttribParameterivNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetMapAttribParameterivNV(dwstage, dwportion, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetMapAttribParameterfvNV (GLenum target, GLuint index, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetMapAttribParameterfvNV (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetMapAttribParameterfvNV(dwstage, dwportion, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetMapAttribParameterfvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetMapAttribParameterfvNV(dwstage, dwportion, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' GLAPI void APIENTRY glEvalMapsNV (GLenum, GLenum);
' typedef void (APIENTRYP PFNGLEVALMAPSNVPROC) (GLenum target, GLenum mode);
' ========================================================================================
DECLARE SUB Proto_glEvalMapsNV (BYVAL DWORD, BYVAL DWORD)
MACRO glEvalMapsNV(dwtarget, dwmode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glEvalMapsNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glEvalMapsNV(dwtarget, dwmode)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_NV_packed_depth_stencil)
%GL_NV_packed_depth_stencil = 1
#ENDIF


#IF NOT %DEF(%GL_NV_register_combiners2)
%GL_NV_register_combiners2 = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glCombinerStageParameterfvNV (GLenum stage, GLenum pname, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glCombinerStageParameterfvNV (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glCombinerStageParameterfvNV(dwstage, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCombinerStageParameterfvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glCombinerStageParameterfvNV(dwstage, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetCombinerStageParameterfvNV (GLenum stage, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetCombinerStageParameterfvNV (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetCombinerStageParameterfvNV(dwstage, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetCombinerStageParameterfvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetCombinerStageParameterfvNV(dwstage, pname, pparams)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_NV_texture_compression_vtc)
%GL_NV_texture_compression_vtc = 1
#ENDIF

#IF NOT %DEF(%GL_NV_texture_rectangle)
%GL_NV_texture_rectangle = 1
#ENDIF

#IF NOT %DEF(%GL_NV_texture_shader)
%GL_NV_texture_shader = 1
#ENDIF

#IF NOT %DEF(%GL_NV_texture_shader2)
%GL_NV_texture_shader2 = 1
#ENDIF

#IF NOT %DEF(%GL_NV_vertex_array_range2)
%GL_NV_vertex_array_range2 = 1
#ENDIF


#IF NOT %DEF(%GL_NV_vertex_program)
%GL_NV_vertex_program = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' GLboolean glAreProgramsResidentNV (GLsizei n, const GLuint *programs, GLboolean *residences);
' ========================================================================================
DECLARE FUNCTION Proto_glAreProgramsResidentNV (BYVAL LONG, BYREF DWORD, BYREF BYTE) AS BYTE
MACRO FUNCTION glAreProgramsResidentNV(n, ptextures, presidences)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glAreProgramsResidentNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glAreProgramsResidentNV(n, ptextures, presidences) TO bRes
END MACRO = bRes
' ========================================================================================

' ========================================================================================
' void glBindProgramNV (GLenum target, GLuint id);
' ========================================================================================
DECLARE SUB Proto_glBindProgramNV (BYVAL DWORD, BYVAL DWORD)
MACRO glBindProgramNV(dwtarget, dwid)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBindProgramNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindProgramNV(dwtarget, dwid)
END MACRO
' ========================================================================================

' ========================================================================================
' void glDeleteProgramsNV (GLsizei n, const GLuint *programs);
' ========================================================================================
DECLARE SUB Proto_glDeleteProgramsNV (BYVAL LONG, BYREF DWORD)
MACRO glDeleteProgramsNV(n, pprograms)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDeleteProgramsNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glDeleteProgramsNV(n, pprograms)
END MACRO
' ========================================================================================

' ========================================================================================
' void glExecuteProgramNV (GLenum target, GLuint id, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glExecuteProgramNV (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glExecuteProgramNV(dwtarget, dwid, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glExecuteProgramNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glExecuteProgramNV(dwtarget, dwid, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGenProgramsNV (GLsizei n, GLuint *programs);
' ========================================================================================
DECLARE SUB Proto_glGenProgramsNV (BYVAL LONG, BYREF DWORD)
MACRO glGenProgramsNV(n, pprograms)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGenProgramsNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGenProgramsNV(n, pprograms)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetProgramParameterdvNV (GLenum target, GLuint index, GLenum pname, GLdouble *params);
' ========================================================================================
DECLARE SUB Proto_glGetProgramParameterdvNV (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF DOUBLE)
MACRO glGetProgramParameterdvNV(dwtarget, dwindex, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetProgramParameterdvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetProgramParameterdvNV(dwtarget, dwindex, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetProgramParameterfvNV (GLenum target, GLuint index, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetProgramParameterfvNV (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetProgramParameterfvNV(dwtarget, dwindex, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetProgramParameterfvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetProgramParameterfvNV(dwtarget, dwindex, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetProgramivNV (GLuint id, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetProgramivNV (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetProgramivNV(dwid, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetProgramivNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetProgramivNV(dwid, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetProgramStringNV (GLuint id, GLenum pname, GLubyte *program);
' ========================================================================================
DECLARE SUB Proto_glGetProgramStringNV (BYVAL DWORD, BYVAL DWORD, BYREF BYTE)
MACRO glGetProgramStringNV(dwid, pname, pprogram)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetProgramStringNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetProgramStringNV(dwid, pname, pprogram)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetTrackMatrixivNV (GLenum target, GLuint address, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetTrackMatrixivNV (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetTrackMatrixivNV(dwtarget, dwaddress, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetTrackMatrixivNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetTrackMatrixivNV(dwtarget, dwaddress, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetVertexAttribdvNV (GLuint index, GLenum pname, GLdouble *params);
' ========================================================================================
DECLARE SUB Proto_glGetVertexAttribdvNV (BYVAL DWORD, BYVAL DWORD, BYREF DOUBLE)
MACRO glGetVertexAttribdvNV(dwindex, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetVertexAttribdvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetVertexAttribdvNV(dwindex, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetVertexAttribfvNV (GLuint index, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetVertexAttribfvNV (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetVertexAttribfvNV(dwindex, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetVertexAttribfvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetVertexAttribfvNV(dwindex, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetVertexAttribivNV (GLuint index, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetVertexAttribivNV (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetVertexAttribivNV(dwindex, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetVertexAttribivNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetVertexAttribivNV(dwindex, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetVertexAttribPointervNV (GLuint index, GLenum pname, GLvoid* *pointer);
' ========================================================================================
DECLARE SUB Proto_glGetVertexAttribPointervNV (BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glGetVertexAttribPointervNV(dwindex, pname, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetVertexAttribPointervNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetVertexAttribPointervNV(dwindex, pname, ppointer)
END MACRO
' ========================================================================================

' ========================================================================================
' GLboolean glIsProgramNV (GLuint id);
' ========================================================================================
DECLARE FUNCTION Proto_glIsProgramNV (BYVAL DWORD) AS BYTE
MACRO FUNCTION glIsProgramNV(dwid)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glIsProgramNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glIsProgramNV(dwid) TO bRes
END MACRO = bRes
' ========================================================================================

' ========================================================================================
' void glLoadProgramNV (GLenum target, GLuint id, GLsizei len, const GLubyte *program);
' ========================================================================================
DECLARE SUB Proto_glLoadProgramNV (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYREF BYTE)
MACRO glLoadProgramNV(dwtarget, dwid, ilen, program)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glLoadProgramNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glLoadProgramNV(dwtarget, dwid, ilen, program)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramParameter4dNV (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
' ========================================================================================
DECLARE SUB Proto_glProgramParameter4dNV (BYVAL DWORD, BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glProgramParameter4dNV(dwtarget, dwindex, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramParameter4dNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramParameter4dNV(dwtarget, dwindex, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramParameter4dvNV (GLenum target, GLuint index, const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glProgramParameter4dvNV (BYVAL DWORD, BYVAL DWORD, BYREF DOUBLE)
MACRO glProgramParameter4dvNV(dwtarget, dwindex, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramParameter4dvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramParameter4dvNV(dwtarget, dwindex, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramParameter4fNV (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
' ========================================================================================
DECLARE SUB Proto_glProgramParameter4fNV (BYVAL DWORD, BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glProgramParameter4fNV(dwtarget, dwindex, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramParameter4fNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramParameter4fNV(dwtarget, dwindex, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramParameter4fvNV (GLenum target, GLuint index, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glProgramParameter4fvNV (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glProgramParameter4fvNV(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramParameter4fvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramParameter4fvNV(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramParameters4dvNV (GLenum target, GLuint index, GLuint count, const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glProgramParameters4dvNV (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF DOUBLE)
MACRO glProgramParameters4dvNV(dwtarget, dwindex, dwcount, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramParameters4dvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramParameters4dvNV(dwtarget, dwindex, dwcount, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramParameters4fvNV (GLenum target, GLuint index, GLuint count, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glProgramParameters4fvNV (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glProgramParameters4fvNV(dwtarget, dwindex, dwcount, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramParameters4fvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramParameters4fvNV(dwtarget, dwindex, dwcount, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glRequestResidentProgramsNV (GLsizei n, const GLuint *programs);
' ========================================================================================
DECLARE SUB Proto_glRequestResidentProgramsNV (BYVAL LONG, BYREF DWORD)
MACRO glRequestResidentProgramsNV(n, pprograms)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glRequestResidentProgramsNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glRequestResidentProgramsNV(n, pprograms)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTrackMatrixNV (GLenum target, GLuint address, GLenum matrix, GLenum transform);
' ========================================================================================
DECLARE SUB Proto_glTrackMatrixNV (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glTrackMatrixNV(dwtarget, dwaddress, dwmatrix, dwtransform)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTrackMatrixNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glTrackMatrixNV(dwtarget, dwaddress, dwmatrix, dwtransform)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribPointerNV (GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribPointerNV (BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glVertexAttribPointerNV(dwindex, fsize, dwtype, istride, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribPointerNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribPointerNV(dwindex, fsize, dwtype, istride, ppointer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib1dNV (GLuint index, GLdouble x);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib1dNV (BYVAL DWORD, BYVAL DOUBLE)
MACRO glVertexAttrib1dNV(dwindex, x)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib1dNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib1dNV(dwindex, x)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib1dvNV (GLuint index, const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib1dvNV (BYVAL DWORD, BYREF DOUBLE)
MACRO glVertexAttrib1dvNV(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib1dvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib1dvNV(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib1fNV (GLuint index, GLfloat x);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib1fNV (BYVAL DWORD, BYVAL SINGLE)
MACRO glVertexAttrib1fNV(dwindex, x)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib1fNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib1fNV(dwindex, x)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib1fvNV (GLuint index, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib1fvNV (BYVAL DWORD, BYREF SINGLE)
MACRO glVertexAttrib1fvNV(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib1fvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib1fvNV(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib1sNV (GLuint index, GLshort x);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib1sNV (BYVAL DWORD, BYVAL INTEGER)
MACRO glVertexAttrib1sNV(dwindex, x)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib1sNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib1sNV(dwindex, x)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib1svNV (GLuint index, const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib1svNV (BYVAL DWORD, BYREF INTEGER)
MACRO glVertexAttrib1svNV(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib1svNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib1svNV(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib2dNV (GLuint index, GLdouble x, GLdouble y);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib2dNV (BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glVertexAttrib2dNV(dwindex, x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib2dNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib2dNV(dwindex, x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib2dvNV (GLuint index, const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib2dvNV (BYVAL DWORD, BYREF DOUBLE)
MACRO glVertexAttrib2dvNV(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib2dvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib2dvNV(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib2fNV (GLuint index, GLfloat x, GLfloat y);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib2fNV (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE)
MACRO glVertexAttrib2fNV(dwindex, x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib2fNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib2fNV(dwindex, x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib2fvNV (GLuint index, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib2fvNV (BYVAL DWORD, BYREF SINGLE)
MACRO glVertexAttrib2fvNV(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib2fvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib2fvNV(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib2sNV (GLuint index, GLshort x, GLshort y);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib2sNV (BYVAL DWORD, BYVAL INTEGER, BYVAL INTEGER)
MACRO glVertexAttrib2sNV(dwindex, x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib2sNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib2sNV(dwindex, x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib2svNV (GLuint index, const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib2svNV (BYVAL DWORD, BYREF INTEGER)
MACRO glVertexAttrib2svNV(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib2svNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib2svNV(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib3dNV (GLuint index, GLdouble x, GLdouble y, GLdouble z);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib3dNV (BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glVertexAttrib3dNV(dwindex, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib3dNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib3dNV(dwindex, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib3dvNV (GLuint index, const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib3dvNV (BYVAL DWORD, BYREF DOUBLE)
MACRO glVertexAttrib3dvNV(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib3dvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib3dvNV(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib3fNV (GLuint index, GLfloat x, GLfloat y, GLfloat z);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib3fNV (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glVertexAttrib3fNV(dwindex, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib3fNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib3fNV(dwindex, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib3fvNV (GLuint index, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib3fvNV (BYVAL DWORD, BYREF SINGLE)
MACRO glVertexAttrib3fvNV(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib3fvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib3fvNV(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib3sNV (GLuint index, GLshort x, GLshort y, GLshort z);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib3sNV (BYVAL DWORD, BYVAL INTEGER, BYVAL INTEGER, BYVAL INTEGER)
MACRO glVertexAttrib3sNV(dwindex, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib3sNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib3sNV(dwindex, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib3svNV (GLuint index, const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib3svNV (BYVAL DWORD, BYREF INTEGER)
MACRO glVertexAttrib3svNV(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib3svNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib3svNV(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib4dNV (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4dNV (BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glVertexAttrib4dNV(dwindex, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4dNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4dNV(dwindex, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib4dvNV (GLuint index, const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4dvNV (BYVAL DWORD, BYREF DOUBLE)
MACRO glVertexAttrib4dvNV(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4dvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4dvNV(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib4fNV (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4fNV (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glVertexAttrib4fNV(dwindex, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4fNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4fNV(dwindex, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib4fvNV (GLuint index, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4fvNV (BYVAL DWORD, BYREF SINGLE)
MACRO glVertexAttrib4fvNV(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4fvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4fvNV(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib4sNV (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4sNV (BYVAL DWORD, BYVAL INTEGER, BYVAL INTEGER, BYVAL INTEGER, BYVAL INTEGER)
MACRO glVertexAttrib4sNV(dwindex, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4sNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4sNV(dwindex, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib4svNV (GLuint index, const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4svNV (BYVAL DWORD, BYREF INTEGER)
MACRO glVertexAttrib4svNV(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4svNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4svNV(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib4ubNV (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4ubNV (BYVAL DWORD, BYVAL BYTE, BYVAL BYTE, BYVAL BYTE, BYVAL BYTE)
MACRO glVertexAttrib4ubNV(dwindex, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4ubNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4ubNV(dwindex, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib4ubvNV (GLuint index, const GLubyte *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4ubvNV (BYVAL DWORD, BYREF BYTE)
MACRO glVertexAttrib4ubvNV(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4ubvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4ubvNV(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribs1dvNV (GLuint index, GLsizei count, const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribs1dvNV (BYVAL DWORD, BYVAL LONG, BYREF DOUBLE)
MACRO glVertexAttribs1dvNV(dwindex, icount, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribs1dvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribs1dvNV(dwindex, icount, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribs1fvNV (GLuint index, GLsizei count, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribs1fvNV (BYVAL DWORD, BYVAL LONG, BYREF SINGLE)
MACRO glVertexAttribs1fvNV(dwindex, icount, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribs1fvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribs1fvNV(dwindex, icount, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribs1svNV (GLuint index, GLsizei count, const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribs1svNV (BYVAL DWORD, BYVAL LONG, BYREF INTEGER)
MACRO glVertexAttribs1svNV(dwindex, icount, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribs1svNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribs1svNV(dwindex, icount, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribs2dvNV (GLuint index, GLsizei count, const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribs2dvNV (BYVAL DWORD, BYVAL LONG, BYREF DOUBLE)
MACRO glVertexAttribs2dvNV(dwindex, icount, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribs2dvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribs2dvNV(dwindex, icount, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribs2fvNV (GLuint index, GLsizei count, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribs2fvNV (BYVAL DWORD, BYVAL LONG, BYREF SINGLE)
MACRO glVertexAttribs2fvNV(dwindex, icount, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribs2fvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribs2fvNV(dwindex, icount, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribs2svNV (GLuint index, GLsizei count, const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribs2svNV (BYVAL DWORD, BYVAL LONG, BYREF INTEGER)
MACRO glVertexAttribs2svNV(dwindex, icount, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribs2svNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribs2svNV(dwindex, icount, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribs3dvNV (GLuint index, GLsizei count, const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribs3dvNV (BYVAL DWORD, BYVAL LONG, BYREF DOUBLE)
MACRO glVertexAttribs3dvNV(dwindex, icount, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribs3dvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribs3dvNV(dwindex, icount, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribs3fvNV (GLuint index, GLsizei count, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribs3fvNV (BYVAL DWORD, BYVAL LONG, BYREF SINGLE)
MACRO glVertexAttribs3fvNV(dwindex, icount, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribs3fvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribs3dvNV(dwindex, icount, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribs3svNV (GLuint index, GLsizei count, const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribs3svNV (BYVAL DWORD, BYVAL LONG, BYREF INTEGER)
MACRO glVertexAttribs3svNV(dwindex, icount, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribs3svNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribs3svNV(dwindex, icount, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribs4dvNV (GLuint index, GLsizei count, const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribs4dvNV (BYVAL DWORD, BYVAL LONG, BYREF DOUBLE)
MACRO glVertexAttribs4dvNV(dwindex, icount, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribs4dvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribs4dvNV(dwindex, icount, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribs4fvNV (GLuint index, GLsizei count, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribs4fvNV (BYVAL DWORD, BYVAL LONG, BYREF SINGLE)
MACRO glVertexAttribs4fvNV(dwindex, icount, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribs4fvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribs4fvNV(dwindex, icount, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribs4svNV (GLuint index, GLsizei count, const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribs4svNV (BYVAL DWORD, BYVAL LONG, BYREF INTEGER)
MACRO glVertexAttribs4svNV(dwindex, icount, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribs4svNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribs4svNV(dwindex, icount, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribs4ubvNV (GLuint index, GLsizei count, const GLubyte *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribs4ubvNV (BYVAL DWORD, BYVAL LONG, BYREF BYTE)
MACRO glVertexAttribs4ubvNV(dwindex, icount, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribs4ubvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribs4ubvNV(dwindex, icount, v)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_SGIX_texture_coordinate_clamp)
%GL_SGIX_texture_coordinate_clamp = 1
#ENDIF

#IF NOT %DEF(%GL_SGIX_scalebias_hint)
%GL_SGIX_scalebias_hint = 1
#ENDIF

#IF NOT %DEF(%GL_OML_interlace)
%GL_OML_interlace = 1
#ENDIF

#IF NOT %DEF(%GL_OML_subsample)
%GL_OML_subsample = 1
#ENDIF

#IF NOT %DEF(%GL_OML_resample)
%GL_OML_resample = 1
#ENDIF

#IF NOT %DEF(%GL_NV_copy_depth_to_color)
%GL_NV_copy_depth_to_color = 1
#ENDIF

#IF NOT %DEF(%GL_ATI_envmap_bumpmap)
%GL_ATI_envmap_bumpmap       = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glTexBumpParameterivATI (GLenum pname, const GLint *param);
' ========================================================================================
DECLARE SUB Proto_glTexBumpParameterivATI (BYVAL DWORD, BYREF LONG)
MACRO glTexBumpParameterivATI(pname, pparam)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexBumpParameterivATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexBumpParameterivATI(pname, pparam)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexBumpParameterfvATI (GLenum pname, const GLfloat *param);
' ========================================================================================
DECLARE SUB Proto_glTexBumpParameterfvATI (BYVAL DWORD, BYREF SINGLE)
MACRO glTexBumpParameterfvATI(pname, pparam)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexBumpParameterfvATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexBumpParameterfvATI(pname, pparam)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetTexBumpParameterivATI (GLenum pname, GLint *param);
' ========================================================================================
DECLARE SUB Proto_glGetTexBumpParameterivATI (BYVAL DWORD, BYREF LONG)
MACRO glGetTexBumpParameterivATI(pname, pparam)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetTexBumpParameterivATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetTexBumpParameterivATI(pname, pparam)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetTexBumpParameterfvATI (GLenum pname, GLfloat *param);
' ========================================================================================
DECLARE SUB Proto_glGetTexBumpParameterfvATI (BYVAL DWORD, BYREF SINGLE)
MACRO glGetTexBumpParameterfvATI(pname, pparam)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetTexBumpParameterfvATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetTexBumpParameterfvATI(pname, pparam)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_ATI_fragment_shader)
%GL_ATI_fragment_shader       = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' GLuint glGenFragmentShadersATI (GLuint range);
' ========================================================================================
DECLARE FUNCTION Proto_glGenFragmentShadersATI (BYVAL DWORD) AS DWORD
MACRO FUNCTION glGenFragmentShadersATI(pname, pparam)
   MACROTEMP pProc, dwRes
   LOCAL pProc, dwRes AS DWORD
   pProc = wglGetProcAddress("glGenFragmentShadersATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glGenFragmentShadersATI(pname, pparam) TO dwRes
END MACRO = dwRes
' ========================================================================================

' ========================================================================================
' void glBindFragmentShaderATI (GLuint id);
' ========================================================================================
DECLARE SUB Proto_glBindFragmentShaderATI (BYVAL DWORD)
MACRO glBindFragmentShaderATI(dwid)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBindFragmentShaderATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindFragmentShaderATI(dwid)
END MACRO
' ========================================================================================

' ========================================================================================
' void glDeleteFragmentShaderATI (GLuint id);
' ========================================================================================
DECLARE SUB Proto_glDeleteFragmentShaderATI (BYVAL DWORD)
MACRO glDeleteFragmentShaderATI(dwid)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDeleteFragmentShaderATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glDeleteFragmentShaderATI(dwid)
END MACRO
' ========================================================================================

' ========================================================================================
' GLAPI void APIENTRY glBeginFragmentShaderATI (void);
' typedef void (APIENTRYP PFNGLBEGINFRAGMENTSHADERATIPROC) (void);
' ========================================================================================
DECLARE SUB Proto_glBeginFragmentShaderATI
MACRO glBeginFragmentShaderATI
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBeginFragmentShaderATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glBeginFragmentShaderATI
END MACRO
' ========================================================================================

' ========================================================================================
' void glEndFragmentShaderATI (void);
' ========================================================================================
DECLARE SUB Proto_glEndFragmentShaderATI
MACRO glEndFragmentShaderATI
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glEndFragmentShaderATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glEndFragmentShaderATI
END MACRO
' ========================================================================================

' ========================================================================================
' void glPassTexCoordATI (GLuint dst, GLuint coord, GLenum swizzle);
' ========================================================================================
DECLARE SUB Proto_glPassTexCoordATI (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glPassTexCoordATI(dst, coord, swizzle)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPassTexCoordATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glPassTexCoordATI(dst, coord, swizzle)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSampleMapATI (GLuint dst, GLuint interp, GLenum swizzle);
' ========================================================================================
DECLARE SUB Proto_glSampleMapATI (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glSampleMapATI(dst, interp, swizzle)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSampleMapATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glSampleMapATI(dst, coord, swizzle)
END MACRO
' ========================================================================================

' ========================================================================================
' void glColorFragmentOp1ATI (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod,
' GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
' ========================================================================================
DECLARE SUB Proto_glColorFragmentOp1ATI (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glColorFragmentOp1ATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod)
END MACRO
' ========================================================================================

' ========================================================================================
' void glColorFragmentOp2ATI (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod,
' GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
' ========================================================================================
DECLARE SUB Proto_glColorFragmentOp2ATI (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glColorFragmentOp2ATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod)
END MACRO
' ========================================================================================

' ========================================================================================
' void glColorFragmentOp3ATI (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod,
' GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep,
' GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
' ========================================================================================
DECLARE SUB Proto_glColorFragmentOp3ATI (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glColorFragmentOp3ATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod)
END MACRO
' ========================================================================================

' ========================================================================================
' void glAlphaFragmentOp1ATI (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1,
' GLuint arg1Rep, GLuint arg1Mod);
' ========================================================================================
DECLARE SUB Proto_glAlphaFragmentOp1ATI (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glAlphaFragmentOp1ATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod)
END MACRO
' ========================================================================================

' ========================================================================================
' void glAlphaFragmentOp2ATI (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1,
' GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
' ========================================================================================
DECLARE SUB Proto_glAlphaFragmentOp2ATI (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glAlphaFragmentOp2ATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod)
END MACRO
' ========================================================================================

' ========================================================================================
' void glAlphaFragmentOp3ATI (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1,
' GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod,
' GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
' ========================================================================================
DECLARE SUB Proto_glAlphaFragmentOp3ATI (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glAlphaFragmentOp3ATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSetFragmentShaderConstantATI (GLuint dst, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glSetFragmentShaderConstantATI (BYVAL DWORD, BYREF SINGLE)
MACRO glSetFragmentShaderConstantATI(dst, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSetFragmentShaderConstantATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glSetFragmentShaderConstantATI(dst, pvalue)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_ATI_pn_triangles)
%GL_ATI_pn_triangles = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glPNTrianglesiATI (GLenum pname, GLint param);
' ========================================================================================
DECLARE SUB Proto_glPNTrianglesiATI (BYVAL DWORD, BYVAL LONG)
MACRO glPNTrianglesiATI(pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPNTrianglesiATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glPNTrianglesiATI(pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glPNTrianglesfATI (GLenum pname, GLfloat param);
' ========================================================================================
DECLARE SUB Proto_glPNTrianglesfATI (BYVAL DWORD, BYVAL SINGLE)
MACRO glPNTrianglesfATI(pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPNTrianglesfATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glPNTrianglesfATI(pname, param)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_ATI_vertex_array_object)
%GL_ATI_vertex_array_object = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' GLuint glNewObjectBufferATI (GLsizei size, const GLvoid *pointer, GLenum usage);
' ========================================================================================
DECLARE FUNCTION Proto_glNewObjectBufferATI (BYVAL LONG, BYREF ANY, BYVAL DWORD) AS DWORD
MACRO FUNCTION glNewObjectBufferATI(isize, ppointer, dwusage)
   MACROTEMP pProc, dwRes
   LOCAL pProc, dwRes AS DWORD
   pProc = wglGetProcAddress("glNewObjectBufferATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glNewObjectBufferATI(isize, ppointer, dwusage) TO dwRes
END MACRO = dwRes
' ========================================================================================

' ========================================================================================
' GLboolean glIsObjectBufferATI (GLuint buffer);
' ========================================================================================
DECLARE FUNCTION Proto_glIsObjectBufferATI (BYVAL DWORD) AS BYTE
MACRO FUNCTION glIsObjectBufferATI(dwbuffer)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glIsObjectBufferATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glIsObjectBufferATI(dwbuffer) TO bRes
END MACRO = bRes
' ========================================================================================

' ========================================================================================
' void glUpdateObjectBufferATI (GLuint buffer, GLuint offset, GLsizei size,
' const GLvoid *pointer, GLenum preserve);
' ========================================================================================
DECLARE SUB Proto_glUpdateObjectBufferATI (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYREF ANY, BYVAL DWORD)
MACRO glUpdateObjectBufferATI(dwbuffer, dwoffset, isize, ppointer, dwpreserve)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUpdateObjectBufferATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glUpdateObjectBufferATI(dwbuffer, dwoffset, isize, ppointer, dwpreserve)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetObjectBufferfvATI (GLuint buffer, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetObjectBufferfvATI (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetObjectBufferfvATI(dwbuffer, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetObjectBufferfvATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetObjectBufferfvATI(dwbuffer, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetObjectBufferivATI (GLuint buffer, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetObjectBufferivATI (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetObjectBufferivATI(dwbuffer, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetObjectBufferivATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetObjectBufferivATI(dwbuffer, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFreeObjectBufferATI (GLuint buffer);
' ========================================================================================
DECLARE SUB Proto_glFreeObjectBufferATI (BYVAL DWORD)
MACRO glFreeObjectBufferATI(dwbuffer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFreeObjectBufferATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glFreeObjectBufferATI(dwbuffer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glArrayObjectATI (GLenum array, GLint size, GLenum type, GLsizei stride,
' GLuint buffer, GLuint offset);
' ========================================================================================
DECLARE SUB Proto_glArrayObjectATI (BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL DWORD)
MACRO glArrayObjectATI(dwarray, isize, dwtype, istride, dwbuffer, dwoffset)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glArrayObjectATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glArrayObjectATI(dwarray, isize, dwtype, istride, dwbuffer, dwoffset)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetArrayObjectfvATI (GLenum array, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetArrayObjectfvATI (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetArrayObjectfvATI(dwarray, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetArrayObjectfvATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetArrayObjectfvATI(dwarray, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetArrayObjectivATI (GLenum array, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetArrayObjectivATI (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetArrayObjectivATI(dwarray, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetArrayObjectivATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetArrayObjectivATI(dwarray, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVariantArrayObjectATI (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
' ========================================================================================
DECLARE SUB Proto_glVariantArrayObjectATI (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL DWORD)
MACRO glVariantArrayObjectATI(dwid, dwtype, istride, dwbuffer, dwoffset)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVariantArrayObjectATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVariantArrayObjectATI(dwid, dwtype, istride, dwbuffer, dwoffset)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetVariantArrayObjectfvATI (GLuint id, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetVariantArrayObjectfvATI (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetVariantArrayObjectfvATI(dwid, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetVariantArrayObjectfvATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetVariantArrayObjectfvATI(dwid, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetVariantArrayObjectivATI (GLuint id, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetVariantArrayObjectivATI (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetVariantArrayObjectivATI(dwid, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetVariantArrayObjectivATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetVariantArrayObjectivATI(dwid, pname, pparams)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_vertex_shader)
%GL_EXT_vertex_shader = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glBeginVertexShaderEXT (void);
' ========================================================================================
DECLARE SUB Proto_glBeginVertexShaderEXT
MACRO glBeginVertexShaderEXT
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBeginVertexShaderEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBeginVertexShaderEXT
END MACRO
' ========================================================================================

' ========================================================================================
' void glEndVertexShaderEXT (void);
' ========================================================================================
DECLARE SUB Proto_glEndVertexShaderEXT
MACRO glEndVertexShaderEXT
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glEndVertexShaderEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glEndVertexShaderEXT
END MACRO
' ========================================================================================

' ========================================================================================
' void glBindVertexShaderEXT (GLuint id);
' ========================================================================================
DECLARE SUB Proto_glBindVertexShaderEXT (BYVAL DWORD)
MACRO glBindVertexShaderEXT(dwid)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBindVertexShaderEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindVertexShaderEXT(dwid)
END MACRO
' ========================================================================================

' ========================================================================================
' GLuint glGenVertexShadersEXT (GLuint range);
' ========================================================================================
DECLARE FUNCTION Proto_glGenVertexShadersEXT (BYVAL DWORD) AS DWORD
MACRO FUNCTION glGenVertexShadersEXT(dwrange)
   MACROTEMP pProc, dwRes
   LOCAL pProc, dwRes AS DWORD
   pProc = wglGetProcAddress("glGenVertexShadersEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGenVertexShadersEXT(dwrange) TO dwRes
END MACRO = dwRes
' ========================================================================================

' ========================================================================================
' void glDeleteVertexShaderEXT (GLuint id);
' ========================================================================================
DECLARE SUB Proto_glDeleteVertexShaderEXT (BYVAL DWORD)
MACRO glDeleteVertexShaderEXT(dwid)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDeleteVertexShaderEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glDeleteVertexShaderEXT(dwid)
END MACRO
' ========================================================================================

' ========================================================================================
' void glShaderOp1EXT (GLenum op, GLuint res, GLuint arg1);
' ========================================================================================
DECLARE SUB Proto_glShaderOp1EXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glShaderOp1EXT(op, dwres, arg1)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glShaderOp1EXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glShaderOp1EXT(op, dwres, arg1)
END MACRO
' ========================================================================================

' ========================================================================================
' void glShaderOp2EXT (GLenum op, GLuint res, GLuint arg1, GLuint arg2);
' ========================================================================================
DECLARE SUB Proto_glShaderOp2EXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glShaderOp2EXT(op, dwres, arg1, arg2)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glShaderOp2EXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glShaderOp2EXT(op, dwres, arg1, arg2)
END MACRO
' ========================================================================================

' ========================================================================================
' void glShaderOp3EXT (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
' ========================================================================================
DECLARE SUB Proto_glShaderOp3EXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glShaderOp3EXT(op, dwres, arg1, arg2, arg3)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glShaderOp3EXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glShaderOp3EXT(op, dwres, arg1, arg2, arg3)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSwizzleEXT (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
' ========================================================================================
DECLARE SUB Proto_glSwizzleEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glSwizzleEXT(dwres, dwin, outX, outY, outZ, outW)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSwizzleEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glSwizzleEXT(dwres, dwin, outX, outY, outZ, outW)
END MACRO
' ========================================================================================

' ========================================================================================
' void glWriteMaskEXT (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
' ========================================================================================
DECLARE SUB Proto_glWriteMaskEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glWriteMaskEXT(dwres, dwin, outX, outY, outZ, outW)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glWriteMaskEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glWriteMaskEXT(dwres, dwin, outX, outY, outZ, outW)
END MACRO
' ========================================================================================

' ========================================================================================
' void glInsertComponentEXT (GLuint res, GLuint src, GLuint num);
' ========================================================================================
DECLARE SUB Proto_glInsertComponentEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glInsertComponentEXT(dwres, dwsrc, dwnum)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glInsertComponentEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glInsertComponentEXT(dwres, dwsrc, dwnum)
END MACRO
' ========================================================================================

' ========================================================================================
' void glExtractComponentEXT (GLuint res, GLuint src, GLuint num);
' ========================================================================================
DECLARE SUB Proto_glExtractComponentEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glExtractComponentEXT(dwres, dwsrc, dwnum)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glExtractComponentEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glExtractComponentEXT(dwres, dwsrc, dwnum)
END MACRO
' ========================================================================================

' ========================================================================================
' GLuint glGenSymbolsEXT (GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
' ========================================================================================
DECLARE FUNCTION Proto_glGenSymbolsEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD) AS DWORD
MACRO FUNCTION glGenSymbolsEXT(dwdatatype, dwstoragetype, dwrange, dwcomponents)
   MACROTEMP pProc, dwRes
   LOCAL pProc, dwRes AS DWORD
   pProc = wglGetProcAddress("glGenSymbolsEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGenSymbolsEXT(dwdatatype, dwstoragetype, dwrange, dwcomponents) TO dwRes
END MACRO = dwRes
' ========================================================================================

' ========================================================================================
' void glSetInvariantEXT (GLuint id, GLenum type, const GLvoid *addr);
' ========================================================================================
DECLARE SUB Proto_glSetInvariantEXT (BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glSetInvariantEXT(dwid, dwtype, paddr)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSetInvariantEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glSetInvariantEXT(dwid, dwtype, paddr)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSetLocalConstantEXT (GLuint id, GLenum type, const GLvoid *addr);
' ========================================================================================
DECLARE SUB Proto_glSetLocalConstantEXT (BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glSetLocalConstantEXT(dwid, dwtype, paddr)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSetLocalConstantEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glSetLocalConstantEXT(dwid, dwtype, paddr)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVariantbvEXT (GLuint id, const GLbyte *addr);
' ========================================================================================
DECLARE SUB Proto_glVariantbvEXT (BYVAL DWORD, BYREF BYTE)
MACRO glVariantbvEXT(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVariantbvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVariantbvEXT(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVariantsvEXT (GLuint id, const GLshort *addr);
' ========================================================================================
DECLARE SUB Proto_glVariantsvEXT (BYVAL DWORD, BYREF INTEGER)
MACRO glVariantsvEXT(dwid, paddr)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVariantsvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVariantsvEXT(dwid, paddr)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVariantivEXT (GLuint id, const GLint *addr);
' ========================================================================================
DECLARE SUB Proto_glVariantivEXT (BYVAL DWORD, BYREF LONG)
MACRO glVariantivEXT(dwid, paddr)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVariantivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVariantivEXT(dwid, paddr)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVariantfvEXT (GLuint id, const GLfloat *addr);
' ========================================================================================
DECLARE SUB Proto_glVariantfvEXT (BYVAL DWORD, BYREF SINGLE)
MACRO glVariantfvEXT(dwid, paddr)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVariantfvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVariantfvEXT(dwid, paddr)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVariantdvEXT (GLuint id, const GLdouble *addr);
' ========================================================================================
DECLARE SUB Proto_glVariantdvEXT (BYVAL DWORD, BYREF DOUBLE)
MACRO glVariantdvEXT(dwid, paddr)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVariantdvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVariantdvEXT(dwid, paddr)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVariantubvEXT (GLuint id, const GLubyte *addr);
' ========================================================================================
DECLARE SUB Proto_glVariantubvEXT (BYVAL DWORD, BYREF BYTE)
MACRO glVariantubvEXT(dwid, paddr)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVariantubvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVariantubvEXT(dwid, paddr)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVariantusvEXT (GLuint id, const GLushort *addr);
' ========================================================================================
DECLARE SUB Proto_glVariantusvEXT (BYVAL DWORD, BYREF WORD)
MACRO glVariantusvEXT(dwid, paddr)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVariantusvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVariantusvEXT(dwid, paddr)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVariantuivEXT (GLuint id, const GLuint *addr);
' ========================================================================================
DECLARE SUB Proto_glVariantuivEXT (BYVAL DWORD, BYREF DWORD)
MACRO glVariantuivEXT(dwid, paddr)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVariantuivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVariantuivEXT(dwid, paddr)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVariantPointerEXT (GLuint id, GLenum type, GLuint stride, const GLvoid *addr);
' ========================================================================================
DECLARE SUB Proto_glVariantPointerEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glVariantPointerEXT(dwid, dwtype, istride, paddr)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVariantPointerEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVariantPointerEXT(dwid, dwtype, istride, paddr)
END MACRO
' ========================================================================================

' ========================================================================================
' void glEnableVariantClientStateEXT (GLuint id);
' ========================================================================================
DECLARE SUB Proto_glEnableVariantClientStateEXT (BYVAL DWORD)
MACRO glEnableVariantClientStateEXT(dwid)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glEnableVariantClientStateEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glEnableVariantClientStateEXT(dwid)
END MACRO
' ========================================================================================

' ========================================================================================
' void glDisableVariantClientStateEXT (GLuint id);
' ========================================================================================
DECLARE SUB Proto_glDisableVariantClientStateEXT (BYVAL DWORD)
MACRO glDisableVariantClientStateEXT(dwid)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDisableVariantClientStateEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glDisableVariantClientStateEXT(dwid)
END MACRO
' ========================================================================================

' ========================================================================================
' GLuint glBindLightParameterEXT (GLenum light, GLenum value);
' ========================================================================================
DECLARE FUNCTION Proto_glBindLightParameterEXT (BYVAL DWORD, BYVAL DWORD) AS DWORD
MACRO FUNCTION glBindLightParameterEXT(dwlight, dwvalue)
   MACROTEMP pProc, dwRes
   LOCAL pProc, dwRes AS DWORD
   pProc = wglGetProcAddress("glBindLightParameterEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindLightParameterEXT(dwlight, dwvalue) TO dwRes
END MACRO = dwRes
' ========================================================================================

' ========================================================================================
' GLuint glBindMaterialParameterEXT (GLenum face, GLenum value);
' ========================================================================================
DECLARE FUNCTION Proto_glBindMaterialParameterEXT (BYVAL DWORD, BYVAL DWORD) AS DWORD
MACRO FUNCTION glBindMaterialParameterEXT(dwface, dwvalue)
   MACROTEMP pProc, dwRes
   LOCAL pProc, dwRes AS DWORD
   pProc = wglGetProcAddress("glBindMaterialParameterEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindMaterialParameterEXT(dwface, dwvalue) TO dwRes
END MACRO = dwRes
' ========================================================================================

' ========================================================================================
' GLuint glBindTexGenParameterEXT (GLenum unit, GLenum coord, GLenum value);
' ========================================================================================
DECLARE FUNCTION Proto_glBindTexGenParameterEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD) AS DWORD
MACRO FUNCTION glBindTexGenParameterEXT(dwunit, dwcoord, dwvalue)
   MACROTEMP pProc, dwRes
   LOCAL pProc, dwRes AS DWORD
   pProc = wglGetProcAddress("glBindTexGenParameterEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindTexGenParameterEXT(dwunit, dwcoord, dwvalue) TO dwRes
END MACRO = dwRes
' ========================================================================================

' ========================================================================================
' GLuint glBindTextureUnitParameterEXT (GLenum unit, GLenum value);
' ========================================================================================
DECLARE FUNCTION Proto_glBindTextureUnitParameterEXT (BYVAL DWORD, BYVAL DWORD) AS DWORD
MACRO FUNCTION glBindTextureUnitParameterEXT(dwunit, dwvalue)
   MACROTEMP pProc, dwRes
   LOCAL pProc, dwRes AS DWORD
   pProc = wglGetProcAddress("glBindTextureUnitParameterEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindTextureUnitParameterEXT(dwunit, dwvalue) TO dwRes
END MACRO = dwRes
' ========================================================================================

' ========================================================================================
' GLuint glBindParameterEXT (GLenum value);
' ========================================================================================
DECLARE FUNCTION Proto_glBindParameterEXT (BYVAL DWORD) AS DWORD
MACRO FUNCTION glBindParameterEXT(dwvalue)
   MACROTEMP pProc, dwRes
   LOCAL pProc, dwRes AS DWORD
   pProc = wglGetProcAddress("glBindParameterEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindParameterEXT(dwvalue) TO dwRes
END MACRO = dwRes
' ========================================================================================

' ========================================================================================
' GLboolean glIsVariantEnabledEXT (GLuint id, GLenum cap);
' ========================================================================================
DECLARE FUNCTION Proto_glIsVariantEnabledEXT (BYVAL DWORD, BYVAL DWORD) AS BYTE
MACRO FUNCTION glIsVariantEnabledEXT(dwid, dwcap)
   MACROTEMP pProc, bRes
   LOCAL pProc, bRes AS DWORD
   pProc = wglGetProcAddress("glIsVariantEnabledEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glIsVariantEnabledEXT(dwid, dwcap) TO bRes
END MACRO = bRes
' ========================================================================================

' ========================================================================================
' void glGetVariantBooleanvEXT (GLuint id, GLenum value, GLboolean *data);
' ========================================================================================
DECLARE SUB Proto_glGetVariantBooleanvEXT (BYVAL DWORD, BYVAL DWORD, BYREF BYTE)
MACRO glGetVariantBooleanvEXT(dwid, dwvalue, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetVariantBooleanvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetVariantBooleanvEXT(dwid, dwvalue, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetVariantIntegervEXT (GLuint id, GLenum value, GLint *data);
' ========================================================================================
DECLARE SUB Proto_glGetVariantIntegervEXT (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetVariantIntegervEXT(dwid, dwvalue, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetVariantIntegervEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetVariantIntegervEXT(dwid, dwvalue, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetVariantFloatvEXT (GLuint id, GLenum value, GLfloat *data);
' ========================================================================================
DECLARE SUB Proto_glGetVariantFloatvEXT (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetVariantFloatvEXT(dwid, dwvalue, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetVariantFloatvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetVariantFloatvEXT(dwid, dwvalue, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetVariantPointervEXT (GLuint id, GLenum value, GLvoid* *data);
' ========================================================================================
DECLARE SUB Proto_glGetVariantPointervEXT (BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glGetVariantPointervEXT(dwid, dwvalue, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetVariantPointervEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetVariantPointervEXT(dwid, dwvalue, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetInvariantBooleanvEXT (GLuint id, GLenum value, GLboolean *data);
' ========================================================================================
DECLARE SUB Proto_glGetInvariantBooleanvEXT (BYVAL DWORD, BYVAL DWORD, BYREF BYTE)
MACRO glGetInvariantBooleanvEXT(dwid, dwvalue, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetInvariantBooleanvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetInvariantBooleanvEXT(dwid, dwvalue, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetInvariantIntegervEXT (GLuint id, GLenum value, GLint *data);
' ========================================================================================
DECLARE SUB Proto_glGetInvariantIntegervEXT (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetInvariantIntegervEXT(dwid, dwvalue, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetInvariantIntegervEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetInvariantIntegervEXT(dwid, dwvalue, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetInvariantFloatvEXT (GLuint id, GLenum value, GLfloat *data);
' ========================================================================================
DECLARE SUB Proto_glGetInvariantFloatvEXT (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetInvariantFloatvEXT(dwid, dwvalue, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetInvariantFloatvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetInvariantFloatvEXT(dwid, dwvalue, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetLocalConstantBooleanvEXT (GLuint id, GLenum value, GLboolean *data);
' ========================================================================================
DECLARE SUB Proto_glGetLocalConstantBooleanvEXT (BYVAL DWORD, BYVAL DWORD, BYREF BYTE)
MACRO glGetLocalConstantBooleanvEXT(dwid, dwvalue, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetLocalConstantBooleanvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetLocalConstantBooleanvEXT(dwid, dwvalue, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetLocalConstantIntegervEXT (GLuint id, GLenum value, GLint *data);
' ========================================================================================
DECLARE SUB Proto_glGetLocalConstantIntegervEXT (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetLocalConstantIntegervEXT(dwid, dwvalue, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetLocalConstantIntegervEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetLocalConstantIntegervEXT(dwid, dwvalue, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetLocalConstantFloatvEXT (GLuint id, GLenum value, GLfloat *data);
' ========================================================================================
DECLARE SUB Proto_glGetLocalConstantFloatvEXT (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetLocalConstantFloatvEXT(dwid, dwvalue, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetLocalConstantFloatvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetLocalConstantFloatvEXT(dwid, dwvalue, pdata)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF

#IF NOT %DEF(%GL_ATI_vertex_streams)
%GL_ATI_vertex_streams       = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glVertexStream1sATI (GLenum stream, GLshort x);
' ========================================================================================
DECLARE SUB Proto_glVertexStream1sATI (BYVAL DWORD, BYVAL INTEGER)
MACRO glVertexStream1sATI(dwstream, x)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream1sATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream1sATI(dwstream, x)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream1svATI (GLenum stream, const GLshort *coords);
' ========================================================================================
DECLARE SUB Proto_glVertexStream1svATI (BYVAL DWORD, BYREF INTEGER)
MACRO glVertexStream1svATI(dwstream, pcoords)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream1svATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream1svATI(dwstream, pcoords)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream1iATI (GLenum stream, GLint x);
' ========================================================================================
DECLARE SUB Proto_glVertexStream1iATI (BYVAL DWORD, BYVAL LONG)
MACRO glVertexStream1iATI(dwstream, x)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream1iATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream1iATI(dwstream, x)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream1ivATI (GLenum stream, const GLint *coords);
' ========================================================================================
DECLARE SUB Proto_glVertexStream1ivATI (BYVAL DWORD, BYREF LONG)
MACRO glVertexStream1ivATI(dwstream, pcoords)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream1ivATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream1ivATI(dwstream, pcoords)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream1fATI (GLenum stream, GLfloat x);
' ========================================================================================
DECLARE SUB Proto_glVertexStream1fATI (BYVAL DWORD, BYVAL SINGLE)
MACRO glVertexStream1fATI(dwstream, x)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream1fATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream1fATI(dwstream, x)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream1fvATI (GLenum stream, const GLfloat *coords);
' ========================================================================================
DECLARE SUB Proto_glVertexStream1fvATI (BYVAL DWORD, BYREF SINGLE)
MACRO glVertexStream1fvATI(dwstream, pcoords)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream1fvATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream1fvATI(dwstream, pcoords)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream1dATI (GLenum stream, GLdouble x);
' ========================================================================================
DECLARE SUB Proto_glVertexStream1dATI (BYVAL DWORD, BYVAL DOUBLE)
MACRO glVertexStream1dATI(dwstream, x)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream1dATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream1dATI(dwstream, x)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream1dvATI (GLenum stream, const GLdouble *coords);
' ========================================================================================
DECLARE SUB Proto_glVertexStream1dvATI (BYVAL DWORD, BYREF DOUBLE)
MACRO glVertexStream1dvATI(dwstream, pcoords)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream1dvATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream1dvATI(dwstream, pcoords)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream2sATI (GLenum stream, GLshort x, GLshort y);
' ========================================================================================
DECLARE SUB Proto_glVertexStream2sATI (BYVAL DWORD, BYVAL INTEGER, BYVAL INTEGER)
MACRO glVertexStream2sATI(dwstream, x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream2sATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream2sATI(dwstream, x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream2svATI (GLenum stream, const GLshort *coords);
' ========================================================================================
DECLARE SUB Proto_glVertexStream2svATI (BYVAL DWORD, BYREF INTEGER)
MACRO glVertexStream2svATI(dwstream, pcoords)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream2svATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream2svATI(dwstream, pcoords)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream2iATI (GLenum stream, GLint x, GLint y);
' ========================================================================================
DECLARE SUB Proto_glVertexStream2iATI (BYVAL DWORD, BYVAL LONG, BYVAL LONG)
MACRO glVertexStream2iATI(dwstream, x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream2iATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream2iATI(dwstream, x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream2ivATI (GLenum stream, const GLint *coords);
' ========================================================================================
DECLARE SUB Proto_glVertexStream2ivATI (BYVAL DWORD, BYREF LONG)
MACRO glVertexStream2ivATI(dwstream, pcoords)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream2ivATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream2ivATI(dwstream, pcoords)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream2fATI (GLenum stream, GLfloat x, GLfloat y);
' ========================================================================================
DECLARE SUB Proto_glVertexStream2fATI (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE)
MACRO glVertexStream2fATI(dwstream, x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream2fATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream2fATI(dwstream, x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream2fvATI (GLenum stream, const GLfloat *coords);
' ========================================================================================
DECLARE SUB Proto_glVertexStream2fvATI (BYVAL DWORD, BYREF SINGLE)
MACRO glVertexStream2fvATI(dwstream, pcoords)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream2fvATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream2fvATI(dwstream, pcoords)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream2dATI (GLenum stream, GLdouble x, GLdouble y);
' ========================================================================================
DECLARE SUB Proto_glVertexStream2dATI (BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glVertexStream2dATI(dwstream, x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream2dATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream2dATI(dwstream, x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream2dvATI (GLenum stream, const GLdouble *coords);
' ========================================================================================
DECLARE SUB Proto_glVertexStream2dvATI (BYVAL DWORD, BYREF DOUBLE)
MACRO glVertexStream2dvATI(dwstream, pcoords)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream2dvATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream2dvATI(dwstream, pcoords)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream3sATI (GLenum stream, GLshort x, GLshort y, GLshort z);
' ========================================================================================
DECLARE SUB Proto_glVertexStream3sATI (BYVAL DWORD, BYVAL INTEGER, BYVAL INTEGER, BYVAL INTEGER)
MACRO glVertexStream3sATI(dwstream, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream3sATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream3sATI(dwstream, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream3svATI (GLenum stream, const GLshort *coords);
' ========================================================================================
DECLARE SUB Proto_glVertexStream3svATI (BYVAL DWORD, BYREF INTEGER)
MACRO glVertexStream3svATI(dwstream, pcoords)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream3svATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream3svATI(dwstream, pcoords)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream3iATI (GLenum stream, GLint x, GLint y, GLint z);
' ========================================================================================
DECLARE SUB Proto_glVertexStream3iATI (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glVertexStream3iATI(dwstream, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream3iATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream3iATI(dwstream, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream3ivATI (GLenum stream, const GLint *coords);
' ========================================================================================
DECLARE SUB Proto_glVertexStream3ivATI (BYVAL DWORD, BYREF LONG)
MACRO glVertexStream3ivATI(dwstream, pcoords)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream3ivATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream3ivATI(dwstream, pcoords)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream3fATI (GLenum stream, GLfloat x, GLfloat y, GLfloat z);
' ========================================================================================
DECLARE SUB Proto_glVertexStream3fATI (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glVertexStream3fATI(dwstream, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream3fATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream3fATI(dwstream, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream3fvATI (GLenum stream, const GLfloat *coords);
' ========================================================================================
DECLARE SUB Proto_glVertexStream3fvATI (BYVAL DWORD, BYREF SINGLE)
MACRO glVertexStream3fvATI(dwstream, pcoords)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream3fvATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream3fvATI(dwstream, pcoords)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream3dATI (GLenum stream, GLdouble x, GLdouble y, GLdouble z);
' ========================================================================================
DECLARE SUB Proto_glVertexStream3dATI (BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glVertexStream3dATI(dwstream, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream3dATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream3dATI(dwstream, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream3dvATI (GLenum stream, const GLdouble *coords);
' ========================================================================================
DECLARE SUB Proto_glVertexStream3dvATI (BYVAL DWORD, BYREF DOUBLE)
MACRO glVertexStream3dvATI(dwstream, pcoords)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream3dvATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream3dvATI(dwstream, pcoords)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream4sATI (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
' ========================================================================================
DECLARE SUB Proto_glVertexStream4sATI (BYVAL DWORD, BYVAL INTEGER, BYVAL INTEGER, BYVAL INTEGER, BYVAL INTEGER)
MACRO glVertexStream4sATI(dwstream, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream4sATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream4sATI(dwstream, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream4svATI (GLenum stream, const GLshort *coords);
' ========================================================================================
DECLARE SUB Proto_glVertexStream4svATI (BYVAL DWORD, BYREF INTEGER)
MACRO glVertexStream4svATI(dwstream, pcoords)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream4svATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream4svATI(dwstream, pcoords)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream4iATI (GLenum stream, GLint x, GLint y, GLint z, GLint w);
' ========================================================================================
DECLARE SUB Proto_glVertexStream4iATI (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glVertexStream4iATI(dwstream, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream4iATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream4iATI(dwstream, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream4ivATI (GLenum stream, const GLint *coords);
' ========================================================================================
DECLARE SUB Proto_glVertexStream4ivATI (BYVAL DWORD, BYREF LONG)
MACRO glVertexStream4ivATI(dwstream, pcoords)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream4ivATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream4ivATI(dwstream, pcoords)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream4fATI (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
' ========================================================================================
DECLARE SUB Proto_glVertexStream4fATI (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glVertexStream4fATI(dwstream, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream4fATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream4fATI(dwstream, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream4fvATI (GLenum stream, const GLfloat *coords);
' ========================================================================================
DECLARE SUB Proto_glVertexStream4fvATI (BYVAL DWORD, BYREF SINGLE)
MACRO glVertexStream4fvATI(dwstream, pcoords)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream4fvATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream4fvATI(dwstream, pcoords)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream4dATI (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
' ========================================================================================
DECLARE SUB Proto_glVertexStream4dATI (BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glVertexStream4dATI(dwstream, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream4dATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream4dATI(dwstream, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexStream4dvATI (GLenum stream, const GLdouble *coords);
' ========================================================================================
DECLARE SUB Proto_glVertexStream4dvATI (BYVAL DWORD, BYREF DOUBLE)
MACRO glVertexStream4dvATI(dwstream, pcoords)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexStream4dvATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexStream4dvATI(dwstream, pcoords)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNormalStream3bATI (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
' ========================================================================================
DECLARE SUB Proto_glNormalStream3bATI (BYVAL DWORD, BYVAL BYTE, BYVAL BYTE, BYVAL BYTE)
MACRO glNormalStream3bATI(dwstream, nx, ny, nz)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNormalStream3bATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glNormalStream3bATI(dwstream, nx, ny, nz)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNormalStream3bvATI (GLenum stream, const GLbyte *coords);
' ========================================================================================
DECLARE SUB Proto_glNormalStream3bvATI (BYVAL DWORD, BYREF BYTE)
MACRO glNormalStream3bvATI(dwstream, pcoords)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNormalStream3bvATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glNormalStream3bvATI(dwstream, pcoords)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNormalStream3sATI (GLenum stream, GLshort nx, GLshort ny, GLshort nz);
' ========================================================================================
DECLARE SUB Proto_glNormalStream3sATI (BYVAL DWORD, BYVAL INTEGER, BYVAL INTEGER, BYVAL INTEGER)
MACRO glNormalStream3sATI(dwstream, nx, ny, nz)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNormalStream3sATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glNormalStream3sATI(dwstream, nx, ny, nz)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNormalStream3svATI (GLenum stream, const GLshort *coords);
' ========================================================================================
DECLARE SUB Proto_glNormalStream3svATI (BYVAL DWORD, BYREF INTEGER)
MACRO glNormalStream3svATI(dwstream, pcoords)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNormalStream3svATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glNormalStream3svATI(dwstream, pcoords)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNormalStream3iATI (GLenum stream, GLint nx, GLint ny, GLint nz);
' ========================================================================================
DECLARE SUB Proto_glNormalStream3iATI (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glNormalStream3iATI(dwstream, nx, ny, nz)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNormalStream3iATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glNormalStream3iATI(dwstream, nx, ny, nz)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNormalStream3ivATI (GLenum stream, const GLint *coords);
' ========================================================================================
DECLARE SUB Proto_glNormalStream3ivATI (BYVAL DWORD, BYREF LONG)
MACRO glNormalStream3ivATI(dwstream, pcoords)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNormalStream3ivATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glNormalStream3ivATI(dwstream, pcoords)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNormalStream3fATI (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
' ========================================================================================
DECLARE SUB Proto_glNormalStream3fATI (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glNormalStream3fATI(dwstream, nx, ny, nz)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNormalStream3fATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glNormalStream3fATI(dwstream, nx, ny, nz)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNormalStream3fvATI (GLenum stream, const GLfloat *coords);
' ========================================================================================
DECLARE SUB Proto_glNormalStream3fvATI (BYVAL DWORD, BYREF SINGLE)
MACRO glNormalStream3fvATI(dwstream, pcoords)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNormalStream3fvATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glNormalStream3fvATI(dwstream, pcoords)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNormalStream3dATI (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
' ========================================================================================
DECLARE SUB Proto_glNormalStream3dATI (BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glNormalStream3dATI(dwstream, nx, ny, nz)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNormalStream3dATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glNormalStream3dATI(dwstream, nx, ny, nz)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNormalStream3dvATI (GLenum stream, const GLdouble *coords);
' ========================================================================================
DECLARE SUB Proto_glNormalStream3dvATI (BYVAL DWORD, BYREF DOUBLE)
MACRO glNormalStream3dvATI(dwstream, pcoords)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNormalStream3dvATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glNormalStream3dvATI(dwstream, pcoords)
END MACRO
' ========================================================================================

' ========================================================================================
' void glClientActiveVertexStreamATI (GLenum stream);
' ========================================================================================
DECLARE SUB Proto_glClientActiveVertexStreamATI (BYVAL DWORD)
MACRO glClientActiveVertexStreamATI(dwstream)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glClientActiveVertexStreamATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glClientActiveVertexStreamATI(dwstream)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexBlendEnviATI (GLenum pname, GLint param);
' ========================================================================================
DECLARE SUB Proto_glVertexBlendEnviATI (BYVAL DWORD, BYVAL LONG)
MACRO glVertexBlendEnviATI(pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexBlendEnviATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexBlendEnviATI(pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexBlendEnvfATI (GLenum pname, GLfloat param);
' ========================================================================================
DECLARE SUB Proto_glVertexBlendEnvfATI (BYVAL DWORD, BYVAL SINGLE)
MACRO glVertexBlendEnvfATI(pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexBlendEnvfATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexBlendEnvfATI(pname, param)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_ATI_element_array)
%GL_ATI_element_array = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glElementPointerATI (GLenum type, const GLvoid *pointer);
' ========================================================================================
DECLARE SUB Proto_glElementPointerATI (BYVAL DWORD, BYREF ANY)
MACRO glElementPointerATI(pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glElementPointerATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glElementPointerATI(pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glDrawElementArrayATI (GLenum mode, GLsizei count);
' ========================================================================================
DECLARE SUB Proto_glDrawElementArrayATI (BYVAL DWORD, BYVAL LONG)
MACRO glDrawElementArrayATI(dwmode, icount)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDrawElementArrayATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glDrawElementArrayATI(dwmode, icount)
END MACRO
' ========================================================================================

' ========================================================================================
' void glDrawRangeElementArrayATI (GLenum mode, GLuint start, GLuint end, GLsizei count);
' ========================================================================================
DECLARE SUB Proto_glDrawRangeElementArrayATI (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG)
MACRO glDrawRangeElementArrayATI(dwmode, dwstart, dwend, icount)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDrawRangeElementArrayATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glDrawRangeElementArrayATI(dwmode, dwstart, dwend, icount)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_SUN_mesh_array)
%GL_SUN_mesh_array = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glDrawMeshArraysSUN (GLenum mode, GLint first, GLsizei count, GLsizei width);
' ========================================================================================
DECLARE SUB Proto_glDrawMeshArraysSUN (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glDrawMeshArraysSUN(dwmode, ifirst, icount, iwidth)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDrawMeshArraysSUN")
   IF pProc THEN CALL DWORD pProc USING Proto_glDrawMeshArraysSUN(dwmode, ifirst, icount, iwidth)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_SUN_slice_accum)
%GL_SUN_slice_accum = 1
#ENDIF

#IF NOT %DEF(%GL_NV_multisample_filter_hint)
%GL_NV_multisample_filter_hint = 1
#ENDIF

#IF NOT %DEF(%GL_NV_depth_clamp)
%GL_NV_depth_clamp = 1
#ENDIF


#IF NOT %DEF(%GL_NV_occlusion_query)
%GL_NV_occlusion_query = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glGenOcclusionQueriesNV (GLsizei n, GLuint *ids);
' ========================================================================================
DECLARE SUB Proto_glGenOcclusionQueriesNV (BYVAL LONG, BYREF DWORD)
MACRO glGenOcclusionQueriesNV(n, pids)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGenOcclusionQueriesNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGenOcclusionQueriesNV(n, pids)
END MACRO
' ========================================================================================

' ========================================================================================
' void glDeleteOcclusionQueriesNV (GLsizei n, const GLuint *ids);
' ========================================================================================
DECLARE SUB Proto_glDeleteOcclusionQueriesNV (BYVAL LONG, BYREF DWORD)
MACRO glDeleteOcclusionQueriesNV(n, pids)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDeleteOcclusionQueriesNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glDeleteOcclusionQueriesNV(n, pids)
END MACRO
' ========================================================================================

' ========================================================================================
' GLboolean glIsOcclusionQueryNV (GLuint id);
' ========================================================================================
DECLARE FUNCTION Proto_glIsOcclusionQueryNV (BYVAL DWORD) AS BYTE
MACRO FUNCTION glIsOcclusionQueryNV(dwid)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glIsOcclusionQueryNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glIsOcclusionQueryNV(dwid) TO bRes
END MACRO = bRes
' ========================================================================================

' ========================================================================================
' void glBeginOcclusionQueryNV (GLuint id)
' ========================================================================================
DECLARE SUB Proto_glBeginOcclusionQueryNV (BYVAL DWORD)
MACRO glBeginOcclusionQueryNV(dwid)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBeginOcclusionQueryNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glBeginOcclusionQueryNV(dwid)
END MACRO
' ========================================================================================

' ========================================================================================
' void glEndOcclusionQueryNV (void);
' ========================================================================================
DECLARE SUB Proto_glEndOcclusionQueryNV
MACRO glEndOcclusionQueryNV
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glEndOcclusionQueryNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glEndOcclusionQueryNV
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetOcclusionQueryivNV (GLuint id, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetOcclusionQueryivNV (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetOcclusionQueryivNV(dwid, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetOcclusionQueryivNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetOcclusionQueryivNV(dwid, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetOcclusionQueryuivNV (GLuint id, GLenum pname, GLuint *params);
' ========================================================================================
DECLARE SUB Proto_glGetOcclusionQueryuivNV (BYVAL DWORD, BYVAL DWORD, BYREF DWORD)
MACRO glGetOcclusionQueryuivNV(dwid, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetOcclusionQueryuivNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetOcclusionQueryuivNV(dwid, pname, pparams)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF

#IF NOT %DEF(%GL_NV_point_sprite)
%GL_NV_point_sprite = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glPointParameteriNV (GLenum pname, GLint param);
' ========================================================================================
DECLARE SUB Proto_glPointParameteriNV (BYVAL DWORD, BYVAL LONG)
MACRO glPointParameteriNV(pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPointParameteriNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glPointParameteriNV(pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glPointParameterivNV (GLenum pname, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glPointParameterivNV (BYVAL DWORD, BYREF LONG)
MACRO glPointParameterivNV(pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPointParameterivNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glPointParameterivNV(pname, pparams)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_NV_texture_shader3)
%GL_NV_texture_shader3 = 1
#ENDIF

#IF NOT %DEF(%GL_NV_vertex_program1_1)
%GL_NV_vertex_program1_1 = 1
#ENDIF

#IF NOT %DEF(%GL_EXT_shadow_funcs)
%GL_EXT_shadow_funcs = 1
#ENDIF


#IF NOT %DEF(%GL_EXT_stencil_two_side)
%GL_EXT_stencil_two_side = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' GLAPI void APIENTRY glActiveStencilFaceEXT (GLenum);
' typedef void (APIENTRYP PFNGLACTIVESTENCILFACEEXTPROC) (GLenum face);
' ========================================================================================
DECLARE SUB Proto_glActiveStencilFaceEXT (BYVAL DWORD)
MACRO glActiveStencilFaceEXT(dwface)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glActiveStencilFaceEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glActiveStencilFaceEXT(dwface)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_ATI_text_fragment_shader)
%GL_ATI_text_fragment_shader = 1
#ENDIF

#IF NOT %DEF(%GL_APPLE_client_storage)
%GL_APPLE_client_storage = 1
#ENDIF

#IF NOT %DEF(%GL_APPLE_element_array)
%GL_APPLE_element_array = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glElementPointerAPPLE (GLenum type, const GLvoid *pointer);
' ========================================================================================
DECLARE SUB Proto_glElementPointerAPPLE (BYVAL DWORD, BYREF ANY)
MACRO glElementPointerAPPLE(dwtype, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glElementPointerAPPLE")
   IF pProc THEN CALL DWORD pProc USING Proto_glElementPointerAPPLE(dwtype, ppointer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glDrawElementArrayAPPLE (GLenum mode, GLint first, GLsizei count);
' ========================================================================================
DECLARE SUB Proto_glDrawElementArrayAPPLE (BYVAL DWORD, BYVAL LONG, BYVAL LONG)
MACRO glDrawElementArrayAPPLE(dwmode, ifirst, icount)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDrawElementArrayAPPLE")
   IF pProc THEN CALL DWORD pProc USING Proto_glDrawElementArrayAPPLE(dwmode, ifirst, icount)
END MACRO
' ========================================================================================

' ========================================================================================
' void glDrawRangeElementArrayAPPLE (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
' ========================================================================================
DECLARE SUB Proto_glDrawRangeElementArrayAPPLE (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG)
MACRO glDrawRangeElementArrayAPPLE(dwmode, dwstart, dwend, ifirst, icount)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDrawRangeElementArrayAPPLE")
   IF pProc THEN CALL DWORD pProc USING Proto_glDrawRangeElementArrayAPPLE(dwmode, dwstart, dwend, ifirst, icount)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiDrawElementArrayAPPLE (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
' ========================================================================================
DECLARE SUB Proto_glMultiDrawElementArrayAPPLE (BYVAL DWORD, BYREF LONG, BYREF LONG, BYVAL LONG)
MACRO glMultiDrawElementArrayAPPLE(dwmode, pfirst, pcount, iprimcount)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiDrawElementArrayAPPLE")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiDrawElementArrayAPPLE(dwmode, pfirst, pcount, iprimcount)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiDrawRangeElementArrayAPPLE (GLenum mode, GLuint start, GLuint end,
' const GLint *first, const GLsizei *count, GLsizei primcount);
' ========================================================================================
DECLARE SUB Proto_glMultiDrawRangeElementArrayAPPLE (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF LONG, BYREF LONG, BYVAL LONG)
MACRO glMultiDrawRangeElementArrayAPPLE(dwmode, dwstart, dwend, pfirst, pcount, iprimcount)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiDrawRangeElementArrayAPPLE")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiDrawRangeElementArrayAPPLE(dwmode, dwstart, dwend, pfirst, pcount, iprimcount)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_APPLE_fence)
%GL_APPLE_fence = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glGenFencesAPPLE (GLsizei n, GLuint *fences);
' ========================================================================================
DECLARE SUB Proto_glGenFencesAPPLE (BYVAL LONG, BYREF DWORD)
MACRO glGenFencesAPPLE(n, pfences)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGenFencesAPPLE")
   IF pProc THEN CALL DWORD pProc USING Proto_glGenFencesAPPLE(n, pfences)
END MACRO
' ========================================================================================

' ========================================================================================
' void glDeleteFencesAPPLE (GLsizei n, const GLuint *fences);
' ========================================================================================
DECLARE SUB Proto_glDeleteFencesAPPLE (BYVAL LONG, BYREF DWORD)
MACRO glDeleteFencesAPPLE(n, pfences)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDeleteFencesAPPLE")
   IF pProc THEN CALL DWORD pProc USING Proto_glDeleteFencesAPPLE(n, pfences)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSetFenceAPPLE (GLuint fence);
' ========================================================================================
DECLARE SUB Proto_glSetFenceAPPLE (BYVAL DWORD)
MACRO glSetFenceAPPLE(dwfence)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSetFenceAPPLE")
   IF pProc THEN CALL DWORD pProc USING Proto_glSetFenceAPPLE(dwfence)
END MACRO
' ========================================================================================

' ========================================================================================
' GLAPI GLboolean APIENTRY glIsFenceAPPLE (GLuint);
' typedef GLboolean (APIENTRYP PFNGLISFENCEAPPLEPROC) (GLuint fence);
' ========================================================================================
DECLARE FUNCTION Proto_glIsFenceAPPLE (BYVAL DWORD) AS BYTE
MACRO FUNCTION glIsFenceAPPLE(pfence)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glIsFenceAPPLE")
   IF pProc THEN CALL DWORD pProc USING Proto_glIsFenceAPPLE(pfence) TO bRes
END MACRO = bRes
' ========================================================================================

' ========================================================================================
' GLboolean glTestFenceAPPLE (GLuint fence);
' ========================================================================================
DECLARE FUNCTION Proto_glTestFenceAPPLE (BYVAL DWORD) AS BYTE
MACRO FUNCTION glTestFenceAPPLE(pfence)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glTestFenceAPPLE")
   IF pProc THEN CALL DWORD pProc USING Proto_glTestFenceAPPLE(pfence) TO bRes
END MACRO = bRes
' ========================================================================================

' ========================================================================================
' void glFinishFenceAPPLE (GLuint fence);
' ========================================================================================
DECLARE SUB Proto_glFinishFenceAPPLE (BYVAL DWORD)
MACRO glFinishFenceAPPLE(dwfence)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFinishFenceAPPLE")
   IF pProc THEN CALL DWORD pProc USING Proto_glFinishFenceAPPLE(dwfence)
END MACRO
' ========================================================================================

' ========================================================================================
' GLboolean glTestObjectAPPLE (GLenum object, GLuint name);
' ========================================================================================
DECLARE FUNCTION Proto_glTestObjectAPPLE (BYVAL DWORD, BYVAL DWORD) AS BYTE
MACRO FUNCTION glTestObjectAPPLE(dwobject, dwname)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glTestObjectAPPLE")
   IF pProc THEN CALL DWORD pProc USING Proto_glTestObjectAPPLE(dwobject, dwname) TO bRes
END MACRO = bRes
' ========================================================================================

' ========================================================================================
' void glFinishObjectAPPLE (GLenum object, GLint name);
' ========================================================================================
DECLARE SUB Proto_glFinishObjectAPPLE (BYVAL DWORD, BYVAL LONG)
MACRO glFinishObjectAPPLE(dwobject, dwname)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFinishObjectAPPLE")
   IF pProc THEN CALL DWORD pProc USING Proto_glFinishObjectAPPLE(dwobject, dwname)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_APPLE_vertex_array_object)
%GL_APPLE_vertex_array_object = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glBindVertexArrayAPPLE (GLuint array);
' ========================================================================================
DECLARE SUB Proto_glBindVertexArrayAPPLE (BYVAL DWORD)
MACRO glBindVertexArrayAPPLE(dwarray)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBindVertexArrayAPPLE")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindVertexArrayAPPLE(dwarray)
END MACRO
' ========================================================================================

' ========================================================================================
' void glDeleteVertexArraysAPPLE (GLsizei n, const GLuint *arrays);
' ========================================================================================
DECLARE SUB Proto_glDeleteVertexArraysAPPLE (BYVAL LONG, BYREF DWORD)
MACRO glDeleteVertexArraysAPPLE(n, parrays)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDeleteVertexArraysAPPLE")
   IF pProc THEN CALL DWORD pProc USING Proto_glDeleteVertexArraysAPPLE(n, parrays)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGenVertexArraysAPPLE (GLsizei n, GLuint *arrays);
' ========================================================================================
DECLARE SUB Proto_glGenVertexArraysAPPLE (BYVAL LONG, BYREF DWORD)
MACRO glGenVertexArraysAPPLE(n, parrays)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGenVertexArraysAPPLE")
   IF pProc THEN CALL DWORD pProc USING Proto_glGenVertexArraysAPPLE(n, parrays)
END MACRO
' ========================================================================================

' ========================================================================================
' GLAPI GLboolean APIENTRY glIsVertexArrayAPPLE (GLuint);
' typedef GLboolean (APIENTRYP PFNGLISVERTEXARRAYAPPLEPROC) (GLuint array);
' ========================================================================================
DECLARE FUNCTION Proto_glIsVertexArrayAPPLE (BYVAL DWORD) AS BYTE
MACRO FUNCTION glIsVertexArrayAPPLE(dwarray)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glIsVertexArrayAPPLE")
   IF pProc THEN CALL DWORD pProc USING Proto_glIsVertexArrayAPPLE(dwarray) TO bRes
END MACRO = bRes
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_APPLE_vertex_array_range)
%GL_APPLE_vertex_array_range = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glVertexArrayRangeAPPLE (GLsizei length, GLvoid *pointer);
' ========================================================================================
DECLARE SUB Proto_glVertexArrayRangeAPPLE (BYVAL LONG, BYREF ANY)
MACRO glVertexArrayRangeAPPLE(ilength, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexArrayRangeAPPLE")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexArrayRangeAPPLE(ilength, ppointer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFlushVertexArrayRangeAPPLE (GLsizei length, GLvoid *pointer);
' ========================================================================================
DECLARE SUB Proto_glFlushVertexArrayRangeAPPLE (BYVAL LONG, BYREF ANY)
MACRO glFlushVertexArrayRangeAPPLE(ilength, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFlushVertexArrayRangeAPPLE")
   IF pProc THEN CALL DWORD pProc USING Proto_glFlushVertexArrayRangeAPPLE(ilength, ppointer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexArrayParameteriAPPLE (GLenum pname, GLint param);
' ========================================================================================
DECLARE SUB Proto_glVertexArrayParameteriAPPLE (BYVAL DWORD, BYVAL LONG)
MACRO glVertexArrayParameteriAPPLE(pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexArrayParameteriAPPLE")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexArrayParameteriAPPLE(pname, param)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_APPLE_ycbcr_422)
%GL_APPLE_ycbcr_422 = 1
#ENDIF

#IF NOT %DEF(%GL_S3_s3tc)
%GL_S3_s3tc = 1
#ENDIF


#IF NOT %DEF(%GL_ATI_draw_buffers)
%GL_ATI_draw_buffers = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glDrawBuffersATI (GLsizei n, const GLenum *bufs);
' ========================================================================================
DECLARE SUB Proto_glDrawBuffersATI (BYVAL LONG, BYREF DWORD)
MACRO glDrawBuffersATI(n, pbufs)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDrawBuffersATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glDrawBuffersATI(n, pbufs)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_ATI_pixel_format_float)
%GL_ATI_pixel_format_float = 1
'/* This is really a WGL extension, but defines some associated GL enums.
' * ATI does not export "GL_ATI_pixel_format_float" in the GL_EXTENSIONS string.
' */
#ENDIF

#IF NOT %DEF(%GL_ATI_texture_env_combine3)
%GL_ATI_texture_env_combine3 = 1
#ENDIF

#IF NOT %DEF(%GL_ATI_texture_float)
%GL_ATI_texture_float = 1
#ENDIF

#IF NOT %DEF(%GL_NV_float_buffer)
%GL_NV_float_buffer = 1
#ENDIF

#IF NOT %DEF(%GL_NV_fragment_program)
%GL_NV_fragment_program = 1
'/* Some NV_fragment_program entry points are shared with ARB_vertex_program. */
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glProgramNamedParameter4fNV (GLuint id, GLsizei len, const GLubyte *name,
' GLfloat x, GLfloat y, GLfloat z, GLfloat w);
' ========================================================================================
DECLARE SUB Proto_glProgramNamedParameter4fNV (BYVAL DWORD, BYVAL LONG, BYREF BYTE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glProgramNamedParameter4fNV(dwid, ilen, pname, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramNamedParameter4fNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramNamedParameter4fNV(dwid, ilen, pname, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramNamedParameter4dNV (GLuint id, GLsizei len, const GLubyte *name,
' GLdouble x, GLdouble y, GLdouble z, GLdouble w);
' ========================================================================================
DECLARE SUB Proto_glProgramNamedParameter4dNV (BYVAL DWORD, BYVAL LONG, BYREF BYTE, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glProgramNamedParameter4dNV(dwid, ilen, pname, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramNamedParameter4dNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramNamedParameter4dNV(dwid, ilen, pname, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramNamedParameter4fvNV (GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v);
' ========================================================================================
DECLARE SUB Proto_glProgramNamedParameter4fvNV (BYVAL DWORD, BYVAL LONG, BYREF BYTE, BYREF SINGLE)
MACRO glProgramNamedParameter4fvNV(dwid, ilen, pname, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramNamedParameter4fvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramNamedParameter4fvNV(dwid, ilen, pname, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramNamedParameter4dvNV (GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v);
' ========================================================================================
DECLARE SUB Proto_glProgramNamedParameter4dvNV (BYVAL DWORD, BYVAL LONG, BYREF BYTE, BYREF DOUBLE)
MACRO glProgramNamedParameter4dvNV(dwid, ilen, pname, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramNamedParameter4dvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramNamedParameter4dvNV(dwid, ilen, pname, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetProgramNamedParameterfvNV (GLuint id, GLsizei len, const GLubyte *name, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetProgramNamedParameterfvNV (BYVAL DWORD, BYVAL LONG, BYREF BYTE, BYREF SINGLE)
MACRO glGetProgramNamedParameterfvNV(dwid, ilen, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetProgramNamedParameterfvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetProgramNamedParameterfvNV(dwid, ilen, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetProgramNamedParameterdvNV (GLuint id, GLsizei len, const GLubyte *name, GLdouble *params);
' ========================================================================================
DECLARE SUB Proto_glGetProgramNamedParameterdvNV (BYVAL DWORD, BYVAL LONG, BYREF BYTE, BYREF DOUBLE)
MACRO glGetProgramNamedParameterdvNV(dwid, ilen, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetProgramNamedParameterdvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetProgramNamedParameterdvNV(dwid, ilen, pname, pparams)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_NV_half_float)
%GL_NV_half_float = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glVertex2hNV (GLhalfNV x, GLhalfNV y);
' ========================================================================================
DECLARE SUB Proto_glVertex2hNV (BYVAL WORD, BYVAL WORD)
MACRO glVertex2hNV(x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertex2hNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertex2hNV(x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertex2hvNV (const GLhalfNV *v);
' ========================================================================================
DECLARE SUB Proto_glVertex2hvNV (BYREF WORD)
MACRO glVertex2hvNV(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertex2hvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertex2hvNV(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertex3hNV (GLhalfNV x, GLhalfNV y, GLhalfNV z);
' ========================================================================================
DECLARE SUB Proto_glVertex3hNV (BYVAL WORD, BYVAL WORD, BYVAL WORD)
MACRO glVertex3hNV(x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertex3hNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertex3hNV(x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertex3hvNV (const GLhalfNV *v);
' ========================================================================================
DECLARE SUB Proto_glVertex3hvNV (BYREF WORD)
MACRO glVertex3hvNV(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertex3hvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertex3hvNV(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertex4hNV (GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
' ========================================================================================
DECLARE SUB Proto_glVertex4hNV (BYVAL WORD, BYVAL WORD, BYVAL WORD, BYVAL WORD)
MACRO glVertex4hNV(x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertex4hNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertex4hNV(x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertex4hvNV (const GLhalfNV *v);
' ========================================================================================
DECLARE SUB Proto_glVertex4hvNV (BYREF WORD)
MACRO glVertex4hvNV(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertex4hvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertex4hvNV(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNormal3hNV (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
' ========================================================================================
DECLARE SUB Proto_glNormal3hNV (BYVAL WORD, BYVAL WORD, BYVAL WORD)
MACRO glNormal3hNV(nx, ny, nz)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNormal3hNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glNormal3hNV(nx, ny, nz)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNormal3hvNV (const GLhalfNV *v);
' ========================================================================================
DECLARE SUB Proto_glNormal3hvNV (BYREF WORD)
MACRO glNormal3hvNV(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNormal3hvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glNormal3hvNV(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glColor3hNV (GLhalfNV red, GLhalfNV green, GLhalfNV blue);
' ========================================================================================
DECLARE SUB Proto_glColor3hNV (BYVAL WORD, BYVAL WORD, BYVAL WORD)
MACRO glColor3hNV(red, green, blue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glColor3hNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glColor3hNV(red, green, blue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glColor3hvNV (const GLhalfNV *v);
' ========================================================================================
DECLARE SUB Proto_glColor3hvNV (BYREF INTEGER)
MACRO glColor3hvNV(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glColor3hvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glColor3hvNV(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glColor4hNV (GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
' ========================================================================================
DECLARE SUB Proto_glColor4hNV (BYVAL WORD, BYVAL WORD, BYVAL WORD, BYVAL WORD)
MACRO glColor4hNV(red, green, blue, alpha)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glColor4hNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glColor4hNV(red, green, blue, alpha)
END MACRO
' ========================================================================================

' ========================================================================================
' void glColor4hvNV (const GLhalfNV *v);
' ========================================================================================
DECLARE SUB Proto_glColor4hvNV (BYREF WORD)
MACRO glColor4hvNV(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glColor4hvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glColor4hvNV(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexCoord1hNV (GLhalfNV s);
' ========================================================================================
DECLARE SUB Proto_glTexCoord1hNV (BYVAL WORD)
MACRO glTexCoord1hNV(s)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexCoord1hNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexCoord1hNV(s)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexCoord1hvNV (const GLhalfNV *v);
' ========================================================================================
DECLARE SUB Proto_glTexCoord1hvNV (BYREF WORD)
MACRO glTexCoord1hvNV(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexCoord1hvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexCoord1hvNV(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexCoord2hNV (GLhalfNV s, GLhalfNV t);
' ========================================================================================
DECLARE SUB Proto_glTexCoord2hNV (BYVAL WORD, BYVAL WORD)
MACRO glTexCoord2hNV(s, t)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexCoord2hNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexCoord2hNV(s, t)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexCoord2hvNV (const GLhalfNV *v);
' ========================================================================================
DECLARE SUB Proto_glTexCoord2hvNV (BYREF WORD)
MACRO glTexCoord2hvNV(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexCoord2hvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexCoord2hvNV(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexCoord3hNV (GLhalfNV s, GLhalfNV t, GLhalfNV r);
' ========================================================================================
DECLARE SUB Proto_glTexCoord3hNV (BYVAL WORD, BYVAL WORD, BYVAL WORD)
MACRO glTexCoord3hNV(s, t, r)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexCoord3hNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexCoord3hNV(s, t, r)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexCoord3hvNV (const GLhalfNV *v);
' ========================================================================================
DECLARE SUB Proto_glTexCoord3hvNV (BYREF WORD)
MACRO glTexCoord3hvNV(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexCoord3hvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexCoord3hvNV(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexCoord4hNV (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
' ========================================================================================
DECLARE SUB Proto_glTexCoord4hNV (BYVAL WORD, BYVAL WORD, BYVAL WORD, BYVAL WORD)
MACRO glTexCoord4hNV(s, t, r, q)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexCoord4hNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexCoord4hNV(s, t, r, q)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexCoord4hvNV (const GLhalfNV *v);
' ========================================================================================
DECLARE SUB Proto_glTexCoord4hvNV (BYREF WORD)
MACRO glTexCoord4hvNV(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexCoord4hvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexCoord4hvNV(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord1hNV (GLenum target, GLhalfNV s);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord1hNV (BYVAL DWORD, BYVAL WORD)
MACRO glMultiTexCoord1hNV(dwtarget, s)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord1hNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord1hNV(dwtarget, s)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord1hvNV (GLenum target, const GLhalfNV *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord1hvNV (BYVAL DWORD, BYREF WORD)
MACRO glMultiTexCoord1hvNV(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord1hvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord1hvNV(dwtarget, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord2hNV (GLenum target, GLhalfNV s, GLhalfNV t);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord2hNV (BYVAL DWORD, BYVAL WORD, BYVAL WORD)
MACRO glMultiTexCoord2hNV(dwtarget, s, t)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord2hNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord2hNV(dwtarget, s, t)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord2hvNV (GLenum target, const GLhalfNV *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord2hvNV (BYVAL DWORD, BYREF WORD)
MACRO glMultiTexCoord2hvNV(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord2hvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord2hvNV(dwtarget, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord3hNV (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord3hNV (BYVAL DWORD, BYVAL WORD, BYVAL WORD, BYVAL WORD)
MACRO glMultiTexCoord3hNV(dwtarget, s, t, r)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord3hNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord3hNV(dwtarget, s, t, r)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord3hvNV (GLenum target, const GLhalfNV *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord3hvNV (BYVAL DWORD, BYREF WORD)
MACRO glMultiTexCoord3hvNV(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord3hvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord3hvNV(dwtarget, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord4hNV (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord4hNV (BYVAL DWORD, BYVAL WORD, BYVAL WORD, BYVAL WORD, BYVAL WORD)
MACRO glMultiTexCoord4hNV(dwtarget, s, t, r, q)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord4hNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord4hNV(dwtarget, s, t, r, q)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoord4hvNV (GLenum target, const GLhalfNV *v);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoord4hvNV (BYVAL DWORD, BYREF WORD)
MACRO glMultiTexCoord4hvNV(dwtarget, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoord4hvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoord4hvNV(dwtarget, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFogCoordhNV (GLhalfNV fog);
' ========================================================================================
DECLARE SUB Proto_glFogCoordhNV (BYVAL WORD)
MACRO glFogCoordhNV(wfog)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFogCoordhNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glFogCoordhNV(wfog)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFogCoordhvNV (const GLhalfNV *fog);
' ========================================================================================
DECLARE SUB Proto_glFogCoordhvNV (BYREF WORD)
MACRO glFogCoordhvNV(pfog)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFogCoordhvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glFogCoordhvNV(pfog)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSecondaryColor3hNV (GLhalfNV red, GLhalfNV green, GLhalfNV blue);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3hNV (BYVAL WORD, BYVAL WORD, BYVAL WORD)
MACRO glSecondaryColor3hNV(red, green, blue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3hNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glSecondaryColor3hNV(red, green, blue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glSecondaryColor3hvNV (const GLhalfNV *v);
' ========================================================================================
DECLARE SUB Proto_glSecondaryColor3hvNV (BYREF WORD)
MACRO glSecondaryColor3hvNV(v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glSecondaryColor3hvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glFogCoordhvNV(v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexWeighthNV (GLhalfNV weight);
' ========================================================================================
DECLARE SUB Proto_glVertexWeighthNV (BYVAL WORD)
MACRO glVertexWeighthNV(weight)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexWeighthNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexWeighthNV(weight)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexWeighthvNV (const GLhalfNV *weight);
' ========================================================================================
DECLARE SUB Proto_glVertexWeighthvNV (BYREF WORD)
MACRO glVertexWeighthvNV(pweight)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexWeighthvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexWeighthvNV(pweight)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib1hNV (GLuint index, GLhalfNV x);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib1hNV (BYVAL DWORD, BYVAL WORD)
MACRO glVertexAttrib1hNV(dwindex, x)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib1hNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib1hNV(dwindex, x)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib1hvNV (GLuint index, const GLhalfNV *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib1hvNV (BYVAL DWORD, BYREF WORD)
MACRO glVertexAttrib1hvNV(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib1hvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib1hvNV(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib2hNV (GLuint index, GLhalfNV x, GLhalfNV y);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib2hNV (BYVAL DWORD, BYVAL WORD, BYVAL WORD)
MACRO glVertexAttrib2hNV(dwindex, x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib2hNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib2hNV(dwindex, x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib2hvNV (GLuint index, const GLhalfNV *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib2hvNV (BYVAL DWORD, BYREF WORD)
MACRO glVertexAttrib2hvNV(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib2hvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib2hvNV(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib3hNV (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib3hNV (BYVAL DWORD, BYVAL WORD, BYVAL WORD, BYVAL WORD)
MACRO glVertexAttrib3hNV(dwindex, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib3hNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib3hNV(dwindex, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib3hvNV (GLuint index, const GLhalfNV *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib3hvNV (BYVAL DWORD, BYREF WORD)
MACRO glVertexAttrib3hvNV(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib3hvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib3hvNV(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib4hNV (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4hNV (BYVAL DWORD, BYVAL WORD, BYVAL WORD, BYVAL WORD, BYVAL WORD)
MACRO glVertexAttrib4hNV(dwindex, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4hNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4hNV(dwindex, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttrib4hvNV (GLuint index, const GLhalfNV *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttrib4hvNV (BYVAL DWORD, BYREF WORD)
MACRO glVertexAttrib4hvNV(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttrib4hvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttrib4hvNV(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribs1hvNV (GLuint index, GLsizei n, const GLhalfNV *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribs1hvNV (BYVAL DWORD, BYVAL LONG, BYREF WORD)
MACRO glVertexAttribs1hvNV(dwindex, n, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribs1hvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribs1hvNV(dwindex, n, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribs2hvNV (GLuint index, GLsizei n, const GLhalfNV *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribs2hvNV (BYVAL DWORD, BYVAL LONG, BYREF WORD)
MACRO glVertexAttribs2hvNV(dwindex, n, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribs2hvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribs2hvNV(dwindex, n, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribs3hvNV (GLuint index, GLsizei n, const GLhalfNV *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribs3hvNV (BYVAL DWORD, BYVAL LONG, BYREF WORD)
MACRO glVertexAttribs3hvNV(dwindex, n, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribs3hvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribs3hvNV(dwindex, n, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribs4hvNV (GLuint index, GLsizei n, const GLhalfNV *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribs4hvNV (BYVAL DWORD, BYVAL LONG, BYREF WORD)
MACRO glVertexAttribs4hvNV(dwindex, n, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribs4hvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribs4hvNV(dwindex, n, v)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_NV_pixel_data_range)
%GL_NV_pixel_data_range = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glPixelDataRangeNV (GLenum target, GLsizei length, GLvoid *pointer);
' ========================================================================================
DECLARE SUB Proto_glPixelDataRangeNV (BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glPixelDataRangeNV(dwtarget, ilength, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPixelDataRangeNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glPixelDataRangeNV(dwtarget, ilength, ppointer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFlushPixelDataRangeNV (GLenum target);
' ========================================================================================
DECLARE SUB Proto_glFlushPixelDataRangeNV (BYVAL DWORD)
MACRO glFlushPixelDataRangeNV(dwtarget)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFlushPixelDataRangeNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glFlushPixelDataRangeNV(dwtarget)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_NV_primitive_restart)
%GL_NV_primitive_restart = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glPrimitiveRestartNV (void);
' ========================================================================================
DECLARE SUB Proto_glPrimitiveRestartNV
MACRO glPrimitiveRestartNV
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPrimitiveRestartNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glPrimitiveRestartNV
END MACRO
' ========================================================================================

' ========================================================================================
' void glPrimitiveRestartIndexNV (GLuint index);
' ========================================================================================
DECLARE SUB Proto_glPrimitiveRestartIndexNV (BYVAL DWORD)
MACRO glPrimitiveRestartIndexNV(dwindex)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPrimitiveRestartIndexNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glPrimitiveRestartIndexNV(dwindex)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_NV_texture_expand_normal)
%GL_NV_texture_expand_normal = 1
#ENDIF

#IF NOT %DEF(%GL_NV_vertex_program2)
%GL_NV_vertex_program2 = 1
#ENDIF


#IF NOT %DEF(%GL_ATI_map_object_buffer)
%GL_ATI_map_object_buffer = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' GLvoid* glMapObjectBufferATI (GLuint buffer);
' ========================================================================================
DECLARE FUNCTION Proto_glMapObjectBufferATI (BYVAL DWORD) AS DWORD
MACRO FUNCTION glMapObjectBufferATI(dwbuffer)
   MACROTEMP pProc, dwRes
   LOCAL pProc, dwRes AS DWORD
   pProc = wglGetProcAddress("glMapObjectBufferATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glMapObjectBufferATI(dwbuffer) TO dwRes
END MACRO = dwRes
' ========================================================================================

' ========================================================================================
' void glUnmapObjectBufferATI (GLuint buffer);
' ========================================================================================
DECLARE SUB Proto_glUnmapObjectBufferATI (BYVAL DWORD)
MACRO glUnmapObjectBufferATI(dwbuffer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUnmapObjectBufferATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glUnmapObjectBufferATI(dwbuffer)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_ATI_separate_stencil)
%GL_ATI_separate_stencil = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glStencilOpSeparateATI (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
' ========================================================================================
DECLARE SUB Proto_glStencilOpSeparateATI (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glStencilOpSeparateATI(dwface, sfail, dpfail, dppass)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glStencilOpSeparateATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glStencilOpSeparateATI(dwface, sfail, dpfail, dppass)
END MACRO
' ========================================================================================

' ========================================================================================
' void glStencilFuncSeparateATI (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
' ========================================================================================
DECLARE SUB Proto_glStencilFuncSeparateATI (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD)
MACRO glStencilFuncSeparateATI(dwfrontfunc, dwbackfunc, dwref, dwmask)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glStencilFuncSeparateATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glStencilFuncSeparateATI(dwfrontfunc, dwbackfunc, dwref, dwmask)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_ATI_vertex_attrib_array_object)
%GL_ATI_vertex_attrib_array_object = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glVertexAttribArrayObjectATI (GLuint index, GLint size, GLenum type,
' GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribArrayObjectATI (BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL BYTE, BYVAL LONG, BYVAL DWORD, BYVAL DWORD)
MACRO glVertexAttribArrayObjectATI(dwindex, isize, dwtype, bnormalized, istride, dwbuffer, dwoffset)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribArrayObjectATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribArrayObjectATI(dwindex, isize, dwtype, bnormalized, istride, dwbuffer, dwoffset)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetVertexAttribArrayObjectfvATI (GLuint index, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetVertexAttribArrayObjectfvATI (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetVertexAttribArrayObjectfvATI(dwindex, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetVertexAttribArrayObjectfvATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetVertexAttribArrayObjectfvATI(dwindex, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetVertexAttribArrayObjectivATI (GLuint index, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetVertexAttribArrayObjectivATI (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetVertexAttribArrayObjectivATI(dwindex, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetVertexAttribArrayObjectivATI")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetVertexAttribArrayObjectivATI(dwindex, pname, pparams)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_OES_read_format)
%GL_OES_read_format = 1
#ENDIF


#IF NOT %DEF(%GL_EXT_depth_bounds_test)
%GL_EXT_depth_bounds_test = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glDepthBoundsEXT (GLclampd zmin, GLclampd zmax);
' ========================================================================================
DECLARE SUB Proto_glDepthBoundsEXT (BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glDepthBoundsEXT(zmin, zmax)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDepthBoundsEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glDepthBoundsEXT(zmin, zmax)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_texture_mirror_clamp)
%GL_EXT_texture_mirror_clamp = 1
#ENDIF


#IF NOT %DEF(%GL_EXT_blend_equation_separate)
%GL_EXT_blend_equation_separate = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glBlendEquationSeparateEXT (GLenum modeRGB, GLenum modeAlpha);
' ========================================================================================
DECLARE SUB Proto_glBlendEquationSeparateEXT (BYVAL DWORD, BYVAL DWORD)
MACRO glBlendEquationSeparateEXT(modeRGB, modeAlpha)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBlendEquationSeparateEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBlendEquationSeparateEXT(modeRGB, modeAlpha)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_MESA_pack_invert)
%GL_MESA_pack_invert = 1
#ENDIF

#IF NOT %DEF(%GL_MESA_ycbcr_texture)
%GL_MESA_ycbcr_texture = 1
#ENDIF

#IF NOT %DEF(%GL_EXT_pixel_buffer_object)
%GL_EXT_pixel_buffer_object = 1
#ENDIF

#IF NOT %DEF(%GL_NV_fragment_program_option)
%GL_NV_fragment_program_option = 1
#ENDIF

#IF NOT %DEF(%GL_NV_fragment_program2)
%GL_NV_fragment_program2 = 1
#ENDIF

#IF NOT %DEF(%GL_NV_vertex_program2_option)
%GL_NV_vertex_program2_option = 1
#ENDIF

#IF NOT %DEF(%GL_NV_vertex_program3)
%GL_NV_vertex_program3 = 1
#ENDIF


#IF NOT %DEF(%GL_EXT_framebuffer_object)
%GL_EXT_framebuffer_object = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' GLboolean glIsRenderbufferEXT (GLuint renderbuffer);
' ========================================================================================
DECLARE FUNCTION Proto_glIsRenderbufferEXT (BYVAL DWORD) AS BYTE
MACRO FUNCTION glIsRenderbufferEXT(dwrenderbuffer)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glIsRenderbufferEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glIsRenderbufferEXT(dwrenderbuffer) TO bRes
END MACRO = bRes
' ========================================================================================

' ========================================================================================
' void glBindRenderbufferEXT (GLenum target, GLuint renderbuffer);
' ========================================================================================
DECLARE SUB Proto_glBindRenderbufferEXT (BYVAL DWORD, BYVAL DWORD)
MACRO glBindRenderbufferEXT(dwtarget, dwrenderbuffer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBindRenderbufferEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindRenderbufferEXT(dwtarget, dwrenderbuffer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glDeleteRenderbuffersEXT (GLsizei n, const GLuint *renderbuffers);
' ========================================================================================
DECLARE SUB Proto_glDeleteRenderbuffersEXT (BYVAL LONG, BYREF DWORD)
MACRO glDeleteRenderbuffersEXT(n, prenderbuffers)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDeleteRenderbuffersEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glDeleteRenderbuffersEXT(n, prenderbuffers)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGenRenderbuffersEXT (GLsizei n, GLuint *renderbuffers);
' ========================================================================================
DECLARE SUB Proto_glGenRenderbuffersEXT (BYVAL LONG, BYREF DWORD)
MACRO glGenRenderbuffersEXT(n, prenderbuffers)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGenRenderbuffersEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGenRenderbuffersEXT(n, prenderbuffers)
END MACRO
' ========================================================================================

' ========================================================================================
' void glRenderbufferStorageEXT (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
' ========================================================================================
DECLARE SUB Proto_glRenderbufferStorageEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG)
MACRO glRenderbufferStorageEXT(dwtarget, internalformat, iwidth, iheight)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glRenderbufferStorageEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glRenderbufferStorageEXT(dwtarget, internalformat, iwidth, iheight)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetRenderbufferParameterivEXT (GLenum target, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetRenderbufferParameterivEXT (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetRenderbufferParameterivEXT(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetRenderbufferParameterivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetRenderbufferParameterivEXT(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' GLAPI GLboolean APIENTRY glIsFramebufferEXT (GLuint);
' typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFEREXTPROC) (GLuint framebuffer);
' ========================================================================================
DECLARE FUNCTION Proto_glIsFramebufferEXT (BYVAL DWORD) AS BYTE
MACRO FUNCTION glIsFramebufferEXT(dwframebuffer)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glIsFramebufferEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glIsFramebufferEXT(dwframebuffer) TO bRes
END MACRO = bRes
' ========================================================================================

' ========================================================================================
' void glBindFramebufferEXT (GLenum target, GLuint framebuffer);
' ========================================================================================
DECLARE SUB Proto_glBindFramebufferEXT (BYVAL DWORD, BYVAL DWORD)
MACRO glBindFramebufferEXT(dwtarget, dwframebuffer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBindFramebufferEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindFramebufferEXT(dwtarget, dwframebuffer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glDeleteFramebuffersEXT (GLsizei n, const GLuint *framebuffers);
' ========================================================================================
DECLARE SUB Proto_glDeleteFramebuffersEXT (BYVAL LONG, BYREF DWORD)
MACRO glDeleteFramebuffersEXT(n, pframebuffers)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDeleteFramebuffersEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glDeleteFramebuffersEXT(n, pframebuffers)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGenFramebuffersEXT (GLsizei n, GLuint *framebuffers);
' ========================================================================================
DECLARE SUB Proto_glGenFramebuffersEXT (BYVAL LONG, BYREF DWORD)
MACRO glGenFramebuffersEXT(n, pframebuffers)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGenFramebuffersEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGenFramebuffersEXT(n, pframebuffers)
END MACRO
' ========================================================================================

' ========================================================================================
' GLenum glCheckFramebufferStatusEXT (GLenum target);
' ========================================================================================
DECLARE FUNCTION Proto_glCheckFramebufferStatusEXT (BYVAL DWORD) AS DWORD
MACRO FUNCTION glCheckFramebufferStatusEXT(dwtarget)
   MACROTEMP pProc, dwRes
   LOCAL pProc, dwRes AS DWORD
   pProc = wglGetProcAddress("glCheckFramebufferStatusEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCheckFramebufferStatusEXT(dwtarget) TO dwRes
END MACRO = dwRes
' ========================================================================================

' ========================================================================================
' void glFramebufferTexture1DEXT (GLenum target, GLenum attachment, GLenum textarget,
' GLuint texture, GLint level);
' ========================================================================================
DECLARE SUB Proto_glFramebufferTexture1DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG)
MACRO glFramebufferTexture1DEXT(dwtarget, dwattachment, dwtexttarget, dwtexture, ilevel)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFramebufferTexture1DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glFramebufferTexture1DEXT(dwtarget, dwattachment, dwtexttarget, dwtexture, ilevel)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFramebufferTexture2DEXT (GLenum target, GLenum attachment, GLenum textarget,
' GLuint texture, GLint level);
' ========================================================================================
DECLARE SUB Proto_glFramebufferTexture2DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG)
MACRO glFramebufferTexture2DEXT(dwtarget, dwattachment, dwtexttarget, dwtexture, ilevel)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFramebufferTexture2DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glFramebufferTexture2DEXT(dwtarget, dwattachment, dwtexttarget, dwtexture, ilevel)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFramebufferTexture3DEXT (GLenum target, GLenum attachment, GLenum textarget,
' GLuint texture, GLint level, GLint zoffset);
' ========================================================================================
DECLARE SUB Proto_glFramebufferTexture3DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG)
MACRO glFramebufferTexture3DEXT(dwtarget, dwattachment, dwtexttarget, dwtexture, ilevel, zoffset)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFramebufferTexture3DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glFramebufferTexture3DEXT(dwtarget, dwattachment, dwtexttarget, dwtexture, ilevel, zoffset)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFramebufferRenderbufferEXT (GLenum target, GLenum attachment,
' GLenum renderbuffertarget, GLuint renderbuffer);
' ========================================================================================
DECLARE SUB Proto_glFramebufferRenderbufferEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glFramebufferRenderbufferEXT(dwtarget, dwattachment, dwrenderbuffertarget, dwrenderbuffer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFramebufferRenderbufferEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glFramebufferRenderbufferEXT(dwtarget, dwattachment, dwrenderbuffertarget, dwrenderbuffer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetFramebufferAttachmentParameterivEXT (GLenum target, GLenum attachment,
' GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetFramebufferAttachmentParameterivEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetFramebufferAttachmentParameterivEXT(dwtarget, dwattachment, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetFramebufferAttachmentParameterivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetFramebufferAttachmentParameterivEXT(dwtarget, dwattachment, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGenerateMipmapEXT (GLenum target);
' ========================================================================================
DECLARE SUB Proto_glGenerateMipmapEXT (BYVAL DWORD)
MACRO glGenerateMipmapEXT(dwtarget)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGenerateMipmapEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGenerateMipmapEXT(dwtarget)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_GREMEDY_string_marker)
%GL_GREMEDY_string_marker = 1

'#IF %DEF(%GL_GLEXT_PROTOTYPES)
' ========================================================================================
' void glStringMarkerGREMEDY (GLsizei len, const GLvoid *string);
' ========================================================================================
DECLARE SUB Proto_glStringMarkerGREMEDY (BYVAL LONG, BYREF ANY)
MACRO glStringMarkerGREMEDY(ilength, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glStringMarkerGREMEDY")
   IF pProc THEN CALL DWORD pProc USING Proto_glStringMarkerGREMEDY(ilength, ppointer)
END MACRO
' ========================================================================================
'#ENDIF ' %GL_GLEXT_PROTOTYPES

#ENDIF


#IF NOT %DEF(%GL_EXT_packed_depth_stencil)
%GL_EXT_packed_depth_stencil = 1
#ENDIF

#IF NOT %DEF(%GL_EXT_stencil_clear_tag)
%GL_EXT_stencil_clear_tag = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glStencilClearTagEXT (GLsizei stencilTagBits, GLuint stencilClearTag);
' ========================================================================================
DECLARE SUB Proto_glStencilClearTagEXT (BYVAL LONG, BYVAL DWORD)
MACRO glStencilClearTagEXT(stencilTagBits, stencilClearTag)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glStencilClearTagEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glStencilClearTagEXT(stencilTagBits, stencilClearTag)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_texture_sRGB)
%GL_EXT_texture_sRGB = 1
#ENDIF

#IF NOT %DEF(%GL_EXT_framebuffer_blit)
%GL_EXT_framebuffer_blit = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glBlitFramebufferEXT (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1,
' GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
' ========================================================================================
DECLARE SUB Proto_glBlitFramebufferEXT (BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL DWORD)
MACRO glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, dwmask, dwfilter)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBlitFramebufferEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, dwmask, dwfilter)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF

#IF NOT %DEF(%GL_EXT_framebuffer_multisample)
%GL_EXT_framebuffer_multisample = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glRenderbufferStorageMultisampleEXT (GLenum target, GLsizei samples,
' GLenum internalformat, GLsizei width, GLsizei height);
' ========================================================================================
DECLARE SUB Proto_glRenderbufferStorageMultisampleEXT (BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG)
MACRO glRenderbufferStorageMultisampleEXT(dwtarget, isamples, internalformat, iwidth, iheight)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glRenderbufferStorageMultisampleEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glRenderbufferStorageMultisampleEXT(dwtarget, isamples, internalformat, iwidth, iheight)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_MESAX_texture_stack)
%GL_MESAX_texture_stack = 1
#ENDIF


#IF NOT %DEF(%GL_EXT_timer_query)
%GL_EXT_timer_query = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glGetQueryObjecti64vEXT (GLuint id, GLenum pname, GLint64EXT *params);
' ========================================================================================
DECLARE SUB Proto_glGetQueryObjecti64vEXT (BYVAL DWORD, BYVAL DWORD, BYREF QUAD)
MACRO glGetQueryObjecti64vEXT(dwid, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetQueryObjecti64vEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetQueryObjecti64vEXT(dwid, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetQueryObjectui64vEXT (GLuint id, GLenum pname, GLuint64EXT *params);
' ========================================================================================
DECLARE SUB Proto_glGetQueryObjectui64vEXT (BYVAL DWORD, BYVAL DWORD, BYREF QUAD)
MACRO glGetQueryObjectui64vEXT(dwid, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetQueryObjectui64vEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetQueryObjectui64vEXT(dwid, pname, pparams)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_gpu_program_parameters)
%GL_EXT_gpu_program_parameters = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glProgramEnvParameters4fvEXT (GLenum target, GLuint index, GLsizei count, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glProgramEnvParameters4fvEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYREF SINGLE)
MACRO glProgramEnvParameters4fvEXT(dwtarget, dwindex, icount, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramEnvParameters4fvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramEnvParameters4fvEXT(dwtarget, dwindex, icount, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramLocalParameters4fvEXT (GLenum target, GLuint index, GLsizei count, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glProgramLocalParameters4fvEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYREF SINGLE)
MACRO glProgramLocalParameters4fvEXT(dwtarget, dwindex, icount, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramLocalParameters4fvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramLocalParameters4fvEXT(dwtarget, dwindex, icount, pparams)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_APPLE_flush_buffer_range)
%GL_APPLE_flush_buffer_range = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glBufferParameteriAPPLE (GLenum target, GLenum pname, GLint param);
' ========================================================================================
DECLARE SUB Proto_glBufferParameteriAPPLE (BYVAL DWORD, BYVAL DWORD, BYVAL LONG)
MACRO glBufferParameteriAPPLE(dwtarget, pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBufferParameteriAPPLE")
   IF pProc THEN CALL DWORD pProc USING Proto_glBufferParameteriAPPLE(dwtarget, pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFlushMappedBufferRangeAPPLE (GLenum target, GLintptr offset, GLsizeiptr size);
' ========================================================================================
DECLARE SUB Proto_glFlushMappedBufferRangeAPPLE (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glFlushMappedBufferRangeAPPLE(dwtarget, dwoffset, dwsize)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFlushMappedBufferRangeAPPLE")
   IF pProc THEN CALL DWORD pProc USING Proto_glFlushMappedBufferRangeAPPLE(dwtarget, dwoffset, dwsize)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_NV_gpu_program4)
%GL_NV_gpu_program4 = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glProgramLocalParameterI4iNV (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
' ========================================================================================
DECLARE SUB Proto_glProgramLocalParameterI4iNV (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glProgramLocalParameterI4iNV(dwtarget, dwindex, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramLocalParameterI4iNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramLocalParameterI4iNV(dwtarget, dwindex, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramLocalParameterI4ivNV (GLenum target, GLuint index, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glProgramLocalParameterI4ivNV (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glProgramLocalParameterI4ivNV(dwtarget, dwindex, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramLocalParameterI4ivNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramLocalParameterI4ivNV(dwtarget, dwindex, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramLocalParametersI4ivNV (GLenum target, GLuint index, GLsizei count, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glProgramLocalParametersI4ivNV (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYREF LONG)
MACRO glProgramLocalParametersI4ivNV(dwtarget, dwindex, icount, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramLocalParametersI4ivNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramLocalParametersI4ivNV(dwtarget, dwindex, icount, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramLocalParameterI4uiNV (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
' ========================================================================================
DECLARE SUB Proto_glProgramLocalParameterI4uiNV (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glProgramLocalParameterI4uiNV(dwtarget, dwindex, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramLocalParameterI4uiNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramLocalParameterI4uiNV(dwtarget, dwindex, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramLocalParameterI4uivNV (GLenum target, GLuint index, const GLuint *params);
' ========================================================================================
DECLARE SUB Proto_glProgramLocalParameterI4uivNV (BYVAL DWORD, BYVAL DWORD, BYREF DWORD)
MACRO glProgramLocalParameterI4uivNV(dwtarget, dwindex, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramLocalParameterI4uivNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramLocalParameterI4uivNV(dwtarget, dwindex, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramLocalParametersI4uivNV (GLenum target, GLuint index, GLsizei count, const GLuint *params);
' ========================================================================================
DECLARE SUB Proto_glProgramLocalParametersI4uivNV (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYREF DWORD)
MACRO glProgramLocalParametersI4uivNV(dwtarget, dwindex, icount, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramLocalParametersI4uivNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramLocalParametersI4uivNV(dwtarget, dwindex, icount, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramEnvParameterI4iNV (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
' ========================================================================================
DECLARE SUB Proto_glProgramEnvParameterI4iNV (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glProgramEnvParameterI4iNV(dwtarget, dwindex, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramEnvParameterI4iNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramEnvParameterI4iNV(dwtarget, dwindex, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramEnvParameterI4ivNV (GLenum target, GLuint index, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glProgramEnvParameterI4ivNV (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glProgramEnvParameterI4ivNV(dwtarget, dwindex, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramEnvParameterI4ivNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramEnvParameterI4ivNV(dwtarget, dwindex, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramEnvParametersI4ivNV (GLenum target, GLuint index, GLsizei count, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glProgramEnvParametersI4ivNV (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYREF LONG)
MACRO glProgramEnvParametersI4ivNV(dwtarget, dwindex, icount, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramEnvParametersI4ivNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramEnvParametersI4ivNV(dwtarget, dwindex, icount, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramEnvParameterI4uiNV (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
' ========================================================================================
DECLARE SUB Proto_glProgramEnvParameterI4uiNV (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glProgramEnvParameterI4uiNV(dwtarget, dwindex, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramEnvParameterI4uiNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramEnvParameterI4uiNV(dwtarget, dwindex, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramEnvParameterI4uivNV (GLenum target, GLuint index, const GLuint *params);
' ========================================================================================
DECLARE SUB Proto_glProgramEnvParameterI4uivNV (BYVAL DWORD, BYVAL DWORD, BYREF DWORD)
MACRO glProgramEnvParameterI4uivNV(dwtarget, dwindex, icount, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramEnvParameterI4uivNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramEnvParameterI4uivNV(dwtarget, dwindex, icount, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramEnvParametersI4uivNV (GLenum target, GLuint index, GLsizei count, const GLuint *params);
' ========================================================================================
DECLARE SUB Proto_glProgramEnvParametersI4uivNV (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYREF DWORD)
MACRO glProgramEnvParametersI4uivNV(dwtarget, dwindex, icount, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramEnvParametersI4uivNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramEnvParametersI4uivNV(dwtarget, dwindex, icount, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetProgramLocalParameterIivNV (GLenum target, GLuint index, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetProgramLocalParameterIivNV (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetProgramLocalParameterIivNV(dwtarget, dwindex, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetProgramLocalParameterIivNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetProgramLocalParameterIivNV(dwtarget, dwindex, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetProgramLocalParameterIuivNV (GLenum target, GLuint index, GLuint *params);
' ========================================================================================
DECLARE SUB Proto_glGetProgramLocalParameterIuivNV (BYVAL DWORD, BYVAL DWORD, BYREF DWORD)
MACRO glGetProgramLocalParameterIuivNV(dwtarget, dwindex, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetProgramLocalParameterIuivNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetProgramLocalParameterIuivNV(dwtarget, dwindex, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetProgramEnvParameterIivNV (GLenum target, GLuint index, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetProgramEnvParameterIivNV (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetProgramEnvParameterIivNV(dwtarget, dwindex, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetProgramEnvParameterIivNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetProgramEnvParameterIivNV(dwtarget, dwindex, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetProgramEnvParameterIuivNV (GLenum target, GLuint index, GLuint *params);
' ========================================================================================
DECLARE SUB Proto_glGetProgramEnvParameterIuivNV (BYVAL DWORD, BYVAL DWORD, BYREF DWORD)
MACRO glGetProgramEnvParameterIuivNV(dwtarget, dwindex, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetProgramEnvParameterIuivNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetProgramEnvParameterIuivNV(dwtarget, dwindex, pparams)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_NV_geometry_program4)
%GL_NV_geometry_program4 = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glProgramVertexLimitNV (GLenum target, GLint limit);
' ========================================================================================
DECLARE SUB Proto_glProgramVertexLimitNV (BYVAL DWORD, BYVAL LONG)
MACRO glProgramVertexLimitNV(dwtarget, dwlimit)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramVertexLimitNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramVertexLimitNV(dwtarget, dwlimit)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFramebufferTextureEXT (GLenum target, GLenum attachment, GLuint texture, GLint level);
' ========================================================================================
DECLARE SUB Proto_glFramebufferTextureEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG)
MACRO glFramebufferTextureEXT(dwtarget, dwattachment, dwtexture, ilevel)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFramebufferTextureEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glFramebufferTextureEXT(dwtarget, dwattachment, dwtexture, ilevel)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFramebufferTextureLayerEXT (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
' ========================================================================================
DECLARE SUB Proto_glFramebufferTextureLayerEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG)
MACRO glFramebufferTextureLayerEXT(dwtarget, dwattachment, dwtexture, ilevel, ilayer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFramebufferTextureLayerEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glFramebufferTextureLayerEXT(dwtarget, dwattachment, dwtexture, ilevel, ilayer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFramebufferTextureFaceEXT (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
' ========================================================================================
DECLARE SUB Proto_glFramebufferTextureFaceEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD)
MACRO glFramebufferTextureFaceEXT(dwtarget, dwattachment, dwtexture, ilevel, dwface)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFramebufferTextureFaceEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glFramebufferTextureFaceEXT(dwtarget, dwattachment, dwtexture, ilevel, dwface)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF

#IF NOT %DEF(%GL_EXT_geometry_shader4)
%GL_EXT_geometry_shader4 = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glProgramParameteriEXT (GLuint program, GLenum pname, GLint value);
' ========================================================================================
DECLARE SUB Proto_glProgramParameteriEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG)
MACRO glProgramParameteriEXT(dwprogram, pname, ivalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramParameteriEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramParameteriEXT(dwprogram, pname, ivalue)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_NV_vertex_program4)
%GL_NV_vertex_program4 = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glVertexAttribI1iEXT (GLuint index, GLint x);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI1iEXT (BYVAL DWORD, BYVAL LONG)
MACRO glVertexAttribI1iEXT(dwindex, x)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI1iEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI1iEXT(dwindex, x)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI2iEXT (GLuint index, GLint x, GLint y);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI2iEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG)
MACRO glVertexAttribI2iEXT(dwindex, x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI2iEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI2iEXT(dwindex, x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI3iEXT (GLuint index, GLint x, GLint y, GLint z);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI3iEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glVertexAttribI3iEXT(dwindex, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI3iEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI3iEXT(dwindex, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI4iEXT (GLuint index, GLint x, GLint y, GLint z, GLint w);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI4iEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glVertexAttribI4iEXT(dwindex, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI4iEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI4iEXT(dwindex, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI1uiEXT (GLuint index, GLuint x);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI1uiEXT (BYVAL DWORD, BYVAL DWORD)
MACRO glVertexAttribI1uiEXT(dwindex, x)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI1uiEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI1uiEXT(dwindex, x)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI2uiEXT (GLuint index, GLuint x, GLuint y);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI2uiEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glVertexAttribI2uiEXT(dwindex, x, y)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI2uiEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI2uiEXT(dwindex, x, y)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI3uiEXT (GLuint index, GLuint x, GLuint y, GLuint z);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI3uiEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glVertexAttribI3uiEXT(dwindex, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI3uiEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI3uiEXT(dwindex, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI4uiEXT (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI4uiEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glVertexAttribI4uiEXT(dwindex, x, y, z, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI4uiEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI4uiEXT(dwindex, x, y, z, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI1ivEXT (GLuint index, const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI1ivEXT (BYVAL DWORD, BYREF LONG)
MACRO glVertexAttribI1ivEXT(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI1ivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI1ivEXT(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI2ivEXT (GLuint index, const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI2ivEXT (BYVAL DWORD, BYREF LONG)
MACRO glVertexAttribI2ivEXT(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI2ivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI2ivEXT(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI3ivEXT (GLuint index, const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI3ivEXT (BYVAL DWORD, BYREF LONG)
MACRO glVertexAttribI3ivEXT(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI3ivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI3ivEXT(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI4ivEXT (GLuint index, const GLint *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI4ivEXT (BYVAL DWORD, BYREF LONG)
MACRO glVertexAttribI4ivEXT(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI4ivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI4ivEXT(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI1uivEXT (GLuint index, const GLuint *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI1uivEXT (BYVAL DWORD, BYREF DWORD)
MACRO glVertexAttribI1uivEXT(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI1uivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI1uivEXT(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI2uivEXT (GLuint index, const GLuint *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI2uivEXT (BYVAL DWORD, BYREF DWORD)
MACRO glVertexAttribI2uivEXT(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI2uivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI2uivEXT(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI3uivEXT (GLuint index, const GLuint *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI3uivEXT (BYVAL DWORD, BYREF DWORD)
MACRO glVertexAttribI3uivEXT(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI3uivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI3uivEXT(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI4uivEXT (GLuint index, const GLuint *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI4uivEXT (BYVAL DWORD, BYREF DWORD)
MACRO glVertexAttribI4uivEXT(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI4uivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI4uivEXT(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' GLAPI void APIENTRY glVertexAttribI4bvEXT (GLuint, const GLbyte *);
' typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVEXTPROC) (GLuint index, const GLbyte *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI4bvEXT (BYVAL DWORD, BYREF BYTE)
MACRO glVertexAttribI4bvEXT(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI4bvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI4bvEXT(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI4svEXT (GLuint index, const GLshort *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI4svEXT (BYVAL DWORD, BYREF INTEGER)
MACRO glVertexAttribI4svEXT(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI4svEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI4svEXT(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI4ubvEXT (GLuint index, const GLubyte *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI4ubvEXT (BYVAL DWORD, BYREF BYTE)
MACRO glVertexAttribI4ubvEXT(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI4ubvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI4ubvEXT(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribI4usvEXT (GLuint index, const GLushort *v);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribI4usvEXT (BYVAL DWORD, BYREF WORD)
MACRO glVertexAttribI4usvEXT(dwindex, v)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribI4usvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribI4usvEXT(dwindex, v)
END MACRO
' ========================================================================================

' ========================================================================================
' void glVertexAttribIPointerEXT (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
' ========================================================================================
DECLARE SUB Proto_glVertexAttribIPointerEXT (BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glVertexAttribIPointerEXT(dwindex, isize, dwtype, istride, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glVertexAttribIPointerEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glVertexAttribIPointerEXT(dwindex, isize, dwtype, istride, ppointer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetVertexAttribIivEXT (GLuint index, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetVertexAttribIivEXT (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetVertexAttribIivEXT(dwindex, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetVertexAttribIivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetVertexAttribIivEXT(dwindex, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetVertexAttribIuivEXT (GLuint index, GLenum pname, GLuint *params);
' ========================================================================================
DECLARE SUB Proto_glGetVertexAttribIuivEXT (BYVAL DWORD, BYVAL DWORD, BYREF DWORD)
MACRO glGetVertexAttribIuivEXT(dwindex, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetVertexAttribIuivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetVertexAttribIuivEXT(dwindex, pname, pparams)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_gpu_shader4)
%GL_EXT_gpu_shader4 = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glGetUniformuivEXT (GLuint program, GLint location, GLuint *params);
' ========================================================================================
DECLARE SUB Proto_glGetUniformuivEXT (BYVAL DWORD, BYVAL LONG, BYREF DWORD)
MACRO glGetUniformuivEXT(dwprogram, ilocation, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetUniformuivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetUniformuivEXT(dwprogram, ilocation, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glBindFragDataLocationEXT (GLuint program, GLuint color, const GLchar *name);
' ========================================================================================
DECLARE SUB Proto_glBindFragDataLocationEXT (BYVAL DWORD, BYVAL DWORD, BYREF ASCIIZ)
MACRO glBindFragDataLocationEXT(dwprogram, dwcolor, szname)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBindFragDataLocationEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindFragDataLocationEXT(dwprogram, dwcolor, szname)
END MACRO
' ========================================================================================

' ========================================================================================
' GLint glGetFragDataLocationEXT (GLuint program, const GLchar *name);
' ========================================================================================
DECLARE FUNCTION Proto_glGetFragDataLocationEXT (BYVAL DWORD, BYREF ASCIIZ) AS LONG
MACRO FUNCTION glGetFragDataLocationEXT(dwprogram, szname)
   MACROTEMP pProc, lRes
   LOCAL pProc AS DWORD, lRes AS LONG
   pProc = wglGetProcAddress("glGetFragDataLocationEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetFragDataLocationEXT(dwprogram, szname) TO lRes
END MACRO = lRes
' ========================================================================================

' ========================================================================================
' GLAPI void APIENTRY glUniform1uiEXT (GLint, GLuint);
' typedef void (APIENTRYP PFNGLUNIFORM1UIEXTPROC) (GLint location, GLuint v0);
' ========================================================================================
DECLARE SUB Proto_glUniform1uiEXT (BYVAL LONG, BYVAL DWORD)
MACRO glUniform1uiEXT(ilocation, v0)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform1uiEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform1uiEXT(ilocation, v0)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform2uiEXT (GLint location, GLuint v0, GLuint v1);
' ========================================================================================
DECLARE SUB Proto_glUniform2uiEXT (BYVAL LONG, BYVAL DWORD, BYVAL DWORD)
MACRO glUniform2uiEXT(ilocation, v0, v1)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform2uiEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform2uiEXT(ilocation, v0, v1)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform3uiEXT (GLint location, GLuint v0, GLuint v1, GLuint v2);
' ========================================================================================
DECLARE SUB Proto_glUniform3uiEXT (BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glUniform3uiEXT(ilocation, v0, v1, v2)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform3uiEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform3uiEXT(ilocation, v0, v1, v2)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform4uiEXT (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
' ========================================================================================
DECLARE SUB Proto_glUniform4uiEXT (BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glUniform4uiEXT(ilocation, v0, v1, v2, v3)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform4uiEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform4uiEXT(ilocation, v0, v1, v2, v3)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform1uivEXT (GLint location, GLsizei count, const GLuint *value);
' ========================================================================================
DECLARE SUB Proto_glUniform1uivEXT (BYVAL LONG, BYVAL LONG, BYREF DWORD)
MACRO glUniform1uivEXT(ilocation, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform1uivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform1uivEXT(ilocation, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform2uivEXT (GLint location, GLsizei count, const GLuint *value);
' ========================================================================================
DECLARE SUB Proto_glUniform2uivEXT (BYVAL LONG, BYVAL LONG, BYREF DWORD)
MACRO glUniform2uivEXT(ilocation, icount, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform2uivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform2uivEXT(ilocation, icount, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform3uivEXT (GLint location, GLsizei count, const GLuint *value);
' ========================================================================================
DECLARE SUB Proto_glUniform3uivEXT (BYVAL LONG, BYVAL LONG, BYREF DWORD)
MACRO glUniform3uivEXT(ilocation, icount, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform3uivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform3uivEXT(ilocation, icount, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glUniform4uivEXT (GLint location, GLsizei count, const GLuint *value);
' ========================================================================================
DECLARE SUB Proto_glUniform4uivEXT (BYVAL LONG, BYVAL LONG, BYREF DWORD)
MACRO glUniform4uivEXT(ilocation, icount, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniform4uivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniform4uivEXT(ilocation, icount, pvalue)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_draw_instanced)
%GL_EXT_draw_instanced = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glDrawArraysInstancedEXT (GLenum mode, GLint start, GLsizei count, GLsizei primcount);
' ========================================================================================
DECLARE SUB Proto_glDrawArraysInstancedEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glDrawArraysInstancedEXT(dwmode, istart, icount, iprimcount)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDrawArraysInstancedEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glDrawArraysInstancedEXT(dwmode, istart, icount, iprimcount)
END MACRO
' ========================================================================================

' ========================================================================================
' void glDrawElementsInstancedEXT (GLenum mode, GLsizei count, GLenum type,
' const GLvoid *indices, GLsizei primcount);
' ========================================================================================
DECLARE SUB Proto_glDrawElementsInstancedEXT (BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYREF ANY, BYVAL LONG)
MACRO glDrawElementsInstancedEXT(dwmode, icount, dwtype, pindices, iprimcount)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDrawElementsInstancedEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glDrawElementsInstancedEXT(dwmode, icount, dwtype, pindices, iprimcount)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_packed_float)
%GL_EXT_packed_float = 1
#ENDIF

#IF NOT %DEF(%GL_EXT_texture_array)
%GL_EXT_texture_array = 1
#ENDIF


#IF NOT %DEF(%GL_EXT_texture_buffer_object)
%GL_EXT_texture_buffer_object = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glTexBufferEXT (GLenum target, GLenum internalformat, GLuint buffer);
' ========================================================================================
DECLARE SUB Proto_glTexBufferEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glTexBufferEXT(dwtarget, internalformat, dwbuffer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexBufferEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexBufferEXT(dwtarget, internalformat, dwbuffer)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_texture_compression_latc)
%GL_EXT_texture_compression_latc = 1
#ENDIF

#IF NOT %DEF(%GL_EXT_texture_compression_rgtc)
%GL_EXT_texture_compression_rgtc = 1
#ENDIF

#IF NOT %DEF(%GL_EXT_texture_shared_exponent)
%GL_EXT_texture_shared_exponent = 1
#ENDIF

#IF NOT %DEF(%GL_NV_depth_buffer_float)
%GL_NV_depth_buffer_float = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glDepthRangedNV (GLdouble zNear, GLdouble zFar);
' ========================================================================================
DECLARE SUB Proto_glDepthRangedNV (BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glDepthRangedNV(zNear, zFar)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDepthRangedNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glDepthRangedNV(zNear, zFar)
END MACRO
' ========================================================================================

' ========================================================================================
' void glClearDepthdNV (GLdouble depth);
' ========================================================================================
DECLARE SUB Proto_glClearDepthdNV (BYVAL DOUBLE)
MACRO glClearDepthdNV(ddepth)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glClearDepthdNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glClearDepthdNV(ddepth)
END MACRO
' ========================================================================================

' ========================================================================================
' void glDepthBoundsdNV (GLdouble zmin, GLdouble zmax);
' ========================================================================================
DECLARE SUB Proto_glDepthBoundsdNV (BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glDepthBoundsdNV(zmin, zmax)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDepthBoundsdNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glDepthBoundsdNV(zmin, zmax)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF

#IF NOT %DEF(%GL_NV_fragment_program4)
%GL_NV_fragment_program4 = 1
#ENDIF

#IF NOT %DEF(%GL_NV_framebuffer_multisample_coverage)
%GL_NV_framebuffer_multisample_coverage = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glRenderbufferStorageMultisampleCoverageNV (GLenum target, GLsizei coverageSamples,
' GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
' ========================================================================================
DECLARE SUB Proto_glRenderbufferStorageMultisampleCoverageNV (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG)
MACRO glRenderbufferStorageMultisampleCoverageNV(dwtarget, coverageSamples, colorSamples, internalformat, iwidth, iheight)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glRenderbufferStorageMultisampleCoverageNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glRenderbufferStorageMultisampleCoverageNV(dwtarget, coverageSamples, colorSamples, internalformat, iwidth, iheight)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_framebuffer_sRGB)
%GL_EXT_framebuffer_sRGB       = 1
#ENDIF

#IF NOT %DEF(%GL_NV_geometry_shader4)
%GL_NV_geometry_shader4       = 1
#ENDIF


#IF NOT %DEF(%GL_NV_parameter_buffer_object)
%GL_NV_parameter_buffer_object       = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glProgramBufferParametersfvNV (GLenum target, GLuint buffer, GLuint index,
' GLsizei count, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glProgramBufferParametersfvNV (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYREF SINGLE)
MACRO glProgramBufferParametersfvNV(dwtarget, dwbuffer, dwindex, icount, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramBufferParametersfvNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramBufferParametersfvNV(dwtarget, dwbuffer, dwindex, icount, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramBufferParametersIivNV (GLenum target, GLuint buffer, GLuint index,
' GLsizei count, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glProgramBufferParametersIivNV (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYREF LONG)
MACRO glProgramBufferParametersIivNV(dwtarget, dwbuffer, dwindex, icount, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramBufferParametersIivNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramBufferParametersIivNV(dwtarget, dwbuffer, dwindex, icount, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramBufferParametersIuivNV (GLenum target, GLuint buffer, GLuint index,
' GLsizei count, const GLuint *params);
' ========================================================================================
DECLARE SUB Proto_glProgramBufferParametersIuivNV (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYREF DWORD)
MACRO glProgramBufferParametersIuivNV(dwtarget, dwbuffer, dwindex, icount, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramBufferParametersIuivNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramBufferParametersIuivNV(dwtarget, dwbuffer, dwindex, icount, pparams)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_draw_buffers2)
%GL_EXT_draw_buffers2 = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glColorMaskIndexedEXT (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
' ========================================================================================
DECLARE SUB Proto_glColorMaskIndexedEXT (BYVAL DWORD, BYVAL BYTE, BYVAL BYTE, BYVAL BYTE, BYVAL BYTE)
MACRO glColorMaskIndexedEXT(dwindex, r, g, b, a)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glColorMaskIndexedEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glColorMaskIndexedEXT(dwindex, r, g, b, a)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetBooleanIndexedvEXT (GLenum target, GLuint index, GLboolean *data);
' ========================================================================================
DECLARE SUB Proto_glGetBooleanIndexedvEXT (BYVAL DWORD, BYVAL DWORD, BYREF BYTE)
MACRO glGetBooleanIndexedvEXT(dwtarget, dwindex, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetBooleanIndexedvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetBooleanIndexedvEXT(dwtarget, dwindex, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetIntegerIndexedvEXT (GLenum target, GLuint index, GLint *data);
' ========================================================================================
DECLARE SUB Proto_glGetIntegerIndexedvEXT (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetIntegerIndexedvEXT(dwtarget, dwindex, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetIntegerIndexedvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetIntegerIndexedvEXT(dwtarget, dwindex, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' void glEnableIndexedEXT (GLenum target, GLuint index);
' ========================================================================================
DECLARE SUB Proto_glEnableIndexedEXT (BYVAL DWORD, BYVAL DWORD)
MACRO glEnableIndexedEXT(dwtarget, dwindex)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glEnableIndexedEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glEnableIndexedEXT(dwtarget, dwindex)
END MACRO
' ========================================================================================

' ========================================================================================
' void glDisableIndexedEXT (GLenum target, GLuint index);
' ========================================================================================
DECLARE SUB Proto_glDisableIndexedEXT (BYVAL DWORD, BYVAL DWORD)
MACRO glDisableIndexedEXT(dwtarget, dwindex)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDisableIndexedEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glDisableIndexedEXT(dwtarget, dwindex)
END MACRO
' ========================================================================================

' ========================================================================================
' GLboolean glIsEnabledIndexedEXT (GLenum target, GLuint index);
' ========================================================================================
DECLARE FUNCTION Proto_glIsEnabledIndexedEXT (BYVAL DWORD, BYVAL DWORD) AS BYTE
MACRO FUNCTION glIsEnabledIndexedEXT(dwtarget, dwindex)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glIsEnabledIndexedEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glIsEnabledIndexedEXT(dwtarget, dwindex) TO bRes
END MACRO = bRes
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_NV_transform_feedback)
%GL_NV_transform_feedback = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glBeginTransformFeedbackNV (GLenum primitiveMode);
' ========================================================================================
DECLARE SUB Proto_glBeginTransformFeedbackNV (BYVAL DWORD)
MACRO glBeginTransformFeedbackNV(dwprimitiveMode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBeginTransformFeedbackNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glBeginTransformFeedbackNV(dwprimitiveMode)
END MACRO
' ========================================================================================

' ========================================================================================
' GLAPI void APIENTRY glEndTransformFeedbackNV (void);
' typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKNVPROC) (void);
' ========================================================================================
DECLARE SUB Proto_glEndTransformFeedbackNV
MACRO glEndTransformFeedbackNV
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glEndTransformFeedbackNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glEndTransformFeedbackNV
END MACRO
' ========================================================================================

' ========================================================================================
' void glTransformFeedbackAttribsNV (GLuint count, const GLint *attribs, GLenum bufferMode);
' ========================================================================================
DECLARE SUB Proto_glTransformFeedbackAttribsNV (BYVAL DWORD, BYREF LONG, BYVAL DWORD)
MACRO glTransformFeedbackAttribsNV(dwcount, pattribs, dwbufferMode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTransformFeedbackAttribsNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glTransformFeedbackAttribsNV(dwcount, pattribs, dwbufferMode)
END MACRO
' ========================================================================================

' ========================================================================================
' void glBindBufferRangeNV (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
' ========================================================================================
DECLARE SUB Proto_glBindBufferRangeNV (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glBindBufferRangeNV(dwtarget, dwindex, dwbuffer, dwoffset, dwsize)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBindBufferRangeNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindBufferRangeNV(dwtarget, dwindex, dwbuffer, dwoffset, dwsize)
END MACRO
' ========================================================================================

' ========================================================================================
' void glBindBufferOffsetNV (GLenum target, GLuint index, GLuint buffer, GLintptr offset);
' ========================================================================================
DECLARE SUB Proto_glBindBufferOffsetNV (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glBindBufferOffsetNV(dwtarget, dwindex, dwbuffer, dwoffset)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBindBufferOffsetNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindBufferOffsetNV(dwtarget, dwindex, dwbuffer, dwoffset)
END MACRO
' ========================================================================================

' ========================================================================================
' void glBindBufferBaseNV (GLenum target, GLuint index, GLuint buffer);
' ========================================================================================
DECLARE SUB Proto_glBindBufferBaseNV (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glBindBufferBaseNV(dwtarget, dwindex, dwbuffer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBindBufferBaseNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindBufferBaseNV(dwtarget, dwindex, dwbuffer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTransformFeedbackVaryingsNV (GLuint program, GLsizei count,
' const GLint *locations, GLenum bufferMode);
' ========================================================================================
DECLARE SUB Proto_glTransformFeedbackVaryingsNV (BYVAL DWORD, BYVAL LONG, BYREF LONG, BYVAL DWORD)
MACRO glTransformFeedbackVaryingsNV(dwprogram, icount, plocations, dwbufferMode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTransformFeedbackVaryingsNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glTransformFeedbackVaryingsNV(dwprogram, icount, plocations, dwbufferMode)
END MACRO
' ========================================================================================

' ========================================================================================
' void glActiveVaryingNV (GLuint program, const GLchar *name);
' ========================================================================================
DECLARE SUB Proto_glActiveVaryingNV (BYVAL DWORD, BYREF ASCIIZ)
MACRO glActiveVaryingNV(dwprogram, szname)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glActiveVaryingNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glActiveVaryingNV(dwprogram, szname)
END MACRO
' ========================================================================================

' ========================================================================================
' GLint glGetVaryingLocationNV (GLuint program, const GLchar *name);
' ========================================================================================
DECLARE FUNCTION Proto_glGetVaryingLocationNV (BYVAL DWORD, BYREF ASCIIZ) AS LONG
MACRO FUNCTION glGetVaryingLocationNV(dwprogram, szname)
   MACROTEMP pProc, lRes
   LOCAL pProc AS DWORD, lRes AS LONG
   pProc = wglGetProcAddress("glGetVaryingLocationNV")
   IF pProc THENCALL DWORD pProc USING Proto_glGetVaryingLocationNV(dwprogram, szname) TO lRes
END MACRO = lRes
' ========================================================================================

' ========================================================================================
' void glGetActiveVaryingNV (GLuint program, GLuint index, GLsizei bufSize,
' GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
' ========================================================================================
DECLARE SUB Proto_glGetActiveVaryingNV (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYREF LONG, BYREF LONG, BYREF DWORD, BYREF ASCIIZ)
MACRO glGetActiveVaryingNV(dwprogram, dwindex, ibuffSize, plength, psize, dwtype, szname)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetActiveVaryingNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetActiveVaryingNV(dwprogram, dwindex, ibuffSize, plength, psize, dwtype, szname)
END MACRO
' ========================================================================================

' ========================================================================================
' GLAPI void APIENTRY glGetTransformFeedbackVaryingNV (GLuint, GLuint, GLint *);
' typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC) (GLuint program, GLuint index, GLint *location);
' ========================================================================================
DECLARE SUB Proto_glGetTransformFeedbackVaryingNV (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetTransformFeedbackVaryingNV(dwprogram, dwindex, plocation)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetTransformFeedbackVaryingNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetTransformFeedbackVaryingNV(dwprogram, dwindex, plocation)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_bindable_uniform)
%GL_EXT_bindable_uniform = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glUniformBufferEXT (GLuint program, GLint location, GLuint buffer);
' ========================================================================================
DECLARE SUB Proto_glUniformBufferEXT (BYVAL DWORD, BYVAL LONG, BYVAL DWORD)
MACRO glUniformBufferEXT(dwprogram, ilocation, dwbuffer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glUniformBufferEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glUniformBufferEXT(dwprogram, ilocation, dwbuffer)
END MACRO
' ========================================================================================

' ========================================================================================
' GLint glGetUniformBufferSizeEXT (GLuint program, GLint location);
' ========================================================================================
DECLARE FUNCTION Proto_glGetUniformBufferSizeEXT (BYVAL DWORD, BYVAL LONG) AS LONG
MACRO FUNCTION glGetUniformBufferSizeEXT(dwprogram, ilocation)
   MACROTEMP pProc, lRes
   LOCAL pProc AS DWORD, lRes AS LONG
   pProc = wglGetProcAddress("glGetUniformBufferSizeEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetUniformBufferSizeEXT(dwprogram, ilocation) TO lRes
END MACRO = lRes
' ========================================================================================

' ========================================================================================
' GLintptr glGetUniformOffsetEXT (GLuint program, GLint location);
' ========================================================================================
DECLARE FUNCTION Proto_glGetUniformOffsetEXT (BYVAL DWORD, BYVAL LONG) AS DWORD
MACRO FUNCTION glGetUniformOffsetEXT(dwprogram, ilocation)
   MACROTEMP pProc, dwRes
   LOCAL pProc, dwRes AS DWORD
   pProc = wglGetProcAddress("glGetUniformOffsetEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetUniformOffsetEXT(dwprogram, ilocation) TO dwRes
END MACRO = dwRes
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF


#IF NOT %DEF(%GL_EXT_texture_integer)
%GL_EXT_texture_integer = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glTexParameterIivEXT (GLenum target, GLenum pname, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glTexParameterIivEXT (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glTexParameterIivEXT(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexParameterIivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexParameterIivEXT(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTexParameterIuivEXT (GLenum target, GLenum pname, const GLuint *params);
' ========================================================================================
DECLARE SUB Proto_glTexParameterIuivEXT (BYVAL DWORD, BYVAL DWORD, BYREF DWORD)
MACRO glTexParameterIuivEXT(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTexParameterIuivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTexParameterIuivEXT(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetTexParameterIivEXT (GLenum target, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetTexParameterIivEXT (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetTexParameterIivEXT(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetTexParameterIivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetTexParameterIivEXT(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetTexParameterIuivEXT (GLenum target, GLenum pname, GLuint *params);
' ========================================================================================
DECLARE SUB Proto_glGetTexParameterIuivEXT (BYVAL DWORD, BYVAL DWORD, BYREF DWORD)
MACRO glGetTexParameterIuivEXT(dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetTexParameterIuivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetTexParameterIuivEXT(dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glClearColorIiEXT (GLint red, GLint green, GLint blue, GLint alpha);
' ========================================================================================
DECLARE SUB Proto_glClearColorIiEXT (BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glClearColorIiEXT(red, green, blue, alpha)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glClearColorIiEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glClearColorIiEXT(red, green, blue, alpha)
END MACRO
' ========================================================================================

' ========================================================================================
' void glClearColorIuiEXT (GLuint red, GLuint green, GLuint blue, GLuint alpha);
' ========================================================================================
DECLARE SUB Proto_glClearColorIuiEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glClearColorIuiEXT(red, green, blue, alpha)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glClearColorIuiEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glClearColorIuiEXT(red, green, blue, alpha)
END MACRO
' ========================================================================================
'#ENDIF ' %GL_GLEXT_PROTOTYPES

#ENDIF

#IF NOT %DEF(%GL_GREMEDY_frame_terminator)
%GL_GREMEDY_frame_terminator = 1

'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' GLAPI void APIENTRY glFrameTerminatorGREMEDY (void);
' typedef void (APIENTRYP PFNGLFRAMETERMINATORGREMEDYPROC) (void);
' ========================================================================================
DECLARE SUB Proto_glFrameTerminatorGREMEDY
MACRO glFrameTerminatorGREMEDY
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFrameTerminatorGREMEDY")
   IF pProc THEN CALL DWORD pProc USING Proto_glFrameTerminatorGREMEDY
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES

#ENDIF

#IF NOT %DEF(%GL_NV_conditional_render)
%GL_NV_conditional_render = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glBeginConditionalRenderNV (GLuint id, GLenum mode);
' ========================================================================================
DECLARE SUB Proto_glBeginConditionalRenderNV (BYVAL DWORD, BYVAL DWORD)
MACRO glBeginConditionalRenderNV(dwid, dwmode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBeginConditionalRenderNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glBeginConditionalRenderNV(dwid, dwmode)
END MACRO
' ========================================================================================

' ========================================================================================
' void glEndConditionalRenderNV (void);
' ========================================================================================
DECLARE SUB Proto_glEndConditionalRenderNV
MACRO glEndConditionalRenderNV
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glEndConditionalRenderNV")
   IF pProc THEN CALL DWORD pProc USING Proto_glEndConditionalRenderNV
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES
#ENDIF

#IF NOT %DEF(%GL_NV_present_video)
%GL_NV_present_video = 1
#ENDIF

#IF NOT %DEF(%GL_EXT_transform_feedback)
%GL_EXT_transform_feedback = 1
'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glBeginTransformFeedbackEXT (GLenum primitiveMode);
' ========================================================================================
DECLARE SUB Proto_glBeginTransformFeedbackEXT (BYVAL DWORD)
MACRO glBeginTransformFeedbackEXT(dwprimitiveMode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBeginTransformFeedbackEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBeginTransformFeedbackEXT(dwprimitiveMode)
END MACRO
' ========================================================================================

' ========================================================================================
' void glEndTransformFeedbackEXT (void);
' ========================================================================================
DECLARE SUB Proto_glEndTransformFeedbackEXT
MACRO glEndTransformFeedbackEXT
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glEndTransformFeedbackEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glEndTransformFeedbackEXT
END MACRO
' ========================================================================================

' ========================================================================================
' void glBindBufferRangeEXT (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
' ========================================================================================
DECLARE SUB Proto_glBindBufferRangeEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glBindBufferRangeEXT(dwtarget, dwindex, dwbuffer, dwoffset, dwsize)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBindBufferRangeEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindBufferRangeEXT(dwtarget, dwindex, dwbuffer, dwoffset, dwsize)
END MACRO
' ========================================================================================

' ========================================================================================
' void glBindBufferOffsetEXT (GLenum target, GLuint index, GLuint buffer, GLintptr offset);
' ========================================================================================
DECLARE SUB Proto_glBindBufferOffsetEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glBindBufferOffsetEXT(dwtarget, dwindex, dwbuffer, dwoffset)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBindBufferOffsetEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindBufferOffsetEXT(dwtarget, dwindex, dwbuffer, dwoffset)
END MACRO
' ========================================================================================

' ========================================================================================
' void glBindBufferBaseEXT (GLenum target, GLuint index, GLuint buffer);
' ========================================================================================
DECLARE SUB Proto_glBindBufferBaseEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glBindBufferBaseEXT(dwtarget, dwindex, dwbuffer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBindBufferBaseEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindBufferBaseEXT(dwtarget, dwindex, dwbuffer, dwoffset)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTransformFeedbackVaryingsEXT (GLuint program, GLsizei count,
' const GLint *locations, GLenum bufferMode);
' ========================================================================================
DECLARE SUB Proto_glTransformFeedbackVaryingsEXT (BYVAL DWORD, BYVAL LONG, BYREF LONG, BYVAL DWORD)
MACRO glTransformFeedbackVaryingsEXT(dwprogram, icount, plocations, dwbufferMode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTransformFeedbackVaryingsEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTransformFeedbackVaryingsEXT(dwprogram, icount, plocations, dwbufferMode)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetTransformFeedbackVaryingEXT (GLuint program, GLuint index, GLint *location);
' ========================================================================================
DECLARE SUB Proto_glGetTransformFeedbackVaryingEXT (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetTransformFeedbackVaryingEXT(dwprogram, dwindex, plocation)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetTransformFeedbackVaryingEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetTransformFeedbackVaryingEXT(dwprogram, dwindex, plocation)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES

#ENDIF

#IF NOT %DEF(%GL_EXT_direct_state_access)
%GL_EXT_direct_state_access = 1

'#IF %DEF(%GL_GLEXT_PROTOTYPES)

' ========================================================================================
' void glClientAttribDefaultEXT (GLbitfield mask);
' ========================================================================================
DECLARE SUB Proto_glClientAttribDefaultEXT (BYVAL DWORD)
MACRO glClientAttribDefaultEXT(dwmask)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glClientAttribDefaultEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glClientAttribDefaultEXT(dwmask)
END MACRO
' ========================================================================================

' ========================================================================================
' void glPushClientAttribDefaultEXT (GLbitfield mask);
' ========================================================================================
DECLARE SUB Proto_glPushClientAttribDefaultEXT (BYVAL DWORD)
MACRO glPushClientAttribDefaultEXT(dwmask)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glPushClientAttribDefaultEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glPushClientAttribDefaultEXT(dwmask)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMatrixLoadfEXT (GLenum mode, const GLfloat *m);
' ========================================================================================
DECLARE SUB Proto_glMatrixLoadfEXT (BYVAL DWORD, BYREF SINGLE)
MACRO glMatrixLoadfEXT(dwmode, m)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMatrixLoadfEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMatrixLoadfEXT(dwmode, m)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMatrixLoaddEXT (GLenum mode, const GLdouble *m);
' ========================================================================================
DECLARE SUB Proto_glMatrixLoaddEXT (BYVAL DWORD, BYREF DOUBLE)
MACRO glMatrixLoaddEXT(dwmode, m)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMatrixLoaddEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMatrixLoaddEXT(dwmode, m)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMatrixMultfEXT (GLenum mode, const GLfloat *m);
' ========================================================================================
DECLARE SUB Proto_glMatrixMultfEXT (BYVAL DWORD, BYREF SINGLE)
MACRO glMatrixMultfEXT(dwmode, m)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMatrixMultfEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMatrixMultfEXT(dwmode, m)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMatrixMultdEXT (GLenum mode, const GLdouble *m);
' ========================================================================================
DECLARE SUB Proto_glMatrixMultdEXT (BYVAL DWORD, BYREF DOUBLE)
MACRO glMatrixMultdEXT(dwmode, m)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMatrixMultdEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMatrixMultdEXT(dwmode, m)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMatrixLoadIdentityEXT (GLenum mode);
' ========================================================================================
DECLARE SUB Proto_glMatrixLoadIdentityEXT (BYVAL DWORD)
MACRO glMatrixLoadIdentityEXT(dwmode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMatrixLoadIdentityEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMatrixLoadIdentityEXT(dwmode)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMatrixRotatefEXT (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
' ========================================================================================
DECLARE SUB Proto_glMatrixRotatefEXT (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glMatrixRotatefEXT(dwmode, fangle, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMatrixRotatefEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMatrixRotatefEXT(dwmode, fangle, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMatrixRotatedEXT (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
' ========================================================================================
DECLARE SUB Proto_glMatrixRotatedEXT (BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glMatrixRotatedEXT(dwmode, fangle, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMatrixRotatedEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMatrixRotatedEXT(dwmode, fangle, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMatrixScalefEXT (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
' ========================================================================================
DECLARE SUB Proto_glMatrixScalefEXT (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glMatrixScalefEXT(dwmode, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMatrixScalefEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMatrixScalefEXT(dwmode, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMatrixScaledEXT (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
' ========================================================================================
DECLARE SUB Proto_glMatrixScaledEXT (BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glMatrixScaledEXT(dwmode, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMatrixScaledEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMatrixScaledEXT(dwmode, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMatrixTranslatefEXT (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
' ========================================================================================
DECLARE SUB Proto_glMatrixTranslatefEXT (BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glMatrixTranslatefEXT(dwmode, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMatrixTranslatefEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMatrixTranslatefEXT(dwmode, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMatrixTranslatedEXT (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
' ========================================================================================
DECLARE SUB Proto_glMatrixTranslatedEXT (BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glMatrixTranslatedEXT(dwmode, x, y, z)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMatrixTranslatedEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMatrixTranslatedEXT(dwmode, x, y, z)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMatrixFrustumEXT (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom,
' GLdouble top, GLdouble zNear, GLdouble zFar);
' ========================================================================================
DECLARE SUB Proto_glMatrixFrustumEXT (BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glMatrixFrustumEXT(dwmode, dleft, dright, dbottom, dtop, zNear, zFar)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMatrixFrustumEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMatrixFrustumEXT(dwmode, dleft, dright, dbottom, dtop, zNear, zFar)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMatrixOrthoEXT (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom,
' GLdouble top, GLdouble zNear, GLdouble zFar);
' ========================================================================================
DECLARE SUB Proto_glMatrixOrthoEXT (BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glMatrixOrthoEXT(dwmode, dleft, dright, dbottom, dtop, zNear, zFar)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMatrixOrthoEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMatrixOrthoEXT(dwmode, dleft, dright, dbottom, dtop, zNear, zFar)
END MACRO
' ========================================================================================

' ========================================================================================
' GLAPI void APIENTRY glMatrixPopEXT (GLenum);
' typedef void (APIENTRYP PFNGLMATRIXPOPEXTPROC) (GLenum mode);
' ========================================================================================
DECLARE SUB Proto_glMatrixPopEXT (BYVAL DWORD)
MACRO glMatrixPopEXT(dwmode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMatrixPopEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMatrixPopEXT(dwmode)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMatrixPushEXT (GLenum mode);
' ========================================================================================
DECLARE SUB Proto_glMatrixPushEXT (BYVAL DWORD)
MACRO glMatrixPushEXT(dwmode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMatrixPushEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMatrixPushEXT(dwmode)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMatrixLoadTransposefEXT (GLenum mode, const GLfloat *m);
' ========================================================================================
DECLARE SUB Proto_glMatrixLoadTransposefEXT (BYVAL DWORD, BYREF SINGLE)
MACRO glMatrixLoadTransposefEXT(dwmode, m)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMatrixLoadTransposefEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMatrixLoadTransposefEXT(dwmode, m)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMatrixLoadTransposedEXT (GLenum mode, const GLdouble *m);
' ========================================================================================
DECLARE SUB Proto_glMatrixLoadTransposedEXT (BYVAL DWORD, BYREF DOUBLE)
MACRO glMatrixLoadTransposedEXT(dwmode, m)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMatrixLoadTransposedEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMatrixLoadTransposedEXT(dwmode, m)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMatrixMultTransposefEXT (GLenum mode, const GLfloat *m);
' ========================================================================================
DECLARE SUB Proto_glMatrixMultTransposefEXT (BYVAL DWORD, BYREF SINGLE)
MACRO glMatrixMultTransposefEXT(dwmode, m)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMatrixMultTransposefEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMatrixMultTransposefEXT(dwmode, m)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMatrixMultTransposedEXT (GLenum mode, const GLdouble *m);
' ========================================================================================
DECLARE SUB Proto_glMatrixMultTransposedEXT (BYVAL DWORD, BYREF DOUBLE)
MACRO glMatrixMultTransposedEXT(dwmode, m)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMatrixMultTransposedEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMatrixMultTransposedEXT(dwmode, m)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTextureParameterfEXT (GLuint texture, GLenum target, GLenum pname, GLfloat param);
' ========================================================================================
DECLARE SUB Proto_glTextureParameterfEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL SINGLE)
MACRO glTextureParameterfEXT(dwtexture, dwtarget, pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTextureParameterfEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTextureParameterfEXT(dwtexture, dwtarget, pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTextureParameterfvEXT (GLuint texture, GLenum target, GLenum pname, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glTextureParameterfvEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glTextureParameterfvEXT(dwtexture, dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTextureParameterfvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTextureParameterfvEXT(dwtexture, dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTextureParameteriEXT (GLuint texture, GLenum target, GLenum pname, GLint param);
' ========================================================================================
DECLARE SUB Proto_glTextureParameteriEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG)
MACRO glTextureParameteriEXT(dwtexture, dwtarget, pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTextureParameteriEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTextureParameteriEXT(dwtexture, dwtarget, pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTextureParameterivEXT (GLuint texture, GLenum target, GLenum pname, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glTextureParameterivEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glTextureParameterivEXT(dwtexture, dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTextureParameterivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTextureParameterivEXT(dwtexture, dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTextureImage1DEXT (GLuint texture, GLenum target, GLint level,
' GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type,
' const GLvoid *pixels);
' ========================================================================================
DECLARE SUB Proto_glTextureImage1DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glTextureImage1DEXT(dwtexture, dwtarget, ilevel, internalformat, iwidth, iborder, dwformat, dwtype, ppixels)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTextureImage1DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTextureImage1DEXT(dwtexture, dwtarget, ilevel, internalformat, iwidth, iborder, dwformat, dwtype, ppixels)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTextureImage2DEXT (GLuint texture, GLenum target, GLint level,
' GLenum internalformat, GLsizei width, GLsizei height, GLint border,
' GLenum format, GLenum type, const GLvoid *pixels);
' ========================================================================================
DECLARE SUB Proto_glTextureImage2DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glTextureImage2DEXT(dwtexture, dwtarget, ilevel, internalformat, iwidth, iborder, dwformat, dwtype, ppixels)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTextureImage2DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTextureImage2DEXT(dwtexture, dwtarget, ilevel, internalformat, iwidth, iborder, dwformat, dwtype, ppixels)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset,
' GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
' ========================================================================================
DECLARE SUB Proto_glTextureSubImage1DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glTextureSubImage1DEXT(dwtexture, dwtarget, ilevel, xoffset, iwidth, dwformat, dwtype, ppixels)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTextureSubImage1DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTextureSubImage1DEXT(dwtexture, dwtarget, ilevel, internalformat, iwidth, iborder, dwformat, dwtype, ppixels)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset,
' GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
' ========================================================================================
DECLARE SUB Proto_glTextureSubImage2DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glTextureSubImage2DEXT(dwtexture, dwtarget, ilevel, xoffset, yoffset, iwidth, iheight, dwformat, dwtype, ppixels)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTextureSubImage2DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTextureSubImage2DEXT(dwtexture, dwtarget, ilevel, internalformat, iwidth, iborder, dwformat, dwtype, ppixels)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCopyTextureImage1DEXT (GLuint texture, GLenum target, GLint level,
' GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
' ========================================================================================
DECLARE SUB Proto_glCopyTextureImage1DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glCopyTextureImage1DEXT(dwtexture, dwtarget, ilevel, internalformat, x, y, iwidth, iborder)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCopyTextureImage1DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCopyTextureImage1DEXT(dwtexture, dwtarget, ilevel, internalformat, x, y, iwidth, iborder)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCopyTextureImage2DEXT (GLuint texture, GLenum target, GLint level,
' GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
' ========================================================================================
DECLARE SUB Proto_glCopyTextureImage2DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glCopyTextureImage2DEXT(dwtexture, dwtarget, ilevel, internalformat, x, y, iwidth, iborder)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCopyTextureImage2DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCopyTextureImage2DEXT(dwtexture, dwtarget, ilevel, internalformat, x, y, iwidth, iborder)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCopyTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level,
' GLint xoffset, GLint x, GLint y, GLsizei width);
' ========================================================================================
DECLARE SUB Proto_glCopyTextureSubImage1DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glCopyTextureSubImage1DEXT(dwtexture, dwtarget, ilevel, xoffset, x, y, iwidth)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCopyTextureSubImage1DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCopyTextureSubImage1DEXT(dwtexture, dwtarget, ilevel, xoffset, x, y, iwidth)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCopyTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level,
' GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
' ========================================================================================
DECLARE SUB Proto_glCopyTextureSubImage2DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glCopyTextureSubImage2DEXT(dwtexture, dwtarget, ilevel, xoffset, yoffset, x, y, iwidth, iheight)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCopyTextureSubImage2DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCopyTextureSubImage2DEXT(dwtexture, dwtarget, ilevel, xoffset, yoffset, x, y, iwidth, iheight)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetTextureImageEXT (GLuint texture, GLenum target, GLint level, GLenum format,
' GLenum type, GLvoid *pixels);
' ========================================================================================
DECLARE SUB Proto_glGetTextureImageEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glGetTextureImageEXT(dwtexture, dwtarget, ilevel, dwformat, dwtype, ppixels)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetTextureImageEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetTextureImageEXT(dwtexture, dwtarget, ilevel, dwformat, dwtype, ppixels)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetTextureParameterfvEXT (GLuint texture, GLenum target, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetTextureParameterfvEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetTextureParameterfvEXT(dwtexture, dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetTextureParameterfvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetTextureParameterfvEXT(dwtexture, dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetTextureParameterivEXT (GLuint texture, GLenum target, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetTextureParameterivEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetTextureParameterivEXT(dwtexture, dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetTextureParameterivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetTextureParameterivEXT(dwtexture, dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetTextureLevelParameterfvEXT (GLuint texture, GLenum target, GLint level,
' GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetTextureLevelParameterfvEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYREF SINGLE)
MACRO glGetTextureLevelParameterfvEXT(dwtexture, dwtarget, ilevel, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetTextureLevelParameterfvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetTextureLevelParameterfvEXT(dwtexture, dwtarget, ilevel, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetTextureLevelParameterivEXT (GLuint texture, GLenum target, GLint level,
' GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetTextureLevelParameterivEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYREF LONG)
MACRO glGetTextureLevelParameterivEXT(dwtexture, dwtarget, ilevel, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetTextureLevelParameterivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetTextureLevelParameterivEXT(dwtexture, dwtarget, ilevel, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTextureImage3DEXT (GLuint texture, GLenum target, GLint level,
' GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth,
' GLint border, GLenum format, GLenum type, const GLvoid *pixels);
' ========================================================================================
DECLARE SUB Proto_glTextureImage3DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glTextureImage3DEXT(dwtexture, dwtarget, ilevel, internalformat, iwidth, iheight, idepth, iborder, dwformat, dwtype, ppixels)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTextureImage3DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTextureImage3DEXT(dwtexture, dwtarget, ilevel, internalformat, iwidth, iheight, idepth, iborder, dwformat, dwtype, ppixels)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset,
' GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth,
' GLenum format, GLenum type, const GLvoid *pixels);
' ========================================================================================
DECLARE SUB Proto_glTextureSubImage3DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glTextureSubImage3DEXT(dwtexture, dwtarget, ilevel, xoffset, yoffset, zoffset, iwidth, iheight, idepth, dwformat, dwtype, ppixels)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTextureSubImage3DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTextureSubImage3DEXT(dwtexture, dwtarget, ilevel, xoffset, yoffset, zoffset, iwidth, iheight, idepth, dwformat, dwtype, ppixels)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCopyTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level,
' GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
' ========================================================================================
DECLARE SUB Proto_glCopyTextureSubImage3DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glCopyTextureSubImage3DEXT(dwtexture, dwtarget, ilevel, xoffset, yoffset, zoffset, x, y, iwidth, iheight)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCopyTextureSubImage3DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCopyTextureSubImage3DEXT(dwtexture, dwtarget, ilevel, xoffset, yoffset, zoffset, x, y, iwidth, iheight)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexParameterfEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
' ========================================================================================
DECLARE SUB Proto_glMultiTexParameterfEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL SINGLE)
MACRO glMultiTexParameterfEXT(dwtexunit, dwtarget, pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexParameterfEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexParameterfEXT(dwtexunit, dwtarget, pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexParameterfvEXT (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glMultiTexParameterfvEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glMultiTexParameterfvEXT(dwtexunit, dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexParameterfvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexParameterfvEXT(dwtexunit, dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexParameteriEXT (GLenum texunit, GLenum target, GLenum pname, GLint param);
' ========================================================================================
DECLARE SUB Proto_glMultiTexParameteriEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG)
MACRO glMultiTexParameteriEXT(dwtexunit, dwtarget, pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexParameteriEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexParameteriEXT(dwtexunit, dwtarget, pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexParameterivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glMultiTexParameterivEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glMultiTexParameterivEXT(dwtexunit, dwtarget, pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexParameterivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexParameterivEXT(dwtexunit, dwtarget, pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level,
' GLenum internalformat, GLsizei width, GLint border, GLenum format,
' GLenum type, const GLvoid *pixels);
' ========================================================================================
DECLARE SUB Proto_glMultiTexImage1DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glMultiTexImage1DEXT(dwtexunit, dwtarget, ilevel, internalformat, iwidth, iborder, dwformat, dwtype, ppixels)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexImage1DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexImage1DEXT(dwtexunit, dwtarget, ilevel, internalformat, iwidth, iborder, dwformat, dwtype, ppixels)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level,
' GLenum internalformat, GLsizei width, GLsizei height, GLint border,
' GLenum format, GLenum type, const GLvoid *pixels);
' ========================================================================================
DECLARE SUB Proto_glMultiTexImage2DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glMultiTexImage2DEXT(dwtexunit, dwtarget, ilevel, internalformat, iwidth, iheight, iborder, dwformat, dwtype, ppixels)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexImage2DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexImage2DEXT(dwtexunit, dwtarget, ilevel, internalformat, iwidth, iheight, iborder, dwformat, dwtype, ppixels)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset,
' GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
' ========================================================================================
DECLARE SUB Proto_glMultiTexSubImage1DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glMultiTexSubImage1DEXT(dwtexunit, dwtarget, ilevel, xoffset, iwidth, dwformat, dwtype, ppixels)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexSubImage1DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexSubImage1DEXT(dwtexunit, dwtarget, ilevel, xoffset, iwidth, dwformat, dwtype, ppixels)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level,
' GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format,
' GLenum type, const GLvoid *pixels);
' ========================================================================================
DECLARE SUB Proto_glMultiTexSubImage2DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glMultiTexSubImage2DEXT(dwtexunit, dwtarget, ilevel, xoffset, yoffset, iwidth, iheight, dwformat, dwtype, ppixels)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexSubImage2DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexSubImage2DEXT(dwtexunit, dwtarget, ilevel, xoffset, yoffset, iwidth, iheight, dwformat, dwtype, ppixels)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCopyMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level,
' GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
' ========================================================================================
DECLARE SUB Proto_glCopyMultiTexImage1DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glCopyMultiTexImage1DEXT(dwtexunit, dwtarget, ilevel, internalformat, x, y, iwidth, iborder)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCopyMultiTexImage1DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCopyMultiTexImage1DEXT(dwtexunit, dwtarget, ilevel, internalformat, x, y, iwidth, iborder)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCopyMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level,
' GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
' ========================================================================================
DECLARE SUB Proto_glCopyMultiTexImage2DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glCopyMultiTexImage2DEXT(dwtexunit, dwtarget, ilevel, internalformat, x, y, iwidth, iheight, iborder)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCopyMultiTexImage2DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCopyMultiTexImage2DEXT(dwtexunit, dwtarget, ilevel, internalformat, x, y, iwidth, iheight, iborder)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCopyMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level,
' GLint xoffset, GLint x, GLint y, GLsizei width);
' ========================================================================================
DECLARE SUB Proto_glCopyMultiTexSubImage1DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glCopyMultiTexSubImage1DEXT(dwtexunit, dwtarget, ilevel, xoffset, x, y, iwidth)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCopyMultiTexSubImage1DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCopyMultiTexSubImage1DEXT(dwtexunit, dwtarget, ilevel, xoffset, x, y, iwidth)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCopyMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level,
' GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
' ========================================================================================
DECLARE SUB Proto_glCopyMultiTexSubImage2DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glCopyMultiTexSubImage2DEXT(dwtexunit, dwtarget, ilevel, xoffset, yoffset, x, y, iwidth, iheight)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCopyMultiTexSubImage2DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCopyMultiTexSubImage2DEXT(dwtexunit, dwtarget, ilevel, xoffset, yoffset, x, y, iwidth, iheight)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetMultiTexImageEXT (GLenum texunit, GLenum target, GLint level, GLenum format,
' GLenum type, GLvoid *pixels);
' ========================================================================================
DECLARE SUB Proto_glGetMultiTexImageEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glGetMultiTexImageEXT(dwtexunit, dwtarget, ilevel, dwformat, dwtype, ppixels)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetMultiTexImageEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetMultiTexImageEXT(dwtexunit, dwtarget, ilevel, dwformat, dwtype, ppixels)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetMultiTexParameterfvEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetMultiTexParameterfvEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetMultiTexParameterfvEXT(dwtexunit, dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetMultiTexParameterfvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetMultiTexParameterfvEXT(dwtexunit, dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetMultiTexParameterivEXT (GLenum texunit, GLenum target, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetMultiTexParameterivEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetMultiTexParameterivEXT(dwtexunit, dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetMultiTexParameterivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetMultiTexParameterivEXT(dwtexunit, dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetMultiTexLevelParameterfvEXT (GLenum texunit, GLenum target, GLint level,
' GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetMultiTexLevelParameterfvEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYREF SINGLE)
MACRO glGetMultiTexLevelParameterfvEXT(dwtexunit, dwtarget, ilevel, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetMultiTexLevelParameterfvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetMultiTexLevelParameterfvEXT(dwtexunit, dwtarget, ilevel, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetMultiTexLevelParameterivEXT (GLenum texunit, GLenum target, GLint level,
' GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetMultiTexLevelParameterivEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYREF LONG)
MACRO glGetMultiTexLevelParameterivEXT(dwtexunit, dwtarget, ilevel, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetMultiTexLevelParameterivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetMultiTexLevelParameterivEXT(dwtexunit, dwtarget, ilevel, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexImage3DEXT (GLenum texunit, GLenum target, GLint level,
' GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth,
' GLint border, GLenum format, GLenum type, const GLvoid *pixels);
' ========================================================================================
DECLARE SUB Proto_glMultiTexImage3DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glMultiTexImage3DEXT(dwtexunit, dwtarget, ilevel, internalformat, iwidth, iheight, idepth, iborder, dwformat, dwtype, ppixels)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexImage3DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexImage3DEXT(dwtexunit, dwtarget, ilevel, internalformat, iwidth, iheight, idepth, iborder, dwformat, dwtype, ppixels)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level,
' GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height,
' GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
' ========================================================================================
DECLARE SUB Proto_glMultiTexSubImage3DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glMultiTexSubImage3DEXT(dwtexunit, dwtarget, ilevel, xoffset, yoffset, zoffset, iwidth, iheight, idepth, dwformat, dwtype, ppixels)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexSubImage3DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexSubImage3DEXT(dwtexunit, dwtarget, ilevel, xoffset, yoffset, zoffset, iwidth, iheight, idepth, dwformat, dwtype, ppixels)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCopyMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level,
' GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
' ========================================================================================
DECLARE SUB Proto_glCopyMultiTexSubImage3DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glCopyMultiTexSubImage3DEXT(dwtexunit, dwtarget, ilevel, xoffset, yoffset, zoffset, x, y, iwidth, iheight)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCopyMultiTexSubImage3DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCopyMultiTexSubImage3DEXT(dwtexunit, dwtarget, ilevel, xoffset, yoffset, zoffset, x, y, iwidth, iheight)
END MACRO
' ========================================================================================

' ========================================================================================
' GLAPI void APIENTRY glBindMultiTextureEXT (GLenum, GLenum, GLuint);
' typedef void (APIENTRYP PFNGLBINDMULTITEXTUREEXTPROC) (GLenum texunit, GLenum target, GLuint texture);
' ========================================================================================
DECLARE SUB Proto_glBindMultiTextureEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glBindMultiTextureEXT(dwtexunit, dwtarget, dwtexture)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glBindMultiTextureEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glBindMultiTextureEXT(dwtexunit, dwtarget, dwtexture)
END MACRO
' ========================================================================================

' ========================================================================================
' void glEnableClientStateIndexedEXT (GLenum array, GLuint index);
' ========================================================================================
DECLARE SUB Proto_glEnableClientStateIndexedEXT (BYVAL DWORD, BYVAL DWORD)
MACRO glEnableClientStateIndexedEXT(dwarray, dwindex)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glEnableClientStateIndexedEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glEnableClientStateIndexedEXT(dwarray, dwindex)
END MACRO
' ========================================================================================

' ========================================================================================
' void glDisableClientStateIndexedEXT (GLenum array, GLuint index);
' ========================================================================================
DECLARE SUB Proto_glEnableClientStateIndexedEXT (BYVAL DWORD, BYVAL DWORD)
MACRO glDisableClientStateIndexedEXT(dwarray, dwindex)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glDisableClientStateIndexedEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glDisableClientStateIndexedEXT(dwarray, dwindex)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexCoordPointerEXT (GLenum texunit, GLint size, GLenum type, GLsizei stride,
' const GLvoid *pointer);
' ========================================================================================
DECLARE SUB Proto_glMultiTexCoordPointerEXT (BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glMultiTexCoordPointerEXT(dwtexunit, dwsize, dwtype, istride, ppointer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexCoordPointerEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexCoordPointerEXT(dwtexunit, dwsize, dwtype, istride, ppointer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexEnvfEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
' ========================================================================================
DECLARE SUB Proto_glMultiTexEnvfEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL SINGLE)
MACRO glMultiTexEnvfEXT(dwtexunit, dwtarget, pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexEnvfEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexEnvfEXT(dwtexunit, dwtarget, pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexEnvfvEXT (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glMultiTexEnvfvEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glMultiTexEnvfvEXT(dwtexunit, dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexEnvfvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexEnvfvEXT(dwtexunit, dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexEnviEXT (GLenum texunit, GLenum target, GLenum pname, GLint param);
' ========================================================================================
DECLARE SUB Proto_glMultiTexEnviEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG)
MACRO glMultiTexEnviEXT(dwtexunit, dwtarget, pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexEnviEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexEnviEXT(dwtexunit, dwtarget, pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexEnvivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glMultiTexEnvivEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glMultiTexEnvivEXT(dwtexunit, dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexEnvivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexEnvivEXT(dwtexunit, dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexGendEXT (GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
' ========================================================================================
DECLARE SUB Proto_glMultiTexGendEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DOUBLE)
MACRO glMultiTexGendEXT(dwtexunit, dwtarget, pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexGendEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexGendEXT(dwtexunit, dwtarget, pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexGendvEXT (GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params);
' ========================================================================================
DECLARE SUB Proto_glMultiTexGendvEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF DOUBLE)
MACRO glMultiTexGendvEXT(dwtexunit, dwtarget, pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexGendvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexGendvEXT(dwtexunit, dwtarget, pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexGenfEXT (GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
' ========================================================================================
DECLARE SUB Proto_glMultiTexGenfEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL SINGLE)
MACRO glMultiTexGenfEXT(dwtexunit, dwtarget, pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexGenfEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexGenfEXT(dwtexunit, dwtarget, pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexGenfvEXT (GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glMultiTexGenfvEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glMultiTexGenfvEXT(dwtexunit, dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexGenfvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexGenfvEXT(dwtexunit, dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexGeniEXT (GLenum texunit, GLenum coord, GLenum pname, GLint param);
' ========================================================================================
DECLARE SUB Proto_glMultiTexGeniEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG)
MACRO glMultiTexGeniEXT(dwtexunit, dwcoord, pname, param)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexGeniEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexGeniEXT(dwtexunit, dwcoord, pname, param)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexGenivEXT (GLenum texunit, GLenum coord, GLenum pname, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glMultiTexGenivEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glMultiTexGenivEXT(dwtexunit, dwcoord, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexGenivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexGenivEXT(dwtexunit, dwcoord, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetMultiTexEnvfvEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetMultiTexEnvfvEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetMultiTexEnvfvEXT(dwtexunit, dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetMultiTexEnvfvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetMultiTexEnvfvEXT(dwtexunit, dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetMultiTexEnvivEXT (GLenum texunit, GLenum target, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetMultiTexEnvivEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetMultiTexEnvivEXT(dwtexunit, dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetMultiTexEnvivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetMultiTexEnvivEXT(dwtexunit, dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetMultiTexGendvEXT (GLenum texunit, GLenum coord, GLenum pname, GLdouble *params);
' ========================================================================================
DECLARE SUB Proto_glGetMultiTexGendvEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF DOUBLE)
MACRO glGetMultiTexGendvEXT(dwtexunit, dwcoord, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetMultiTexGendvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetMultiTexGendvEXT(dwtexunit, dwcoord, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetMultiTexGenfvEXT (GLenum texunit, GLenum coord, GLenum pname, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetMultiTexGenfvEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetMultiTexGenfvEXT(dwtexunit, dwcoord, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetMultiTexGenfvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetMultiTexGenfvEXT(dwtexunit, dwcoord, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetMultiTexGenivEXT (GLenum texunit, GLenum coord, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetMultiTexGenivEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetMultiTexGenivEXT(dwtexunit, dwcoord, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetMultiTexGenivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetMultiTexGenivEXT(dwtexunit, dwcoord, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetFloatIndexedvEXT (GLenum target, GLuint index, GLfloat *data);
' ========================================================================================
DECLARE SUB Proto_glGetFloatIndexedvEXT (BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetFloatIndexedvEXT(dwtarget, dwindex, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetFloatIndexedvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetFloatIndexedvEXT(dwtarget, dwindex, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetDoubleIndexedvEXT (GLenum target, GLuint index, GLdouble *data);
' ========================================================================================
DECLARE SUB Proto_glGetDoubleIndexedvEXT (BYVAL DWORD, BYVAL DWORD, BYREF DOUBLE)
MACRO glGetDoubleIndexedvEXT(dwtarget, dwindex, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetDoubleIndexedvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetDoubleIndexedvEXT(dwtarget, dwindex, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetPointerIndexedvEXT (GLenum target, GLuint index, GLvoid* *data);
' ========================================================================================
DECLARE SUB Proto_glGetPointerIndexedvEXT (BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glGetPointerIndexedvEXT(dwtarget, dwindex, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetPointerIndexedvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetPointerIndexedvEXT(dwtarget, dwindex, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCompressedTextureImage3DEXT (GLuint texture, GLenum target, GLint level,
' GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border,
' GLsizei imageSize, const GLvoid *bits);
' ========================================================================================
DECLARE SUB Proto_glCompressedTextureImage3DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYREF ANY)
MACRO glCompressedTextureImage3DEXT(dwtexture, dwtarget, ilevel, internalformat, iwidth, iheight, idepth, iborder, imageSize, pbits)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCompressedTextureImage3DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCompressedTextureImage3DEXT(dwtexture, dwtarget, ilevel, internalformat, iwidth, iheight, idepth, iborder, imageSize, pbits)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCompressedTextureImage2DEXT (GLuint texture, GLenum target, GLint level,
' GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize,
' const GLvoid *bits);
' ========================================================================================
DECLARE SUB Proto_glCompressedTextureImage2DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYREF ANY)
MACRO glCompressedTextureImage2DEXT(dwtexture, dwtarget, ilevel, internalformat, iwidth, iheight, iborder, imageSize, pbits)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCompressedTextureImage2DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCompressedTextureImage2DEXT(dwtexture, dwtarget, ilevel, internalformat, iwidth, iheight, iborder, imageSize, pbits)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCompressedTextureImage1DEXT (GLuint texture, GLenum target, GLint level,
' GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits);
' ========================================================================================
DECLARE SUB Proto_glCompressedTextureImage1DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYREF ANY)
MACRO glCompressedTextureImage1DEXT(dwtexture, dwtarget, ilevel, internalformat, iwidth, iborder, imageSize, pbits)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCompressedTextureImage1DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCompressedTextureImage1DEXT(dwtexture, dwtarget, ilevel, internalformat, iwidth, iborder, imageSize, pbits)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCompressedTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level,
' GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height,
' GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits);
' ========================================================================================
DECLARE SUB Proto_glCompressedTextureSubImage3DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glCompressedTextureSubImage3DEXT(dwtexture, dwtarget, ilevel, xoffset, yoffset, zoffset, iwidth, iheight, idepth, dwformat, imageSize, pbits)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCompressedTextureSubImage3DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCompressedTextureSubImage3DEXT(dwtexture, dwtarget, ilevel, xoffset, yoffset, zoffset, iwidth, iheight, idepth, dwformat, imageSize, pbits)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCompressedTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level,
' GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format,
' GLsizei imageSize, const GLvoid *bits);
' ========================================================================================
DECLARE SUB Proto_glCompressedTextureSubImage2DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glCompressedTextureSubImage2DEXT(dwtexture, dwtarget, ilevel, xoffset, yoffset, iwidth, iheight, dwformat, imageSize, pbits)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCompressedTextureSubImage2DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCompressedTextureSubImage2DEXT(dwtexture, dwtarget, ilevel, xoffset, yoffset, iwidth, iheight, dwformat, imageSize, pbits)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCompressedTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level,
' GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits);
' ========================================================================================
DECLARE SUB Proto_glCompressedTextureSubImage1DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glCompressedTextureSubImage1DEXT(dwtexture, dwtarget, ilevel, xoffset, iwidth, dwformat, imageSize, pbits)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCompressedTextureSubImage1DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCompressedTextureSubImage1DEXT(dwtexture, dwtarget, ilevel, xoffset, iwidth, dwformat, imageSize, pbits)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetCompressedTextureImageEXT (GLuint texture, GLenum target, GLint lod, GLvoid *img);
' ========================================================================================
DECLARE SUB Proto_glGetCompressedTextureImageEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glGetCompressedTextureImageEXT(dwtexture, dwtarget, ilod, pimg)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetCompressedTextureImageEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetCompressedTextureImageEXT(dwtexture, dwtarget, ilod, pimg)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCompressedMultiTexImage3DEXT (GLenum texunit, GLenum target, GLint level,
' GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border,
' GLsizei imageSize, const GLvoid *bits);
' ========================================================================================
DECLARE SUB Proto_glCompressedMultiTexImage3DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYREF ANY)
MACRO glCompressedMultiTexImage3DEXT(dwtexunit, detarget, ilevel, internalformat, iwidth, iheight, idepth, iborder, imageSize, pbits)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCompressedMultiTexImage3DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCompressedMultiTexImage3DEXT(dwtexunit, detarget, ilevel, internalformat, iwidth, iheight, idepth, iborder, imageSize, pbits)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCompressedMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level,
' GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize,
' const GLvoid *bits);
' ========================================================================================
DECLARE SUB Proto_glCompressedMultiTexImage2DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYREF ANY)
MACRO glCompressedMultiTexImage2DEXT(dwtexunit, dwtarget, ilevel, internalformat, iwidth, iheight, iborder, imageSize, pbits)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCompressedMultiTexImage2DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCompressedMultiTexImage2DEXT(dwtexunit, dwtarget, ilevel, internalformat, iwidth, iheight, iborder, imageSize, pbits)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCompressedMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level,
' GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits);
' ========================================================================================
DECLARE SUB Proto_glCompressedMultiTexImage1DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYREF ANY)
MACRO glCompressedMultiTexImage1DEXT(dwtexunit, dwtarget, ilevel, internalformat, iwidth, iborder, imageSize, pbits)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCompressedMultiTexImage1DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCompressedMultiTexImage1DEXT(dwtexunit, dwtarget, ilevel, internalformat, iwidth, iborder, imageSize, pbits)
END MACRO
' ========================================================================================

' ========================================================================================
' void (glCompressedMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level,
' GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height,
' GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits);
' ========================================================================================
DECLARE SUB Proto_glCompressedMultiTexSubImage3DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glCompressedMultiTexSubImage3DEXT(dwtexunit, dwtarget, ilevel, xoffset, yoffset, zoffset, iwidth, iheight, idepth, dwformat, imageSize, pbits)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCompressedMultiTexSubImage3DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCompressedMultiTexSubImage3DEXT(dwtexunit, dwtarget, ilevel, xoffset, yoffset, zoffset, iwidth, iheight, idepth, dwformat, imageSize, pbits)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCompressedMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level,
' GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format,
' GLsizei imageSize, const GLvoid *bits);
' ========================================================================================
DECLARE SUB Proto_glCompressedMultiTexSubImage2DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glCompressedMultiTexSubImage2DEXT(dwtexunit, dwtarget, ilevel, xoffset, yoffset, iwidth, iheight, dwformat, imageSize, pbits)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCompressedMultiTexSubImage2DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCompressedMultiTexSubImage2DEXT(dwtexunit, dwtarget, ilevel, xoffset, yoffset, iwidth, iheight, dwformat, imageSize, pbits)
END MACRO
' ========================================================================================

' ========================================================================================
' void glCompressedMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level,
' GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits);
' ========================================================================================
DECLARE SUB Proto_glCompressedMultiTexSubImage1DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glCompressedMultiTexSubImage1DEXT(dwtexunit, dwtarget, ilevel, xoffset, iwidth, dwformat, imageSize, pbits)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glCompressedMultiTexSubImage1DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCompressedMultiTexSubImage1DEXT(dwtexunit, dwtarget, ilevel, xoffset, iwidth, dwformat, imageSize, pbits)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetCompressedMultiTexImageEXT (GLenum texunit, GLenum target, GLint lod, GLvoid *img);
' ========================================================================================
DECLARE SUB Proto_glGetCompressedMultiTexImageEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glGetCompressedMultiTexImageEXT(dwtexunit, dwtarget, ilod, pimg)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetCompressedMultiTexImageEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetCompressedMultiTexImageEXT(dwtexunit, dwtarget, ilod, pimg)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNamedProgramStringEXT (GLuint program, GLenum target, GLenum format,
' GLsizei len, const GLvoid *string);
' ========================================================================================
DECLARE SUB Proto_glNamedProgramStringEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYREF ANY)
MACRO glNamedProgramStringEXT(dwprogram, dwtarget, dwformat, ilen, pstring)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNamedProgramStringEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glNamedProgramStringEXT(dwprogram, dwtarget, dwformat, ilen, pstring)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNamedProgramLocalParameter4dEXT (GLuint program, GLenum target, GLuint index,
' GLdouble x, GLdouble y, GLdouble z, GLdouble w);
' ========================================================================================
DECLARE SUB Proto_glNamedProgramLocalParameter4dEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE, BYVAL DOUBLE)
MACRO glNamedProgramLocalParameter4dEXT(dwprogram, dwtarget, dwindex, x, y, x, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNamedProgramLocalParameter4dEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glNamedProgramLocalParameter4dEXT(dwprogram, dwtarget, dwindex, x, y, x, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNamedProgramLocalParameter4dvEXT (GLuint program, GLenum target, GLuint index,
' const GLdouble *params);
' ========================================================================================
DECLARE SUB Proto_glNamedProgramLocalParameter4dvEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF DOUBLE)
MACRO glNamedProgramLocalParameter4dvEXT(dwprogram, dwtarget, dwindex, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNamedProgramLocalParameter4dvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glNamedProgramLocalParameter4dvEXT(dwprogram, dwtarget, dwindex, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNamedProgramLocalParameter4fEXT (GLuint program, GLenum target, GLuint index,
' GLfloat x, GLfloat y, GLfloat z, GLfloat w);
' ========================================================================================
DECLARE SUB Proto_glNamedProgramLocalParameter4fEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glNamedProgramLocalParameter4fEXT(dwprogram, dwtarget, dwindex, x, y, x, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNamedProgramLocalParameter4fEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glNamedProgramLocalParameter4fEXT(dwprogram, dwtarget, dwindex, x, y, x, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNamedProgramLocalParameter4fvEXT (GLuint program, GLenum target, GLuint index,
' const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glNamedProgramLocalParameter4fvEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glNamedProgramLocalParameter4fvEXT(dwprogram, dwtarget, dwindex, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNamedProgramLocalParameter4fvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glNamedProgramLocalParameter4fvEXT(dwprogram, dwtarget, dwindex, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetNamedProgramLocalParameterdvEXT (GLuint program, GLenum target, GLuint index, GLdouble *params);
' ========================================================================================
DECLARE SUB Proto_glGetNamedProgramLocalParameterdvEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF DOUBLE)
MACRO glGetNamedProgramLocalParameterdvEXT(dwprogram, dwtarget, dwindex, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetNamedProgramLocalParameterdvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetNamedProgramLocalParameterdvEXT(dwprogram, dwtarget, dwindex, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetNamedProgramLocalParameterfvEXT (GLuint program, GLenum target, GLuint index, GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glGetNamedProgramLocalParameterfvEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF SINGLE)
MACRO glGetNamedProgramLocalParameterfvEXT(dwprogram, dwtarget, dwindex, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetNamedProgramLocalParameterfvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetNamedProgramLocalParameterfvEXT(dwprogram, dwtarget, dwindex, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetNamedProgramivEXT (GLuint program, GLenum target, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetNamedProgramivEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetNamedProgramivEXT(dwprogram, dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetNamedProgramivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetNamedProgramivEXT(dwprogram, dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetNamedProgramStringEXT (GLuint program, GLenum target, GLenum pname, GLvoid *string);
' ========================================================================================
DECLARE SUB Proto_glGetNamedProgramStringEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glGetNamedProgramStringEXT(dwprogram, dwtarget, pname, pstring)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetNamedProgramStringEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetNamedProgramStringEXT(dwprogram, dwtarget, pname, pstring)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNamedProgramLocalParameters4fvEXT (GLuint program, GLenum target, GLuint index,
' GLsizei count, const GLfloat *params);
' ========================================================================================
DECLARE SUB Proto_glNamedProgramLocalParameters4fvEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYREF SINGLE)
MACRO glNamedProgramLocalParameters4fvEXT(dwprogram, dwtarget, dwindex, icount, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNamedProgramLocalParameters4fvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glNamedProgramLocalParameters4fvEXT(dwprogram, dwtarget, dwindex, icount, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNamedProgramLocalParameterI4iEXT (GLuint program, GLenum target, GLuint index,
' GLint x, GLint y, GLint z, GLint w);
' ========================================================================================
DECLARE SUB Proto_glNamedProgramLocalParameterI4iEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glNamedProgramLocalParameterI4iEXT(dwprogram, dwtarget, dwindex, x, y, x, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNamedProgramLocalParameterI4iEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glNamedProgramLocalParameterI4iEXT(dwprogram, dwtarget, dwindex, x, y, x, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNamedProgramLocalParameterI4ivEXT (GLuint program, GLenum target, GLuint index, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glNamedProgramLocalParameterI4ivEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glNamedProgramLocalParameterI4ivEXT(dwprogram, dwtarget, dwindex, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNamedProgramLocalParameterI4ivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glNamedProgramLocalParameterI4ivEXT(dwprogram, dwtarget, dwindex, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNamedProgramLocalParametersI4ivEXT (GLuint program, GLenum target, GLuint index,
' GLsizei count, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glNamedProgramLocalParametersI4ivEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYREF LONG)
MACRO glNamedProgramLocalParametersI4ivEXT(dwprogram, dwtarget, dwindex, icount, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNamedProgramLocalParametersI4ivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glNamedProgramLocalParametersI4ivEXT(dwprogram, dwtarget, dwindex, icount, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNamedProgramLocalParameterI4uiEXT (GLuint program, GLenum target, GLuint index,
' GLuint x, GLuint y, GLuint z, GLuint w);
' ========================================================================================
DECLARE SUB Proto_glNamedProgramLocalParameterI4uiEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glNamedProgramLocalParameterI4uiEXT(dwprogram, dwtarget, dwindex, x, y, x, w)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNamedProgramLocalParameterI4uiEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glNamedProgramLocalParameterI4uiEXT(dwprogram, dwtarget, dwindex, x, y, x, w)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNamedProgramLocalParameterI4uivEXT (GLuint program, GLenum target, GLuint index, const GLuint *params);
' ========================================================================================
DECLARE SUB Proto_glNamedProgramLocalParameterI4uivEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF DWORD)
MACRO glNamedProgramLocalParameterI4uivEXT(dwprogram, dwtarget, dwindex, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNamedProgramLocalParameterI4uivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glNamedProgramLocalParameterI4uivEXT(dwprogram, dwtarget, dwindex, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNamedProgramLocalParametersI4uivEXT (GLuint program, GLenum target, GLuint index,
' GLsizei count, const GLuint *params);
' ========================================================================================
DECLARE SUB Proto_glNamedProgramLocalParametersI4uivEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYREF DWORD)
MACRO glNamedProgramLocalParametersI4uivEXT(dwprogram, dwtarget, dwindex, icount, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNamedProgramLocalParametersI4uivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glNamedProgramLocalParametersI4uivEXT(dwprogram, dwtarget, dwindex, icount, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetNamedProgramLocalParameterIivEXT (GLuint program, GLenum target, GLuint index, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetNamedProgramLocalParameterIivEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetNamedProgramLocalParameterIivEXT(dwprogram, dwtarget, dwindex, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetNamedProgramLocalParameterIivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetNamedProgramLocalParameterIivEXT(dwprogram, dwtarget, dwindex, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetNamedProgramLocalParameterIuivEXT (GLuint program, GLenum target, GLuint index, GLuint *params);
' ========================================================================================
DECLARE SUB Proto_glGetNamedProgramLocalParameterIuivEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF DWORD)
MACRO glGetNamedProgramLocalParameterIuivEXT(dwprogram, dwtarget, dwindex, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetNamedProgramLocalParameterIuivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetNamedProgramLocalParameterIuivEXT(dwprogram, dwtarget, dwindex, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTextureParameterIivEXT (GLuint texture, GLenum target, GLenum pname, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glTextureParameterIivEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glTextureParameterIivEXT(dwtexture, dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTextureParameterIivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTextureParameterIivEXT(dwtexture, dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTextureParameterIuivEXT (GLuint texture, GLenum target, GLenum pname, const GLuint *params);
' ========================================================================================
DECLARE SUB Proto_glTextureParameterIuivEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF DWORD)
MACRO glTextureParameterIuivEXT(dwtexture, dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTextureParameterIuivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTextureParameterIuivEXT(dwtexture, dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetTextureParameterIivEXT (GLuint texture, GLenum target, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetTextureParameterIivEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetTextureParameterIivEXT(dwtexture, dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetTextureParameterIivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetTextureParameterIivEXT(dwtexture, dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetTextureParameterIuivEXT (GLuint texture, GLenum target, GLenum pname, GLuint *params);
' ========================================================================================
DECLARE SUB Proto_glGetTextureParameterIuivEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF DWORD)
MACRO glGetTextureParameterIuivEXT(dwtexture, dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetTextureParameterIuivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetTextureParameterIuivEXT(dwtexture, dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexParameterIivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
' ========================================================================================
DECLARE SUB Proto_glMultiTexParameterIivEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glMultiTexParameterIivEXT(dwtexunit, dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexParameterIivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexParameterIivEXT(dwtexunit, dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexParameterIuivEXT (GLenum texunit, GLenum target, GLenum pname, const GLuint *params);
' ========================================================================================
DECLARE SUB Proto_glMultiTexParameterIuivEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF DWORD)
MACRO glMultiTexParameterIuivEXT(dwtexunit, dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexParameterIuivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexParameterIuivEXT(dwtexunit, dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetMultiTexParameterIivEXT (GLenum texunit, GLenum target, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetMultiTexParameterIivEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetMultiTexParameterIivEXT(dwtexunit, dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetMultiTexParameterIivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetMultiTexParameterIivEXT(dwtexunit, dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetMultiTexParameterIuivEXT (GLenum texunit, GLenum target, GLenum pname, GLuint *params);
' ========================================================================================
DECLARE SUB Proto_glGetMultiTexParameterIuivEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF DWORD)
MACRO glGetMultiTexParameterIuivEXT(dwtexunit, dwtarget, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetMultiTexParameterIuivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetMultiTexParameterIuivEXT(dwtexunit, dwtarget, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniform1fEXT (GLuint program, GLint location, GLfloat v0);
' ========================================================================================
DECLARE SUB Proto_glProgramUniform1fEXT (BYVAL DWORD, BYVAL LONG, BYVAL SINGLE)
MACRO glProgramUniform1fEXT(dwprogram, ilocation, v0)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniform1fEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniform1fEXT(dwprogram, ilocation, v0)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniform2fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1);
' ========================================================================================
DECLARE SUB Proto_glProgramUniform2fEXT (BYVAL DWORD, BYVAL LONG, BYVAL SINGLE, BYVAL SINGLE)
MACRO glProgramUniform2fEXT(dwprogram, ilocation, v0, v1)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniform2fEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniform2fEXT(dwprogram, ilocation, v0, v1)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniform3fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
' ========================================================================================
DECLARE SUB Proto_glProgramUniform3fEXT (BYVAL DWORD, BYVAL LONG, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glProgramUniform3fEXT(dwprogram, ilocation, v0, v1, v2)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniform3fEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniform3fEXT(dwprogram, ilocation, v0, v1, v2)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniform4fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
' ========================================================================================
DECLARE SUB Proto_glProgramUniform4fEXT (BYVAL DWORD, BYVAL LONG, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE, BYVAL SINGLE)
MACRO glProgramUniform4fEXT(dwprogram, ilocation, v0, v1, v2, v3)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniform4fEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniform4fEXT(dwprogram, ilocation, v0, v1, v2, v3)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniform1iEXT (GLuint program, GLint location, GLint v0);
' ========================================================================================
DECLARE SUB Proto_glProgramUniform1iEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG)
MACRO glProgramUniform1iEXT(dwprogram, ilocation, v0)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniform1iEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniform1iEXT(dwprogram, ilocation, v0)
END MACRO
' ========================================================================================

' ========================================================================================
' GLAPI void APIENTRY glProgramUniform2iEXT (GLuint, GLint, GLint, GLint);
' typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IEXTPROC) (GLuint program, GLint location,
' GLint v0, GLint v1);
' ========================================================================================
DECLARE SUB Proto_glProgramUniform2iEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glProgramUniform2iEXT(dwprogram, ilocation, v0, v1)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniform2iEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniform2iEXT(dwprogram, ilocation, v0, v1)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniform3iEXT (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
' ========================================================================================
DECLARE SUB Proto_glProgramUniform3iEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glProgramUniform3iEXT(dwprogram, ilocation, v0, v1, v2)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniform3iEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniform3iEXT(dwprogram, ilocation, v0, v1, v2)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniform4iEXT (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
' ========================================================================================
DECLARE SUB Proto_glProgramUniform4iEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG, BYVAL LONG)
MACRO glProgramUniform4iEXT(dwprogram, ilocation, v0, v1, v2, v3)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniform4iEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniform4iEXT(dwprogram, ilocation, v0, v1, v2, v3)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniform1fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glProgramUniform1fvEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYREF SINGLE)
MACRO glProgramUniform1fvEXT(dwprogram, ilocation, icount, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniform1fvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniform1fvEXT(dwprogram, ilocation, icount, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniform2fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glProgramUniform2fvEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYREF SINGLE)
MACRO glProgramUniform2fvEXT(dwprogram, ilocation, icount, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniform2fvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniform2fvEXT(dwprogram, ilocation, icount, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniform3fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glProgramUniform3fvEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYREF SINGLE)
MACRO glProgramUniform3fvEXT(dwprogram, ilocation, icount, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniform3fvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniform3fvEXT(dwprogram, ilocation, icount, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniform4fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glProgramUniform4fvEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYREF SINGLE)
MACRO glProgramUniform4fvEXT(dwprogram, ilocation, icount, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniform4fvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniform4fvEXT(dwprogram, ilocation, icount, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniform1ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value);
' ========================================================================================
DECLARE SUB Proto_glProgramUniform1ivEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYREF LONG)
MACRO glProgramUniform1ivEXT(dwprogram, ilocation, icount, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniform1ivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniform1ivEXT(dwprogram, ilocation, icount, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniform2ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value);
' ========================================================================================
DECLARE SUB Proto_glProgramUniform2ivEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYREF LONG)
MACRO glProgramUniform2ivEXT(dwprogram, ilocation, icount, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniform2ivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniform2ivEXT(dwprogram, ilocation, icount, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniform3ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value);
' ========================================================================================
DECLARE SUB Proto_glProgramUniform3ivEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYREF LONG)
MACRO glProgramUniform3ivEXT(dwprogram, ilocation, icount, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniform3ivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniform3ivEXT(dwprogram, ilocation, icount, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniform4ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value);
' ========================================================================================
DECLARE SUB Proto_glProgramUniform4ivEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYREF LONG)
MACRO glProgramUniform4ivEXT(dwprogram, ilocation, icount, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniform4ivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniform4ivEXT(dwprogram, ilocation, icount, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniformMatrix2fvEXT (GLuint program, GLint location, GLsizei count,
' GLboolean transpose, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glProgramUniformMatrix2fvEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL BYTE, BYREF SINGLE)
MACRO glProgramUniformMatrix2fvEXT(dwprogram, ilocation, icount, btranspose, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniformMatrix2fvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniformMatrix2fvEXT(dwprogram, ilocation, icount, btranspose, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniformMatrix3fvEXT (GLuint program, GLint location, GLsizei count,
' GLboolean transpose, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glProgramUniformMatrix3fvEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL BYTE, BYREF SINGLE)
MACRO glProgramUniformMatrix3fvEXT(dwprogram, ilocation, icount, btranspose, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniformMatrix3fvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniformMatrix3fvEXT(dwprogram, ilocation, icount, btranspose, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniformMatrix4fvEXT (GLuint program, GLint location, GLsizei count,
' GLboolean transpose, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glProgramUniformMatrix4fvEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL BYTE, BYREF SINGLE)
MACRO glProgramUniformMatrix4fvEXT(dwprogram, ilocation, icount, btranspose, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniformMatrix4fvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniformMatrix4fvEXT(dwprogram, ilocation, icount, btranspose, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniformMatrix2x3fvEXT (GLuint program, GLint location, GLsizei count,
' GLboolean transpose, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glProgramUniformMatrix2x3fvEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL BYTE, BYREF SINGLE)
MACRO glProgramUniformMatrix2x3fvEXT(dwprogram, ilocation, icount, btranspose, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniformMatrix2x3fvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniformMatrix2x3fvEXT(dwprogram, ilocation, icount, btranspose, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniformMatrix3x2fvEXT (GLuint program, GLint location, GLsizei count,
' GLboolean transpose, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glProgramUniformMatrix3x2fvEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL BYTE, BYREF SINGLE)
MACRO glProgramUniformMatrix3x2fvEXT(dwprogram, ilocation, icount, btranspose, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniformMatrix3x2fvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniformMatrix3x2fvEXT(dwprogram, ilocation, icount, btranspose, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniformMatrix2x4fvEXT (GLuint program, GLint location, GLsizei count,
' GLboolean transpose, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glProgramUniformMatrix2x4fvEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL BYTE, BYREF SINGLE)
MACRO glProgramUniformMatrix2x4fvEXT(dwprogram, ilocation, icount, btranspose, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniformMatrix2x4fvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniformMatrix2x4fvEXT(dwprogram, ilocation, icount, btranspose, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniformMatrix4x2fvEXT (GLuint program, GLint location, GLsizei count,
' GLboolean transpose, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glProgramUniformMatrix4x2fvEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL BYTE, BYREF SINGLE)
MACRO glProgramUniformMatrix4x2fvEXT(dwprogram, ilocation, icount, btranspose, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniformMatrix4x2fvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniformMatrix4x2fvEXT(dwprogram, ilocation, icount, btranspose, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniformMatrix3x4fvEXT (GLuint program, GLint location, GLsizei count,
' GLboolean transpose, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glProgramUniformMatrix3x4fvEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL BYTE, BYREF SINGLE)
MACRO glProgramUniformMatrix3x4fvEXT(dwprogram, ilocation, icount, btranspose, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniformMatrix3x4fvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniformMatrix3x4fvEXT(dwprogram, ilocation, icount, btranspose, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniformMatrix4x3fvEXT (GLuint program, GLint location, GLsizei count,
' GLboolean transpose, const GLfloat *value);
' ========================================================================================
DECLARE SUB Proto_glProgramUniformMatrix4x3fvEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL BYTE, BYREF SINGLE)
MACRO glProgramUniformMatrix4x3fvEXT(dwprogram, ilocation, icount, btranspose, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniformMatrix4x3fvEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniformMatrix4x3fvEXT(dwprogram, ilocation, icount, btranspose, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniform1uiEXT (GLuint program, GLint location, GLuint v0);
' ========================================================================================
DECLARE SUB Proto_glProgramUniform1uiEXT (BYVAL DWORD, BYVAL LONG, BYVAL DWORD)
MACRO glProgramUniform1uiEXT(dwprogram, ilocation, v0)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniform1uiEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniform1uiEXT(dwprogram, ilocation, v0)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniform2uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1);
' ========================================================================================
DECLARE SUB Proto_glProgramUniform2uiEXT (BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL DWORD)
MACRO glProgramUniform2uiEXT(dwprogram, ilocation, v0, v1)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniform2uiEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniform2uiEXT(dwprogram, ilocation, v0, v1)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniform3uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
' ========================================================================================
DECLARE SUB Proto_glProgramUniform3uiEXT (BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glProgramUniform3uiEXT(dwprogram, ilocation, v0, v1, v2)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniform3uiEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniform3uiEXT(dwprogram, ilocation, v0, v1, v2)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniform4uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
' ========================================================================================
DECLARE SUB Proto_glProgramUniform4uiEXT (BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glProgramUniform4uiEXT(dwprogram, ilocation, v0, v1, v2, v3)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniform4uiEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniform4uiEXT(dwprogram, ilocation, v0, v1, v2, v3)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniform1uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value);
' ========================================================================================
DECLARE SUB Proto_glProgramUniform1uivEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYREF DWORD)
MACRO glProgramUniform1uivEXT(dwprogram, ilocation, v0, v1, v2, v3)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniform1uivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniform4uiEXT(dwprogram, ilocation, v0, v1, v2, v3)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniform2uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value);
' ========================================================================================
DECLARE SUB Proto_glProgramUniform2uivEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYREF DWORD)
MACRO glProgramUniform2uivEXT(dwprogram, ilocation, icount, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniform2uivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniform2uivEXT(dwprogram, ilocation, icount, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniform3uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value);
' ========================================================================================
DECLARE SUB Proto_glProgramUniform3uivEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYREF DWORD)
MACRO glProgramUniform3uivEXT(dwprogram, ilocation, icount, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniform3uivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniform3uivEXT(dwprogram, ilocation, icount, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glProgramUniform4uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value);
' ========================================================================================
DECLARE SUB Proto_glProgramUniform4uivEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYREF DWORD)
MACRO glProgramUniform4uivEXT(dwprogram, ilocation, icount, pvalue)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glProgramUniform4uivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glProgramUniform4uivEXT(dwprogram, ilocation, icount, pvalue)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNamedBufferDataEXT (GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage);
' ========================================================================================
DECLARE SUB Proto_glNamedBufferDataEXT (BYVAL DWORD, BYVAL DWORD, BYREF ANY, BYVAL DWORD)
MACRO glNamedBufferDataEXT(dwbuffer, dwsize, pdata, dwusage)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNamedBufferDataEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glNamedBufferDataEXT(dwbuffer, dwsize, pdata, dwusage)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNamedBufferSubDataEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data);
' ========================================================================================
DECLARE SUB Proto_glNamedBufferSubDataEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glNamedBufferSubDataEXT(dwbuffer, dwoffset, dwsize, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNamedBufferSubDataEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glNamedBufferSubDataEXT(dwbuffer, dwoffset, dwsize, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' GLvoid* glMapNamedBufferEXT (GLuint buffer, GLenum access);
' ========================================================================================
DECLARE FUNCTION Proto_glMapNamedBufferEXT (BYVAL DWORD, BYVAL DWORD) AS DWORD
MACRO FUNCTION glMapNamedBufferEXT(dwbuffer, dwaccess)
   MACROTEMP pProc, dwRes
   LOCAL pProc, dwRes AS DWORD
   pProc = wglGetProcAddress("glMapNamedBufferEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMapNamedBufferEXT(dwbuffer, dwaccess) TO dwRes
END MACRO = dwRes
' ========================================================================================

' ========================================================================================
' GLboolean glUnmapNamedBufferEXT (GLuint buffer);
' ========================================================================================
DECLARE FUNCTION Proto_glUnmapNamedBufferEXT (BYVAL DWORD) AS BYTE
MACRO FUNCTION glUnmapNamedBufferEXT(dwbuffer, dwaccess)
   MACROTEMP pProc, bRes
   LOCAL pProc AS DWORD, bRes AS BYTE
   pProc = wglGetProcAddress("glUnmapNamedBufferEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glUnmapNamedBufferEXT(dwbuffer, dwaccess) TO bRes
END MACRO = bRes
' ========================================================================================

' ========================================================================================
' void glGetNamedBufferParameterivEXT (GLuint buffer, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetNamedBufferParameterivEXT (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetNamedBufferParameterivEXT(dwbuffer, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetNamedBufferParameterivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetNamedBufferParameterivEXT(dwbuffer, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetNamedBufferPointervEXT (GLuint buffer, GLenum pname, GLvoid* *params);
' ========================================================================================
DECLARE SUB Proto_glGetNamedBufferPointervEXT (BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glGetNamedBufferPointervEXT(dwbuffer, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetNamedBufferPointervEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetNamedBufferPointervEXT(dwbuffer, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetNamedBufferSubDataEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data);
' ========================================================================================
DECLARE SUB Proto_glGetNamedBufferSubDataEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF ANY)
MACRO glGetNamedBufferSubDataEXT(dwbuffer, dwoffset, dwsize, pdata)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetNamedBufferSubDataEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetNamedBufferSubDataEXT(dwbuffer, dwoffset, dwsize, pdata)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTextureBufferEXT (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
' ========================================================================================
DECLARE SUB Proto_glTextureBufferEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glTextureBufferEXT(dwtexture, dwtarget, internalformat, dwbuffer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTextureBufferEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTextureBufferEXT(dwtexture, dwtarget, internalformat, dwbuffer)
END MACRO
' ========================================================================================

' ========================================================================================
' GLAPI void APIENTRY glMultiTexBufferEXT (GLenum, GLenum, GLenum, GLuint);
' typedef void (APIENTRYP PFNGLMULTITEXBUFFEREXTPROC) (GLenum texunit, GLenum target,
' GLenum internalformat, GLuint buffer);
' ========================================================================================
DECLARE SUB Proto_glMultiTexBufferEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glMultiTexBufferEXT(dwtexunit, dwtarget, internalformat, dwbuffer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexBufferEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexBufferEXT(dwtexunit, dwtarget, internalformat, dwbuffer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNamedRenderbufferStorageEXT (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
' ========================================================================================
DECLARE SUB Proto_glNamedRenderbufferStorageEXT (BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG)
MACRO glNamedRenderbufferStorageEXT(renderbuffer, internalformat, iwidth, iheight)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNamedRenderbufferStorageEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glNamedRenderbufferStorageEXT(renderbuffer, internalformat, iwidth, iheight)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetNamedRenderbufferParameterivEXT (GLuint renderbuffer, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetNamedRenderbufferParameterivEXT (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetNamedRenderbufferParameterivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' GLenum glCheckNamedFramebufferStatusEXT (GLuint framebuffer, GLenum target);
' ========================================================================================
DECLARE FUNCTION Proto_glCheckNamedFramebufferStatusEXT (BYVAL DWORD, BYVAL DWORD) AS DWORD
MACRO FUNCTION glCheckNamedFramebufferStatusEXT(framebuffer, dwtarget)
   MACROTEMP pProc, dwRes
   LOCAL pProc, dwRes AS DWORD
   pProc = wglGetProcAddress("glCheckNamedFramebufferStatusEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glCheckNamedFramebufferStatusEXT(framebuffer, dwtarget) TO dwRes
END MACRO = dwRes
' ========================================================================================

' ========================================================================================
' void glNamedFramebufferTexture1DEXT (GLuint framebuffer, GLenum attachment,
' GLenum textarget, GLuint texture, GLint level);
' ========================================================================================
DECLARE SUB Proto_glNamedFramebufferTexture1DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG)
MACRO glNamedFramebufferTexture1DEXT(framebuffer, dwattachment, dwtextarget, dwtexture, ilevel)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNamedFramebufferTexture1DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glNamedFramebufferTexture1DEXT(framebuffer, dwattachment, dwtextarget, dwtexture, ilevel)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNamedFramebufferTexture2DEXT (GLuint framebuffer, GLenum attachment,
' GLenum textarget, GLuint texture, GLint level);
' ========================================================================================
DECLARE SUB Proto_glNamedFramebufferTexture2DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG)
MACRO glNamedFramebufferTexture2DEXT(framebuffer, dwattachment, dwtextarget, dwtexture, ilevel)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNamedFramebufferTexture2DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glNamedFramebufferTexture2DEXT(framebuffer, dwattachment, dwtextarget, dwtexture, ilevel)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNamedFramebufferTexture3DEXT (GLuint framebuffer, GLenum attachment,
' GLenum textarget, GLuint texture, GLint level, GLint zoffset);
' ========================================================================================
DECLARE SUB Proto_glNamedFramebufferTexture3DEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG)
MACRO glNamedFramebufferTexture3DEXT(framebuffer, dwattachment, dwtextarget, dwtexture, ilevel, zoffset)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNamedFramebufferTexture3DEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glNamedFramebufferTexture3DEXT(framebuffer, dwattachment, dwtextarget, dwtexture, ilevel, zoffset)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNamedFramebufferRenderbufferEXT (GLuint framebuffer, GLenum attachment,
' GLenum renderbuffertarget, GLuint renderbuffer);
' ========================================================================================
DECLARE SUB Proto_glNamedFramebufferRenderbufferEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glNamedFramebufferRenderbufferEXT(framebuffer, dwattachment, renderbuffertarget, renderbuffer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNamedFramebufferRenderbufferEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glNamedFramebufferRenderbufferEXT(framebuffer, dwattachment, renderbuffertarget, renderbuffer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetNamedFramebufferAttachmentParameterivEXT (GLuint framebuffer,
' GLenum attachment, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetNamedFramebufferAttachmentParameterivEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, dwattachment, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetNamedFramebufferAttachmentParameterivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, dwattachment, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGenerateTextureMipmapEXT (GLuint texture, GLenum target);
' ========================================================================================
DECLARE SUB Proto_glGenerateTextureMipmapEXT (BYVAL DWORD, BYVAL DWORD)
MACRO glGenerateTextureMipmapEXT(dwtexture, dwtarget)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGenerateTextureMipmapEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGenerateTextureMipmapEXT(dwtexture, dwtarget)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGenerateMultiTexMipmapEXT (GLenum texunit, GLenum target);
' ========================================================================================
DECLARE SUB Proto_glGenerateMultiTexMipmapEXT (BYVAL DWORD, BYVAL DWORD)
MACRO glGenerateMultiTexMipmapEXT(dwtexunit, dwtarget)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGenerateMultiTexMipmapEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGenerateMultiTexMipmapEXT(dwtexunit, dwtarget)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFramebufferDrawBufferEXT (GLuint framebuffer, GLenum mode);
' ========================================================================================
DECLARE SUB Proto_glFramebufferDrawBufferEXT (BYVAL DWORD, BYVAL DWORD)
MACRO glFramebufferDrawBufferEXT(framebuffer, dwmode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFramebufferDrawBufferEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glFramebufferDrawBufferEXT(framebuffer, dwmode)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFramebufferDrawBuffersEXT (GLuint framebuffer, GLsizei n, const GLenum *bufs);
' ========================================================================================
DECLARE SUB Proto_glFramebufferDrawBuffersEXT (BYVAL DWORD, BYVAL LONG, BYREF DWORD)
MACRO glFramebufferDrawBuffersEXT(framebuffer, n, pbufs)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFramebufferDrawBuffersEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glFramebufferDrawBuffersEXT(framebuffer, n, pbufs)
END MACRO
' ========================================================================================

' ========================================================================================
' void glFramebufferReadBufferEXT (GLuint framebuffer, GLenum mode);
' ========================================================================================
DECLARE SUB Proto_glFramebufferReadBufferEXT (BYVAL DWORD, BYVAL DWORD)
MACRO glFramebufferReadBufferEXT(framebuffer, dwmode)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glFramebufferReadBufferEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glFramebufferReadBufferEXT(framebuffer, dwmode)
END MACRO
' ========================================================================================

' ========================================================================================
' void glGetFramebufferParameterivEXT (GLuint framebuffer, GLenum pname, GLint *params);
' ========================================================================================
DECLARE SUB Proto_glGetFramebufferParameterivEXT (BYVAL DWORD, BYVAL DWORD, BYREF LONG)
MACRO glGetFramebufferParameterivEXT(framebuffer, pname, pparams)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glGetFramebufferParameterivEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glGetFramebufferParameterivEXT(framebuffer, pname, pparams)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNamedRenderbufferStorageMultisampleEXT (GLuint renderbuffer, GLsizei samples,
' GLenum internalformat, GLsizei width, GLsizei height);
' ========================================================================================
DECLARE SUB Proto_glNamedRenderbufferStorageMultisampleEXT (BYVAL DWORD, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG)
MACRO glNamedRenderbufferStorageMultisampleEXT(renderbuffer, isamples, internalformat, iwidth, iheight)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNamedRenderbufferStorageMultisampleEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glNamedRenderbufferStorageMultisampleEXT(renderbuffer, isamples, internalformat, iwidth, iheight)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNamedRenderbufferStorageMultisampleCoverageEXT (GLuint renderbuffer,
' GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
' ========================================================================================
DECLARE SUB Proto_glNamedRenderbufferStorageMultisampleCoverageEXT (BYVAL DWORD, BYVAL LONG, BYVAL LONG, BYVAL DWORD, BYVAL LONG, BYVAL LONG)
MACRO glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, iwidth, iheight)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNamedRenderbufferStorageMultisampleCoverageEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, iwidth, iheight)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNamedFramebufferTextureEXT (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
' ========================================================================================
DECLARE SUB Proto_glNamedFramebufferTextureEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG)
MACRO glNamedFramebufferTextureEXT(framebuffer, dwattachment, dwtexture, ilevel)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNamedFramebufferTextureEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glNamedFramebufferTextureEXT(framebuffer, dwattachment, dwtexture, ilevel)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNamedFramebufferTextureLayerEXT (GLuint framebuffer, GLenum attachment,
' GLuint texture, GLint level, GLint layer);
' ========================================================================================
DECLARE SUB Proto_glNamedFramebufferTextureLayerEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL LONG)
MACRO glNamedFramebufferTextureLayerEXT(framebuffer, dwattachment, dwtexture, ilevel, ilayer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNamedFramebufferTextureLayerEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glNamedFramebufferTextureLayerEXT(framebuffer, dwattachment, dwtexture, ilevel, ilayer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glNamedFramebufferTextureFaceEXT (GLuint framebuffer, GLenum attachment,
' GLuint texture, GLint level, GLenum face);
' ========================================================================================
DECLARE SUB Proto_glNamedFramebufferTextureFaceEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD, BYVAL LONG, BYVAL DWORD)
MACRO glNamedFramebufferTextureFaceEXT(framebuffer, dwattachment, dwtexture, ilevel, dwface)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glNamedFramebufferTextureFaceEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glNamedFramebufferTextureFaceEXT(framebuffer, dwattachment, dwtexture, ilevel, dwface)
END MACRO
' ========================================================================================

' ========================================================================================
' void glTextureRenderbufferEXT (GLuint texture, GLenum target, GLuint renderbuffer);
' ========================================================================================
DECLARE SUB Proto_glTextureRenderbufferEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glTextureRenderbufferEXT(dwtexture, dwtarget, renderbuffer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glTextureRenderbufferEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glTextureRenderbufferEXT(dwtexture, dwtarget, renderbuffer)
END MACRO
' ========================================================================================

' ========================================================================================
' void glMultiTexRenderbufferEXT (GLenum texunit, GLenum target, GLuint renderbuffer);
' ========================================================================================
DECLARE SUB Proto_glMultiTexRenderbufferEXT (BYVAL DWORD, BYVAL DWORD, BYVAL DWORD)
MACRO glMultiTexRenderbufferEXT(dwtexunit, dwtarget, renderbuffer)
   MACROTEMP pProc
   LOCAL pProc AS DWORD
   pProc = wglGetProcAddress("glMultiTexRenderbufferEXT")
   IF pProc THEN CALL DWORD pProc USING Proto_glMultiTexRenderbufferEXT(dwtexunit, dwtarget, renderbuffer)
END MACRO
' ========================================================================================

'#ENDIF ' %GL_GLEXT_PROTOTYPES

#ENDIF

#IF NOT %DEF(%GL_EXT_vertex_array_bgra)
%GL_EXT_vertex_array_bgra = 1
#ENDIF

#ENDIF   ' #IF NOT %DEF(%GLEXT_INC)
